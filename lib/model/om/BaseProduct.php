<?php

/**
 * Base class that represents a row from the 'EMT_PRODUCT' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/10/12 16:10:28
 *
 * @package    lib.model.om
 */
abstract class BaseProduct extends BaseObject  implements Persistent {


  const PEER = 'ProductPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProductPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the category_id field.
	 * @var        int
	 */
	protected $category_id;

	/**
	 * The value for the company_id field.
	 * @var        int
	 */
	protected $company_id;

	/**
	 * The value for the model_no field.
	 * @var        string
	 */
	protected $model_no;

	/**
	 * The value for the active field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $active;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the payment_terms field.
	 * Note: this column has a database default value of: 'a:0:{}'
	 * @var        string
	 */
	protected $payment_terms;

	/**
	 * The value for the group_id field.
	 * @var        int
	 */
	protected $group_id;

	/**
	 * The value for the origin field.
	 * @var        string
	 */
	protected $origin;

	/**
	 * The value for the keyword field.
	 * @var        string
	 */
	protected $keyword;

	/**
	 * The value for the brand_name field.
	 * @var        string
	 */
	protected $brand_name;

	/**
	 * The value for the min_order_quantity field.
	 * @var        int
	 */
	protected $min_order_quantity;

	/**
	 * The value for the quantity_unit field.
	 * @var        int
	 */
	protected $quantity_unit;

	/**
	 * The value for the price_start field.
	 * @var        int
	 */
	protected $price_start;

	/**
	 * The value for the price_end field.
	 * @var        int
	 */
	protected $price_end;

	/**
	 * The value for the price_currency field.
	 * @var        string
	 */
	protected $price_currency;

	/**
	 * The value for the price_unit field.
	 * @var        int
	 */
	protected $price_unit;

	/**
	 * The value for the capacity field.
	 * @var        int
	 */
	protected $capacity;

	/**
	 * The value for the capacity_unit field.
	 * @var        int
	 */
	protected $capacity_unit;

	/**
	 * The value for the capacity_period_id field.
	 * @var        int
	 */
	protected $capacity_period_id;

	/**
	 * The value for the approval_status field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $approval_status;

	/**
	 * The value for the brand_id field.
	 * @var        int
	 */
	protected $brand_id;

	/**
	 * The value for the default_lang field.
	 * @var        string
	 */
	protected $default_lang;

	/**
	 * The value for the is_top_product field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_top_product;

	/**
	 * @var        ProductCategory
	 */
	protected $aProductCategory;

	/**
	 * @var        Company
	 */
	protected $aCompany;

	/**
	 * @var        ProductGroup
	 */
	protected $aProductGroup;

	/**
	 * @var        ProductQuantityUnit
	 */
	protected $aProductQuantityUnitRelatedByQuantityUnit;

	/**
	 * @var        ProductQuantityUnit
	 */
	protected $aProductQuantityUnitRelatedByPriceUnit;

	/**
	 * @var        ProductQuantityUnit
	 */
	protected $aProductQuantityUnitRelatedByCapacityUnit;

	/**
	 * @var        TimePeriod
	 */
	protected $aTimePeriod;

	/**
	 * @var        CompanyBrand
	 */
	protected $aCompanyBrand;

	/**
	 * @var        array ProductI18n[] Collection to store aggregation of ProductI18n objects.
	 */
	protected $collProductI18ns;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProductI18ns.
	 */
	private $lastProductI18nCriteria = null;

	/**
	 * @var        array ProductAttr[] Collection to store aggregation of ProductAttr objects.
	 */
	protected $collProductAttrs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProductAttrs.
	 */
	private $lastProductAttrCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

  /**
   * The value for the culture field.
   * @var string
   */
  protected $culture;

	/**
	 * Initializes internal state of BaseProduct object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->active = false;
		$this->payment_terms = 'a:0:{}';
		$this->approval_status = 0;
		$this->is_top_product = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [category_id] column value.
	 * 
	 * @return     int
	 */
	public function getCategoryId()
	{
		return $this->category_id;
	}

	/**
	 * Get the [company_id] column value.
	 * 
	 * @return     int
	 */
	public function getCompanyId()
	{
		return $this->company_id;
	}

	/**
	 * Get the [model_no] column value.
	 * 
	 * @return     string
	 */
	public function getModelNo()
	{
		return $this->model_no;
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     boolean
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [payment_terms] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentTerms()
	{
		return $this->payment_terms;
	}

	/**
	 * Get the [group_id] column value.
	 * 
	 * @return     int
	 */
	public function getGroupId()
	{
		return $this->group_id;
	}

	/**
	 * Get the [origin] column value.
	 * 
	 * @return     string
	 */
	public function getOrigin()
	{
		return $this->origin;
	}

	/**
	 * Get the [keyword] column value.
	 * 
	 * @return     string
	 */
	public function getKeyword()
	{
		return $this->keyword;
	}

	/**
	 * Get the [brand_name] column value.
	 * 
	 * @return     string
	 */
	public function getBrandName()
	{
		return $this->brand_name;
	}

	/**
	 * Get the [min_order_quantity] column value.
	 * 
	 * @return     int
	 */
	public function getMinOrderQuantity()
	{
		return $this->min_order_quantity;
	}

	/**
	 * Get the [quantity_unit] column value.
	 * 
	 * @return     int
	 */
	public function getQuantityUnit()
	{
		return $this->quantity_unit;
	}

	/**
	 * Get the [price_start] column value.
	 * 
	 * @return     int
	 */
	public function getPriceStart()
	{
		return $this->price_start;
	}

	/**
	 * Get the [price_end] column value.
	 * 
	 * @return     int
	 */
	public function getPriceEnd()
	{
		return $this->price_end;
	}

	/**
	 * Get the [price_currency] column value.
	 * 
	 * @return     string
	 */
	public function getPriceCurrency()
	{
		return $this->price_currency;
	}

	/**
	 * Get the [price_unit] column value.
	 * 
	 * @return     int
	 */
	public function getPriceUnit()
	{
		return $this->price_unit;
	}

	/**
	 * Get the [capacity] column value.
	 * 
	 * @return     int
	 */
	public function getCapacity()
	{
		return $this->capacity;
	}

	/**
	 * Get the [capacity_unit] column value.
	 * 
	 * @return     int
	 */
	public function getCapacityUnit()
	{
		return $this->capacity_unit;
	}

	/**
	 * Get the [capacity_period_id] column value.
	 * 
	 * @return     int
	 */
	public function getCapacityPeriodId()
	{
		return $this->capacity_period_id;
	}

	/**
	 * Get the [approval_status] column value.
	 * 
	 * @return     int
	 */
	public function getApprovalStatus()
	{
		return $this->approval_status;
	}

	/**
	 * Get the [brand_id] column value.
	 * 
	 * @return     int
	 */
	public function getBrandId()
	{
		return $this->brand_id;
	}

	/**
	 * Get the [default_lang] column value.
	 * 
	 * @return     string
	 */
	public function getDefaultLang()
	{
		return $this->default_lang;
	}

	/**
	 * Get the [is_top_product] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsTopProduct()
	{
		return $this->is_top_product;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ProductPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [category_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setCategoryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->category_id !== $v) {
			$this->category_id = $v;
			$this->modifiedColumns[] = ProductPeer::CATEGORY_ID;
		}

		if ($this->aProductCategory !== null && $this->aProductCategory->getId() !== $v) {
			$this->aProductCategory = null;
		}

		return $this;
	} // setCategoryId()

	/**
	 * Set the value of [company_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setCompanyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->company_id !== $v) {
			$this->company_id = $v;
			$this->modifiedColumns[] = ProductPeer::COMPANY_ID;
		}

		if ($this->aCompany !== null && $this->aCompany->getId() !== $v) {
			$this->aCompany = null;
		}

		return $this;
	} // setCompanyId()

	/**
	 * Set the value of [model_no] column.
	 * 
	 * @param      string $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setModelNo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->model_no !== $v) {
			$this->model_no = $v;
			$this->modifiedColumns[] = ProductPeer::MODEL_NO;
		}

		return $this;
	} // setModelNo()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->active !== $v || $v === false) {
			$this->active = $v;
			$this->modifiedColumns[] = ProductPeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Product The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProductPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Product The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProductPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [payment_terms] column.
	 * 
	 * @param      string $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setPaymentTerms($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_terms !== $v || $v === 'a:0:{}') {
			$this->payment_terms = $v;
			$this->modifiedColumns[] = ProductPeer::PAYMENT_TERMS;
		}

		return $this;
	} // setPaymentTerms()

	/**
	 * Set the value of [group_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setGroupId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->group_id !== $v) {
			$this->group_id = $v;
			$this->modifiedColumns[] = ProductPeer::GROUP_ID;
		}

		if ($this->aProductGroup !== null && $this->aProductGroup->getId() !== $v) {
			$this->aProductGroup = null;
		}

		return $this;
	} // setGroupId()

	/**
	 * Set the value of [origin] column.
	 * 
	 * @param      string $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setOrigin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->origin !== $v) {
			$this->origin = $v;
			$this->modifiedColumns[] = ProductPeer::ORIGIN;
		}

		return $this;
	} // setOrigin()

	/**
	 * Set the value of [keyword] column.
	 * 
	 * @param      string $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setKeyword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->keyword !== $v) {
			$this->keyword = $v;
			$this->modifiedColumns[] = ProductPeer::KEYWORD;
		}

		return $this;
	} // setKeyword()

	/**
	 * Set the value of [brand_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setBrandName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brand_name !== $v) {
			$this->brand_name = $v;
			$this->modifiedColumns[] = ProductPeer::BRAND_NAME;
		}

		return $this;
	} // setBrandName()

	/**
	 * Set the value of [min_order_quantity] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setMinOrderQuantity($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->min_order_quantity !== $v) {
			$this->min_order_quantity = $v;
			$this->modifiedColumns[] = ProductPeer::MIN_ORDER_QUANTITY;
		}

		return $this;
	} // setMinOrderQuantity()

	/**
	 * Set the value of [quantity_unit] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setQuantityUnit($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->quantity_unit !== $v) {
			$this->quantity_unit = $v;
			$this->modifiedColumns[] = ProductPeer::QUANTITY_UNIT;
		}

		if ($this->aProductQuantityUnitRelatedByQuantityUnit !== null && $this->aProductQuantityUnitRelatedByQuantityUnit->getId() !== $v) {
			$this->aProductQuantityUnitRelatedByQuantityUnit = null;
		}

		return $this;
	} // setQuantityUnit()

	/**
	 * Set the value of [price_start] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setPriceStart($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->price_start !== $v) {
			$this->price_start = $v;
			$this->modifiedColumns[] = ProductPeer::PRICE_START;
		}

		return $this;
	} // setPriceStart()

	/**
	 * Set the value of [price_end] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setPriceEnd($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->price_end !== $v) {
			$this->price_end = $v;
			$this->modifiedColumns[] = ProductPeer::PRICE_END;
		}

		return $this;
	} // setPriceEnd()

	/**
	 * Set the value of [price_currency] column.
	 * 
	 * @param      string $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setPriceCurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price_currency !== $v) {
			$this->price_currency = $v;
			$this->modifiedColumns[] = ProductPeer::PRICE_CURRENCY;
		}

		return $this;
	} // setPriceCurrency()

	/**
	 * Set the value of [price_unit] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setPriceUnit($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->price_unit !== $v) {
			$this->price_unit = $v;
			$this->modifiedColumns[] = ProductPeer::PRICE_UNIT;
		}

		if ($this->aProductQuantityUnitRelatedByPriceUnit !== null && $this->aProductQuantityUnitRelatedByPriceUnit->getId() !== $v) {
			$this->aProductQuantityUnitRelatedByPriceUnit = null;
		}

		return $this;
	} // setPriceUnit()

	/**
	 * Set the value of [capacity] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setCapacity($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->capacity !== $v) {
			$this->capacity = $v;
			$this->modifiedColumns[] = ProductPeer::CAPACITY;
		}

		return $this;
	} // setCapacity()

	/**
	 * Set the value of [capacity_unit] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setCapacityUnit($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->capacity_unit !== $v) {
			$this->capacity_unit = $v;
			$this->modifiedColumns[] = ProductPeer::CAPACITY_UNIT;
		}

		if ($this->aProductQuantityUnitRelatedByCapacityUnit !== null && $this->aProductQuantityUnitRelatedByCapacityUnit->getId() !== $v) {
			$this->aProductQuantityUnitRelatedByCapacityUnit = null;
		}

		return $this;
	} // setCapacityUnit()

	/**
	 * Set the value of [capacity_period_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setCapacityPeriodId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->capacity_period_id !== $v) {
			$this->capacity_period_id = $v;
			$this->modifiedColumns[] = ProductPeer::CAPACITY_PERIOD_ID;
		}

		if ($this->aTimePeriod !== null && $this->aTimePeriod->getId() !== $v) {
			$this->aTimePeriod = null;
		}

		return $this;
	} // setCapacityPeriodId()

	/**
	 * Set the value of [approval_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setApprovalStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->approval_status !== $v || $v === 0) {
			$this->approval_status = $v;
			$this->modifiedColumns[] = ProductPeer::APPROVAL_STATUS;
		}

		return $this;
	} // setApprovalStatus()

	/**
	 * Set the value of [brand_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setBrandId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->brand_id !== $v) {
			$this->brand_id = $v;
			$this->modifiedColumns[] = ProductPeer::BRAND_ID;
		}

		if ($this->aCompanyBrand !== null && $this->aCompanyBrand->getId() !== $v) {
			$this->aCompanyBrand = null;
		}

		return $this;
	} // setBrandId()

	/**
	 * Set the value of [default_lang] column.
	 * 
	 * @param      string $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setDefaultLang($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->default_lang !== $v) {
			$this->default_lang = $v;
			$this->modifiedColumns[] = ProductPeer::DEFAULT_LANG;
		}

		return $this;
	} // setDefaultLang()

	/**
	 * Set the value of [is_top_product] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Product The current object (for fluent API support)
	 */
	public function setIsTopProduct($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_top_product !== $v || $v === false) {
			$this->is_top_product = $v;
			$this->modifiedColumns[] = ProductPeer::IS_TOP_PRODUCT;
		}

		return $this;
	} // setIsTopProduct()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(ProductPeer::ACTIVE,ProductPeer::PAYMENT_TERMS,ProductPeer::APPROVAL_STATUS,ProductPeer::IS_TOP_PRODUCT))) {
				return false;
			}

			if ($this->active !== false) {
				return false;
			}

			if ($this->payment_terms !== 'a:0:{}') {
				return false;
			}

			if ($this->approval_status !== 0) {
				return false;
			}

			if ($this->is_top_product !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->category_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->company_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->model_no = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->active = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
			$this->created_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->updated_at = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->payment_terms = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->group_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->origin = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->keyword = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->brand_name = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->min_order_quantity = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->quantity_unit = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->price_start = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->price_end = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->price_currency = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->price_unit = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->capacity = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->capacity_unit = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->capacity_period_id = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->approval_status = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->brand_id = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->default_lang = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->is_top_product = ($row[$startcol + 24] !== null) ? (boolean) $row[$startcol + 24] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 25; // 25 = ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Product object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProductCategory !== null && $this->category_id !== $this->aProductCategory->getId()) {
			$this->aProductCategory = null;
		}
		if ($this->aCompany !== null && $this->company_id !== $this->aCompany->getId()) {
			$this->aCompany = null;
		}
		if ($this->aProductGroup !== null && $this->group_id !== $this->aProductGroup->getId()) {
			$this->aProductGroup = null;
		}
		if ($this->aProductQuantityUnitRelatedByQuantityUnit !== null && $this->quantity_unit !== $this->aProductQuantityUnitRelatedByQuantityUnit->getId()) {
			$this->aProductQuantityUnitRelatedByQuantityUnit = null;
		}
		if ($this->aProductQuantityUnitRelatedByPriceUnit !== null && $this->price_unit !== $this->aProductQuantityUnitRelatedByPriceUnit->getId()) {
			$this->aProductQuantityUnitRelatedByPriceUnit = null;
		}
		if ($this->aProductQuantityUnitRelatedByCapacityUnit !== null && $this->capacity_unit !== $this->aProductQuantityUnitRelatedByCapacityUnit->getId()) {
			$this->aProductQuantityUnitRelatedByCapacityUnit = null;
		}
		if ($this->aTimePeriod !== null && $this->capacity_period_id !== $this->aTimePeriod->getId()) {
			$this->aTimePeriod = null;
		}
		if ($this->aCompanyBrand !== null && $this->brand_id !== $this->aCompanyBrand->getId()) {
			$this->aCompanyBrand = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProductPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProductCategory = null;
			$this->aCompany = null;
			$this->aProductGroup = null;
			$this->aProductQuantityUnitRelatedByQuantityUnit = null;
			$this->aProductQuantityUnitRelatedByPriceUnit = null;
			$this->aProductQuantityUnitRelatedByCapacityUnit = null;
			$this->aTimePeriod = null;
			$this->aCompanyBrand = null;
			$this->collProductI18ns = null;
			$this->lastProductI18nCriteria = null;

			$this->collProductAttrs = null;
			$this->lastProductAttrCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProduct:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ProductPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseProduct:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProduct:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(ProductPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(ProductPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseProduct:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ProductPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProductCategory !== null) {
				if ($this->aProductCategory->isModified() || ($this->aProductCategory->getCulture() && $this->aProductCategory->getCurrentProductCategoryI18n()->isModified()) || $this->aProductCategory->isNew()) {
					$affectedRows += $this->aProductCategory->save($con);
				}
				$this->setProductCategory($this->aProductCategory);
			}

			if ($this->aCompany !== null) {
				if ($this->aCompany->isModified() || $this->aCompany->isNew()) {
					$affectedRows += $this->aCompany->save($con);
				}
				$this->setCompany($this->aCompany);
			}

			if ($this->aProductGroup !== null) {
				if ($this->aProductGroup->isModified() || ($this->aProductGroup->getCulture() && $this->aProductGroup->getCurrentProductGroupI18n()->isModified()) || $this->aProductGroup->isNew()) {
					$affectedRows += $this->aProductGroup->save($con);
				}
				$this->setProductGroup($this->aProductGroup);
			}

			if ($this->aProductQuantityUnitRelatedByQuantityUnit !== null) {
				if ($this->aProductQuantityUnitRelatedByQuantityUnit->isModified() || ($this->aProductQuantityUnitRelatedByQuantityUnit->getCulture() && $this->aProductQuantityUnitRelatedByQuantityUnit->getCurrentProductQuantityUnitI18n()->isModified()) || $this->aProductQuantityUnitRelatedByQuantityUnit->isNew()) {
					$affectedRows += $this->aProductQuantityUnitRelatedByQuantityUnit->save($con);
				}
				$this->setProductQuantityUnitRelatedByQuantityUnit($this->aProductQuantityUnitRelatedByQuantityUnit);
			}

			if ($this->aProductQuantityUnitRelatedByPriceUnit !== null) {
				if ($this->aProductQuantityUnitRelatedByPriceUnit->isModified() || ($this->aProductQuantityUnitRelatedByPriceUnit->getCulture() && $this->aProductQuantityUnitRelatedByPriceUnit->getCurrentProductQuantityUnitI18n()->isModified()) || $this->aProductQuantityUnitRelatedByPriceUnit->isNew()) {
					$affectedRows += $this->aProductQuantityUnitRelatedByPriceUnit->save($con);
				}
				$this->setProductQuantityUnitRelatedByPriceUnit($this->aProductQuantityUnitRelatedByPriceUnit);
			}

			if ($this->aProductQuantityUnitRelatedByCapacityUnit !== null) {
				if ($this->aProductQuantityUnitRelatedByCapacityUnit->isModified() || ($this->aProductQuantityUnitRelatedByCapacityUnit->getCulture() && $this->aProductQuantityUnitRelatedByCapacityUnit->getCurrentProductQuantityUnitI18n()->isModified()) || $this->aProductQuantityUnitRelatedByCapacityUnit->isNew()) {
					$affectedRows += $this->aProductQuantityUnitRelatedByCapacityUnit->save($con);
				}
				$this->setProductQuantityUnitRelatedByCapacityUnit($this->aProductQuantityUnitRelatedByCapacityUnit);
			}

			if ($this->aTimePeriod !== null) {
				if ($this->aTimePeriod->isModified() || ($this->aTimePeriod->getCulture() && $this->aTimePeriod->getCurrentTimePeriodI18n()->isModified()) || $this->aTimePeriod->isNew()) {
					$affectedRows += $this->aTimePeriod->save($con);
				}
				$this->setTimePeriod($this->aTimePeriod);
			}

			if ($this->aCompanyBrand !== null) {
				if ($this->aCompanyBrand->isModified() || $this->aCompanyBrand->isNew()) {
					$affectedRows += $this->aCompanyBrand->save($con);
				}
				$this->setCompanyBrand($this->aCompanyBrand);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProductPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProductPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProductPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collProductI18ns !== null) {
				foreach ($this->collProductI18ns as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProductAttrs !== null) {
				foreach ($this->collProductAttrs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProductCategory !== null) {
				if (!$this->aProductCategory->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProductCategory->getValidationFailures());
				}
			}

			if ($this->aCompany !== null) {
				if (!$this->aCompany->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCompany->getValidationFailures());
				}
			}

			if ($this->aProductGroup !== null) {
				if (!$this->aProductGroup->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProductGroup->getValidationFailures());
				}
			}

			if ($this->aProductQuantityUnitRelatedByQuantityUnit !== null) {
				if (!$this->aProductQuantityUnitRelatedByQuantityUnit->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProductQuantityUnitRelatedByQuantityUnit->getValidationFailures());
				}
			}

			if ($this->aProductQuantityUnitRelatedByPriceUnit !== null) {
				if (!$this->aProductQuantityUnitRelatedByPriceUnit->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProductQuantityUnitRelatedByPriceUnit->getValidationFailures());
				}
			}

			if ($this->aProductQuantityUnitRelatedByCapacityUnit !== null) {
				if (!$this->aProductQuantityUnitRelatedByCapacityUnit->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProductQuantityUnitRelatedByCapacityUnit->getValidationFailures());
				}
			}

			if ($this->aTimePeriod !== null) {
				if (!$this->aTimePeriod->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTimePeriod->getValidationFailures());
				}
			}

			if ($this->aCompanyBrand !== null) {
				if (!$this->aCompanyBrand->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCompanyBrand->getValidationFailures());
				}
			}


			if (($retval = ProductPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collProductI18ns !== null) {
					foreach ($this->collProductI18ns as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProductAttrs !== null) {
					foreach ($this->collProductAttrs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProductPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCategoryId();
				break;
			case 2:
				return $this->getCompanyId();
				break;
			case 3:
				return $this->getModelNo();
				break;
			case 4:
				return $this->getActive();
				break;
			case 5:
				return $this->getCreatedAt();
				break;
			case 6:
				return $this->getUpdatedAt();
				break;
			case 7:
				return $this->getPaymentTerms();
				break;
			case 8:
				return $this->getGroupId();
				break;
			case 9:
				return $this->getOrigin();
				break;
			case 10:
				return $this->getKeyword();
				break;
			case 11:
				return $this->getBrandName();
				break;
			case 12:
				return $this->getMinOrderQuantity();
				break;
			case 13:
				return $this->getQuantityUnit();
				break;
			case 14:
				return $this->getPriceStart();
				break;
			case 15:
				return $this->getPriceEnd();
				break;
			case 16:
				return $this->getPriceCurrency();
				break;
			case 17:
				return $this->getPriceUnit();
				break;
			case 18:
				return $this->getCapacity();
				break;
			case 19:
				return $this->getCapacityUnit();
				break;
			case 20:
				return $this->getCapacityPeriodId();
				break;
			case 21:
				return $this->getApprovalStatus();
				break;
			case 22:
				return $this->getBrandId();
				break;
			case 23:
				return $this->getDefaultLang();
				break;
			case 24:
				return $this->getIsTopProduct();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProductPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCategoryId(),
			$keys[2] => $this->getCompanyId(),
			$keys[3] => $this->getModelNo(),
			$keys[4] => $this->getActive(),
			$keys[5] => $this->getCreatedAt(),
			$keys[6] => $this->getUpdatedAt(),
			$keys[7] => $this->getPaymentTerms(),
			$keys[8] => $this->getGroupId(),
			$keys[9] => $this->getOrigin(),
			$keys[10] => $this->getKeyword(),
			$keys[11] => $this->getBrandName(),
			$keys[12] => $this->getMinOrderQuantity(),
			$keys[13] => $this->getQuantityUnit(),
			$keys[14] => $this->getPriceStart(),
			$keys[15] => $this->getPriceEnd(),
			$keys[16] => $this->getPriceCurrency(),
			$keys[17] => $this->getPriceUnit(),
			$keys[18] => $this->getCapacity(),
			$keys[19] => $this->getCapacityUnit(),
			$keys[20] => $this->getCapacityPeriodId(),
			$keys[21] => $this->getApprovalStatus(),
			$keys[22] => $this->getBrandId(),
			$keys[23] => $this->getDefaultLang(),
			$keys[24] => $this->getIsTopProduct(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProductPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCategoryId($value);
				break;
			case 2:
				$this->setCompanyId($value);
				break;
			case 3:
				$this->setModelNo($value);
				break;
			case 4:
				$this->setActive($value);
				break;
			case 5:
				$this->setCreatedAt($value);
				break;
			case 6:
				$this->setUpdatedAt($value);
				break;
			case 7:
				$this->setPaymentTerms($value);
				break;
			case 8:
				$this->setGroupId($value);
				break;
			case 9:
				$this->setOrigin($value);
				break;
			case 10:
				$this->setKeyword($value);
				break;
			case 11:
				$this->setBrandName($value);
				break;
			case 12:
				$this->setMinOrderQuantity($value);
				break;
			case 13:
				$this->setQuantityUnit($value);
				break;
			case 14:
				$this->setPriceStart($value);
				break;
			case 15:
				$this->setPriceEnd($value);
				break;
			case 16:
				$this->setPriceCurrency($value);
				break;
			case 17:
				$this->setPriceUnit($value);
				break;
			case 18:
				$this->setCapacity($value);
				break;
			case 19:
				$this->setCapacityUnit($value);
				break;
			case 20:
				$this->setCapacityPeriodId($value);
				break;
			case 21:
				$this->setApprovalStatus($value);
				break;
			case 22:
				$this->setBrandId($value);
				break;
			case 23:
				$this->setDefaultLang($value);
				break;
			case 24:
				$this->setIsTopProduct($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProductPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCategoryId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCompanyId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setModelNo($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setActive($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCreatedAt($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setUpdatedAt($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPaymentTerms($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setGroupId($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setOrigin($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setKeyword($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setBrandName($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setMinOrderQuantity($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setQuantityUnit($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPriceStart($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPriceEnd($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setPriceCurrency($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPriceUnit($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCapacity($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCapacityUnit($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCapacityPeriodId($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setApprovalStatus($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setBrandId($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setDefaultLang($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setIsTopProduct($arr[$keys[24]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProductPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProductPeer::ID)) $criteria->add(ProductPeer::ID, $this->id);
		if ($this->isColumnModified(ProductPeer::CATEGORY_ID)) $criteria->add(ProductPeer::CATEGORY_ID, $this->category_id);
		if ($this->isColumnModified(ProductPeer::COMPANY_ID)) $criteria->add(ProductPeer::COMPANY_ID, $this->company_id);
		if ($this->isColumnModified(ProductPeer::MODEL_NO)) $criteria->add(ProductPeer::MODEL_NO, $this->model_no);
		if ($this->isColumnModified(ProductPeer::ACTIVE)) $criteria->add(ProductPeer::ACTIVE, $this->active);
		if ($this->isColumnModified(ProductPeer::CREATED_AT)) $criteria->add(ProductPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ProductPeer::UPDATED_AT)) $criteria->add(ProductPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(ProductPeer::PAYMENT_TERMS)) $criteria->add(ProductPeer::PAYMENT_TERMS, $this->payment_terms);
		if ($this->isColumnModified(ProductPeer::GROUP_ID)) $criteria->add(ProductPeer::GROUP_ID, $this->group_id);
		if ($this->isColumnModified(ProductPeer::ORIGIN)) $criteria->add(ProductPeer::ORIGIN, $this->origin);
		if ($this->isColumnModified(ProductPeer::KEYWORD)) $criteria->add(ProductPeer::KEYWORD, $this->keyword);
		if ($this->isColumnModified(ProductPeer::BRAND_NAME)) $criteria->add(ProductPeer::BRAND_NAME, $this->brand_name);
		if ($this->isColumnModified(ProductPeer::MIN_ORDER_QUANTITY)) $criteria->add(ProductPeer::MIN_ORDER_QUANTITY, $this->min_order_quantity);
		if ($this->isColumnModified(ProductPeer::QUANTITY_UNIT)) $criteria->add(ProductPeer::QUANTITY_UNIT, $this->quantity_unit);
		if ($this->isColumnModified(ProductPeer::PRICE_START)) $criteria->add(ProductPeer::PRICE_START, $this->price_start);
		if ($this->isColumnModified(ProductPeer::PRICE_END)) $criteria->add(ProductPeer::PRICE_END, $this->price_end);
		if ($this->isColumnModified(ProductPeer::PRICE_CURRENCY)) $criteria->add(ProductPeer::PRICE_CURRENCY, $this->price_currency);
		if ($this->isColumnModified(ProductPeer::PRICE_UNIT)) $criteria->add(ProductPeer::PRICE_UNIT, $this->price_unit);
		if ($this->isColumnModified(ProductPeer::CAPACITY)) $criteria->add(ProductPeer::CAPACITY, $this->capacity);
		if ($this->isColumnModified(ProductPeer::CAPACITY_UNIT)) $criteria->add(ProductPeer::CAPACITY_UNIT, $this->capacity_unit);
		if ($this->isColumnModified(ProductPeer::CAPACITY_PERIOD_ID)) $criteria->add(ProductPeer::CAPACITY_PERIOD_ID, $this->capacity_period_id);
		if ($this->isColumnModified(ProductPeer::APPROVAL_STATUS)) $criteria->add(ProductPeer::APPROVAL_STATUS, $this->approval_status);
		if ($this->isColumnModified(ProductPeer::BRAND_ID)) $criteria->add(ProductPeer::BRAND_ID, $this->brand_id);
		if ($this->isColumnModified(ProductPeer::DEFAULT_LANG)) $criteria->add(ProductPeer::DEFAULT_LANG, $this->default_lang);
		if ($this->isColumnModified(ProductPeer::IS_TOP_PRODUCT)) $criteria->add(ProductPeer::IS_TOP_PRODUCT, $this->is_top_product);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProductPeer::DATABASE_NAME);

		$criteria->add(ProductPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Product (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCategoryId($this->category_id);

		$copyObj->setCompanyId($this->company_id);

		$copyObj->setModelNo($this->model_no);

		$copyObj->setActive($this->active);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setPaymentTerms($this->payment_terms);

		$copyObj->setGroupId($this->group_id);

		$copyObj->setOrigin($this->origin);

		$copyObj->setKeyword($this->keyword);

		$copyObj->setBrandName($this->brand_name);

		$copyObj->setMinOrderQuantity($this->min_order_quantity);

		$copyObj->setQuantityUnit($this->quantity_unit);

		$copyObj->setPriceStart($this->price_start);

		$copyObj->setPriceEnd($this->price_end);

		$copyObj->setPriceCurrency($this->price_currency);

		$copyObj->setPriceUnit($this->price_unit);

		$copyObj->setCapacity($this->capacity);

		$copyObj->setCapacityUnit($this->capacity_unit);

		$copyObj->setCapacityPeriodId($this->capacity_period_id);

		$copyObj->setApprovalStatus($this->approval_status);

		$copyObj->setBrandId($this->brand_id);

		$copyObj->setDefaultLang($this->default_lang);

		$copyObj->setIsTopProduct($this->is_top_product);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getProductI18ns() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProductI18n($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProductAttrs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProductAttr($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Product Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProductPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProductPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a ProductCategory object.
	 *
	 * @param      ProductCategory $v
	 * @return     Product The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProductCategory(ProductCategory $v = null)
	{
		if ($v === null) {
			$this->setCategoryId(NULL);
		} else {
			$this->setCategoryId($v->getId());
		}

		$this->aProductCategory = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ProductCategory object, it will not be re-added.
		if ($v !== null) {
			$v->addProduct($this);
		}

		return $this;
	}


	/**
	 * Get the associated ProductCategory object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ProductCategory The associated ProductCategory object.
	 * @throws     PropelException
	 */
	public function getProductCategory(PropelPDO $con = null)
	{
		if ($this->aProductCategory === null && ($this->category_id !== null)) {
			$c = new Criteria(ProductCategoryPeer::DATABASE_NAME);
			$c->add(ProductCategoryPeer::ID, $this->category_id);
			$this->aProductCategory = ProductCategoryPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProductCategory->addProducts($this);
			 */
		}
		return $this->aProductCategory;
	}

	/**
	 * Declares an association between this object and a Company object.
	 *
	 * @param      Company $v
	 * @return     Product The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCompany(Company $v = null)
	{
		if ($v === null) {
			$this->setCompanyId(NULL);
		} else {
			$this->setCompanyId($v->getId());
		}

		$this->aCompany = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Company object, it will not be re-added.
		if ($v !== null) {
			$v->addProduct($this);
		}

		return $this;
	}


	/**
	 * Get the associated Company object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Company The associated Company object.
	 * @throws     PropelException
	 */
	public function getCompany(PropelPDO $con = null)
	{
		if ($this->aCompany === null && ($this->company_id !== null)) {
			$c = new Criteria(CompanyPeer::DATABASE_NAME);
			$c->add(CompanyPeer::ID, $this->company_id);
			$this->aCompany = CompanyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCompany->addProducts($this);
			 */
		}
		return $this->aCompany;
	}

	/**
	 * Declares an association between this object and a ProductGroup object.
	 *
	 * @param      ProductGroup $v
	 * @return     Product The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProductGroup(ProductGroup $v = null)
	{
		if ($v === null) {
			$this->setGroupId(NULL);
		} else {
			$this->setGroupId($v->getId());
		}

		$this->aProductGroup = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ProductGroup object, it will not be re-added.
		if ($v !== null) {
			$v->addProduct($this);
		}

		return $this;
	}


	/**
	 * Get the associated ProductGroup object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ProductGroup The associated ProductGroup object.
	 * @throws     PropelException
	 */
	public function getProductGroup(PropelPDO $con = null)
	{
		if ($this->aProductGroup === null && ($this->group_id !== null)) {
			$c = new Criteria(ProductGroupPeer::DATABASE_NAME);
			$c->add(ProductGroupPeer::ID, $this->group_id);
			$this->aProductGroup = ProductGroupPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProductGroup->addProducts($this);
			 */
		}
		return $this->aProductGroup;
	}

	/**
	 * Declares an association between this object and a ProductQuantityUnit object.
	 *
	 * @param      ProductQuantityUnit $v
	 * @return     Product The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProductQuantityUnitRelatedByQuantityUnit(ProductQuantityUnit $v = null)
	{
		if ($v === null) {
			$this->setQuantityUnit(NULL);
		} else {
			$this->setQuantityUnit($v->getId());
		}

		$this->aProductQuantityUnitRelatedByQuantityUnit = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ProductQuantityUnit object, it will not be re-added.
		if ($v !== null) {
			$v->addProductRelatedByQuantityUnit($this);
		}

		return $this;
	}


	/**
	 * Get the associated ProductQuantityUnit object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ProductQuantityUnit The associated ProductQuantityUnit object.
	 * @throws     PropelException
	 */
	public function getProductQuantityUnitRelatedByQuantityUnit(PropelPDO $con = null)
	{
		if ($this->aProductQuantityUnitRelatedByQuantityUnit === null && ($this->quantity_unit !== null)) {
			$c = new Criteria(ProductQuantityUnitPeer::DATABASE_NAME);
			$c->add(ProductQuantityUnitPeer::ID, $this->quantity_unit);
			$this->aProductQuantityUnitRelatedByQuantityUnit = ProductQuantityUnitPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProductQuantityUnitRelatedByQuantityUnit->addProductsRelatedByQuantityUnit($this);
			 */
		}
		return $this->aProductQuantityUnitRelatedByQuantityUnit;
	}

	/**
	 * Declares an association between this object and a ProductQuantityUnit object.
	 *
	 * @param      ProductQuantityUnit $v
	 * @return     Product The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProductQuantityUnitRelatedByPriceUnit(ProductQuantityUnit $v = null)
	{
		if ($v === null) {
			$this->setPriceUnit(NULL);
		} else {
			$this->setPriceUnit($v->getId());
		}

		$this->aProductQuantityUnitRelatedByPriceUnit = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ProductQuantityUnit object, it will not be re-added.
		if ($v !== null) {
			$v->addProductRelatedByPriceUnit($this);
		}

		return $this;
	}


	/**
	 * Get the associated ProductQuantityUnit object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ProductQuantityUnit The associated ProductQuantityUnit object.
	 * @throws     PropelException
	 */
	public function getProductQuantityUnitRelatedByPriceUnit(PropelPDO $con = null)
	{
		if ($this->aProductQuantityUnitRelatedByPriceUnit === null && ($this->price_unit !== null)) {
			$c = new Criteria(ProductQuantityUnitPeer::DATABASE_NAME);
			$c->add(ProductQuantityUnitPeer::ID, $this->price_unit);
			$this->aProductQuantityUnitRelatedByPriceUnit = ProductQuantityUnitPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProductQuantityUnitRelatedByPriceUnit->addProductsRelatedByPriceUnit($this);
			 */
		}
		return $this->aProductQuantityUnitRelatedByPriceUnit;
	}

	/**
	 * Declares an association between this object and a ProductQuantityUnit object.
	 *
	 * @param      ProductQuantityUnit $v
	 * @return     Product The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProductQuantityUnitRelatedByCapacityUnit(ProductQuantityUnit $v = null)
	{
		if ($v === null) {
			$this->setCapacityUnit(NULL);
		} else {
			$this->setCapacityUnit($v->getId());
		}

		$this->aProductQuantityUnitRelatedByCapacityUnit = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ProductQuantityUnit object, it will not be re-added.
		if ($v !== null) {
			$v->addProductRelatedByCapacityUnit($this);
		}

		return $this;
	}


	/**
	 * Get the associated ProductQuantityUnit object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ProductQuantityUnit The associated ProductQuantityUnit object.
	 * @throws     PropelException
	 */
	public function getProductQuantityUnitRelatedByCapacityUnit(PropelPDO $con = null)
	{
		if ($this->aProductQuantityUnitRelatedByCapacityUnit === null && ($this->capacity_unit !== null)) {
			$c = new Criteria(ProductQuantityUnitPeer::DATABASE_NAME);
			$c->add(ProductQuantityUnitPeer::ID, $this->capacity_unit);
			$this->aProductQuantityUnitRelatedByCapacityUnit = ProductQuantityUnitPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProductQuantityUnitRelatedByCapacityUnit->addProductsRelatedByCapacityUnit($this);
			 */
		}
		return $this->aProductQuantityUnitRelatedByCapacityUnit;
	}

	/**
	 * Declares an association between this object and a TimePeriod object.
	 *
	 * @param      TimePeriod $v
	 * @return     Product The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTimePeriod(TimePeriod $v = null)
	{
		if ($v === null) {
			$this->setCapacityPeriodId(NULL);
		} else {
			$this->setCapacityPeriodId($v->getId());
		}

		$this->aTimePeriod = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TimePeriod object, it will not be re-added.
		if ($v !== null) {
			$v->addProduct($this);
		}

		return $this;
	}


	/**
	 * Get the associated TimePeriod object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TimePeriod The associated TimePeriod object.
	 * @throws     PropelException
	 */
	public function getTimePeriod(PropelPDO $con = null)
	{
		if ($this->aTimePeriod === null && ($this->capacity_period_id !== null)) {
			$c = new Criteria(TimePeriodPeer::DATABASE_NAME);
			$c->add(TimePeriodPeer::ID, $this->capacity_period_id);
			$this->aTimePeriod = TimePeriodPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTimePeriod->addProducts($this);
			 */
		}
		return $this->aTimePeriod;
	}

	/**
	 * Declares an association between this object and a CompanyBrand object.
	 *
	 * @param      CompanyBrand $v
	 * @return     Product The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCompanyBrand(CompanyBrand $v = null)
	{
		if ($v === null) {
			$this->setBrandId(NULL);
		} else {
			$this->setBrandId($v->getId());
		}

		$this->aCompanyBrand = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CompanyBrand object, it will not be re-added.
		if ($v !== null) {
			$v->addProduct($this);
		}

		return $this;
	}


	/**
	 * Get the associated CompanyBrand object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CompanyBrand The associated CompanyBrand object.
	 * @throws     PropelException
	 */
	public function getCompanyBrand(PropelPDO $con = null)
	{
		if ($this->aCompanyBrand === null && ($this->brand_id !== null)) {
			$c = new Criteria(CompanyBrandPeer::DATABASE_NAME);
			$c->add(CompanyBrandPeer::ID, $this->brand_id);
			$this->aCompanyBrand = CompanyBrandPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCompanyBrand->addProducts($this);
			 */
		}
		return $this->aCompanyBrand;
	}

	/**
	 * Clears out the collProductI18ns collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProductI18ns()
	 */
	public function clearProductI18ns()
	{
		$this->collProductI18ns = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProductI18ns collection (array).
	 *
	 * By default this just sets the collProductI18ns collection to an empty array (like clearcollProductI18ns());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProductI18ns()
	{
		$this->collProductI18ns = array();
	}

	/**
	 * Gets an array of ProductI18n objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Product has previously been saved, it will retrieve
	 * related ProductI18ns from storage. If this Product is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProductI18n[]
	 * @throws     PropelException
	 */
	public function getProductI18ns($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProductPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductI18ns === null) {
			if ($this->isNew()) {
			   $this->collProductI18ns = array();
			} else {

				$criteria->add(ProductI18nPeer::ID, $this->id);

				ProductI18nPeer::addSelectColumns($criteria);
				$this->collProductI18ns = ProductI18nPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProductI18nPeer::ID, $this->id);

				ProductI18nPeer::addSelectColumns($criteria);
				if (!isset($this->lastProductI18nCriteria) || !$this->lastProductI18nCriteria->equals($criteria)) {
					$this->collProductI18ns = ProductI18nPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProductI18nCriteria = $criteria;
		return $this->collProductI18ns;
	}

	/**
	 * Returns the number of related ProductI18n objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProductI18n objects.
	 * @throws     PropelException
	 */
	public function countProductI18ns(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProductPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProductI18ns === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProductI18nPeer::ID, $this->id);

				$count = ProductI18nPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProductI18nPeer::ID, $this->id);

				if (!isset($this->lastProductI18nCriteria) || !$this->lastProductI18nCriteria->equals($criteria)) {
					$count = ProductI18nPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProductI18ns);
				}
			} else {
				$count = count($this->collProductI18ns);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProductI18n object to this object
	 * through the ProductI18n foreign key attribute.
	 *
	 * @param      ProductI18n $l ProductI18n
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProductI18n(ProductI18n $l)
	{
		if ($this->collProductI18ns === null) {
			$this->initProductI18ns();
		}
		if (!in_array($l, $this->collProductI18ns, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProductI18ns, $l);
			$l->setProduct($this);
		}
	}

	/**
	 * Clears out the collProductAttrs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProductAttrs()
	 */
	public function clearProductAttrs()
	{
		$this->collProductAttrs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProductAttrs collection (array).
	 *
	 * By default this just sets the collProductAttrs collection to an empty array (like clearcollProductAttrs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProductAttrs()
	{
		$this->collProductAttrs = array();
	}

	/**
	 * Gets an array of ProductAttr objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Product has previously been saved, it will retrieve
	 * related ProductAttrs from storage. If this Product is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProductAttr[]
	 * @throws     PropelException
	 */
	public function getProductAttrs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProductPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductAttrs === null) {
			if ($this->isNew()) {
			   $this->collProductAttrs = array();
			} else {

				$criteria->add(ProductAttrPeer::PRODUCT_ID, $this->id);

				ProductAttrPeer::addSelectColumns($criteria);
				$this->collProductAttrs = ProductAttrPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProductAttrPeer::PRODUCT_ID, $this->id);

				ProductAttrPeer::addSelectColumns($criteria);
				if (!isset($this->lastProductAttrCriteria) || !$this->lastProductAttrCriteria->equals($criteria)) {
					$this->collProductAttrs = ProductAttrPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProductAttrCriteria = $criteria;
		return $this->collProductAttrs;
	}

	/**
	 * Returns the number of related ProductAttr objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProductAttr objects.
	 * @throws     PropelException
	 */
	public function countProductAttrs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProductPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProductAttrs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProductAttrPeer::PRODUCT_ID, $this->id);

				$count = ProductAttrPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProductAttrPeer::PRODUCT_ID, $this->id);

				if (!isset($this->lastProductAttrCriteria) || !$this->lastProductAttrCriteria->equals($criteria)) {
					$count = ProductAttrPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProductAttrs);
				}
			} else {
				$count = count($this->collProductAttrs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProductAttr object to this object
	 * through the ProductAttr foreign key attribute.
	 *
	 * @param      ProductAttr $l ProductAttr
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProductAttr(ProductAttr $l)
	{
		if ($this->collProductAttrs === null) {
			$this->initProductAttrs();
		}
		if (!in_array($l, $this->collProductAttrs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProductAttrs, $l);
			$l->setProduct($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Product is new, it will return
	 * an empty collection; or if this Product has previously
	 * been saved, it will retrieve related ProductAttrs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Product.
	 */
	public function getProductAttrsJoinProductAttrOption($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProductPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductAttrs === null) {
			if ($this->isNew()) {
				$this->collProductAttrs = array();
			} else {

				$criteria->add(ProductAttrPeer::PRODUCT_ID, $this->id);

				$this->collProductAttrs = ProductAttrPeer::doSelectJoinProductAttrOption($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductAttrPeer::PRODUCT_ID, $this->id);

			if (!isset($this->lastProductAttrCriteria) || !$this->lastProductAttrCriteria->equals($criteria)) {
				$this->collProductAttrs = ProductAttrPeer::doSelectJoinProductAttrOption($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductAttrCriteria = $criteria;

		return $this->collProductAttrs;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collProductI18ns) {
				foreach ((array) $this->collProductI18ns as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProductAttrs) {
				foreach ((array) $this->collProductAttrs as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collProductI18ns = null;
		$this->collProductAttrs = null;
			$this->aProductCategory = null;
			$this->aCompany = null;
			$this->aProductGroup = null;
			$this->aProductQuantityUnitRelatedByQuantityUnit = null;
			$this->aProductQuantityUnitRelatedByPriceUnit = null;
			$this->aProductQuantityUnitRelatedByCapacityUnit = null;
			$this->aTimePeriod = null;
			$this->aCompanyBrand = null;
	}


  /**
   * Returns the culture.
   *
   * @return string The culture
   */
  public function getCulture()
  {
    return $this->culture;
  }

  /**
   * Sets the culture.
   *
   * @param string $culture The culture to set
   *
   * @return void
   */
  public function setCulture($culture)
  {
    $this->culture = $culture;
  }

  public function getName($culture = null)
  {
    return $this->getCurrentProductI18n($culture)->getName();
  }

  public function setName($value, $culture = null)
  {
    $this->getCurrentProductI18n($culture)->setName($value);
  }

  public function getIntroduction($culture = null)
  {
    return $this->getCurrentProductI18n($culture)->getIntroduction();
  }

  public function setIntroduction($value, $culture = null)
  {
    $this->getCurrentProductI18n($culture)->setIntroduction($value);
  }

  public function getPackaging($culture = null)
  {
    return $this->getCurrentProductI18n($culture)->getPackaging();
  }

  public function setPackaging($value, $culture = null)
  {
    $this->getCurrentProductI18n($culture)->setPackaging($value);
  }

  public function getHtmlContent($culture = null)
  {
    return $this->getCurrentProductI18n($culture)->getHtmlContent();
  }

  public function setHtmlContent($value, $culture = null)
  {
    $this->getCurrentProductI18n($culture)->setHtmlContent($value);
  }

  protected $current_i18n = array();

  public function getCurrentProductI18n($culture = null)
  {
    if (is_null($culture))
    {
      $culture = is_null($this->culture) ? sfPropel::getDefaultCulture() : $this->culture;
    }

    if (!isset($this->current_i18n[$culture]))
    {
      $obj = ProductI18nPeer::retrieveByPK($this->getId(), $culture);
      if ($obj)
      {
        $this->setProductI18nForCulture($obj, $culture);
      }
      else
      {
        $this->setProductI18nForCulture(new ProductI18n(), $culture);
        $this->current_i18n[$culture]->setCulture($culture);
      }
    }

    return $this->current_i18n[$culture];
  }

  public function setProductI18nForCulture($object, $culture)
  {
    $this->current_i18n[$culture] = $object;
    $this->addProductI18n($object);
  }


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseProduct:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseProduct::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseProduct
