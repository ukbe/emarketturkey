<?php

/**
 * Base class that represents a row from the 'EMT_PRIVACY_NODE_TYPE' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 03/07/12 22:24:24
 *
 * @package    lib.model.om
 */
abstract class BasePrivacyNodeType extends BaseObject  implements Persistent {


  const PEER = 'PrivacyNodeTypePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PrivacyNodeTypePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the priority field.
	 * @var        int
	 */
	protected $priority;

	/**
	 * The value for the requires_subject field.
	 * @var        boolean
	 */
	protected $requires_subject;

	/**
	 * The value for the active field.
	 * @var        boolean
	 */
	protected $active;

	/**
	 * @var        array Role[] Collection to store aggregation of Role objects.
	 */
	protected $collRoles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRoles.
	 */
	private $lastRoleCriteria = null;

	/**
	 * @var        array RoleMatrix[] Collection to store aggregation of RoleMatrix objects.
	 */
	protected $collRoleMatrixsRelatedByObjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRoleMatrixsRelatedByObjectTypeId.
	 */
	private $lastRoleMatrixRelatedByObjectTypeIdCriteria = null;

	/**
	 * @var        array RoleMatrix[] Collection to store aggregation of RoleMatrix objects.
	 */
	protected $collRoleMatrixsRelatedBySubjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRoleMatrixsRelatedBySubjectTypeId.
	 */
	private $lastRoleMatrixRelatedBySubjectTypeIdCriteria = null;

	/**
	 * @var        array PrivacyNodeTypeI18n[] Collection to store aggregation of PrivacyNodeTypeI18n objects.
	 */
	protected $collPrivacyNodeTypeI18ns;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPrivacyNodeTypeI18ns.
	 */
	private $lastPrivacyNodeTypeI18nCriteria = null;

	/**
	 * @var        array PrivacyPreference[] Collection to store aggregation of PrivacyPreference objects.
	 */
	protected $collPrivacyPreferencesRelatedBySubjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPrivacyPreferencesRelatedBySubjectTypeId.
	 */
	private $lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria = null;

	/**
	 * @var        array PrivacyPreference[] Collection to store aggregation of PrivacyPreference objects.
	 */
	protected $collPrivacyPreferencesRelatedByObjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPrivacyPreferencesRelatedByObjectTypeId.
	 */
	private $lastPrivacyPreferenceRelatedByObjectTypeIdCriteria = null;

	/**
	 * @var        array Message[] Collection to store aggregation of Message objects.
	 */
	protected $collMessagesRelatedBySenderTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMessagesRelatedBySenderTypeId.
	 */
	private $lastMessageRelatedBySenderTypeIdCriteria = null;

	/**
	 * @var        array Message[] Collection to store aggregation of Message objects.
	 */
	protected $collMessagesRelatedByRelatedObjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMessagesRelatedByRelatedObjectTypeId.
	 */
	private $lastMessageRelatedByRelatedObjectTypeIdCriteria = null;

	/**
	 * @var        array MessageRecipient[] Collection to store aggregation of MessageRecipient objects.
	 */
	protected $collMessageRecipients;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMessageRecipients.
	 */
	private $lastMessageRecipientCriteria = null;

	/**
	 * @var        array CompanyUser[] Collection to store aggregation of CompanyUser objects.
	 */
	protected $collCompanyUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanyUsers.
	 */
	private $lastCompanyUserCriteria = null;

	/**
	 * @var        array NotificationPref[] Collection to store aggregation of NotificationPref objects.
	 */
	protected $collNotificationPrefs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotificationPrefs.
	 */
	private $lastNotificationPrefCriteria = null;

	/**
	 * @var        array MediaItemFolder[] Collection to store aggregation of MediaItemFolder objects.
	 */
	protected $collMediaItemFolders;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMediaItemFolders.
	 */
	private $lastMediaItemFolderCriteria = null;

	/**
	 * @var        array MediaItem[] Collection to store aggregation of MediaItem objects.
	 */
	protected $collMediaItems;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMediaItems.
	 */
	private $lastMediaItemCriteria = null;

	/**
	 * @var        array Rating[] Collection to store aggregation of Rating objects.
	 */
	protected $collRatings;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRatings.
	 */
	private $lastRatingCriteria = null;

	/**
	 * @var        array ErrorLog[] Collection to store aggregation of ErrorLog objects.
	 */
	protected $collErrorLogs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collErrorLogs.
	 */
	private $lastErrorLogCriteria = null;

	/**
	 * @var        array ActionLog[] Collection to store aggregation of ActionLog objects.
	 */
	protected $collActionLogs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActionLogs.
	 */
	private $lastActionLogCriteria = null;

	/**
	 * @var        array Service[] Collection to store aggregation of Service objects.
	 */
	protected $collServices;

	/**
	 * @var        Criteria The criteria used to select the current contents of collServices.
	 */
	private $lastServiceCriteria = null;

	/**
	 * @var        array MarketingPackage[] Collection to store aggregation of MarketingPackage objects.
	 */
	protected $collMarketingPackages;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMarketingPackages.
	 */
	private $lastMarketingPackageCriteria = null;

	/**
	 * @var        array Purchase[] Collection to store aggregation of Purchase objects.
	 */
	protected $collPurchases;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPurchases.
	 */
	private $lastPurchaseCriteria = null;

	/**
	 * @var        array Payment[] Collection to store aggregation of Payment objects.
	 */
	protected $collPayments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPayments.
	 */
	private $lastPaymentCriteria = null;

	/**
	 * @var        array PaymentTransaction[] Collection to store aggregation of PaymentTransaction objects.
	 */
	protected $collPaymentTransactions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPaymentTransactions.
	 */
	private $lastPaymentTransactionCriteria = null;

	/**
	 * @var        array CreditAccount[] Collection to store aggregation of CreditAccount objects.
	 */
	protected $collCreditAccounts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCreditAccounts.
	 */
	private $lastCreditAccountCriteria = null;

	/**
	 * @var        array Job[] Collection to store aggregation of Job objects.
	 */
	protected $collJobs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJobs.
	 */
	private $lastJobCriteria = null;

	/**
	 * @var        array HRProfile[] Collection to store aggregation of HRProfile objects.
	 */
	protected $collHRProfiles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collHRProfiles.
	 */
	private $lastHRProfileCriteria = null;

	/**
	 * @var        array UserBookmark[] Collection to store aggregation of UserBookmark objects.
	 */
	protected $collUserBookmarks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserBookmarks.
	 */
	private $lastUserBookmarkCriteria = null;

	/**
	 * @var        array InviteFriend[] Collection to store aggregation of InviteFriend objects.
	 */
	protected $collInviteFriendsRelatedByInviterTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collInviteFriendsRelatedByInviterTypeId.
	 */
	private $lastInviteFriendRelatedByInviterTypeIdCriteria = null;

	/**
	 * @var        array InviteFriend[] Collection to store aggregation of InviteFriend objects.
	 */
	protected $collInviteFriendsRelatedByInvitedToTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collInviteFriendsRelatedByInvitedToTypeId.
	 */
	private $lastInviteFriendRelatedByInvitedToTypeIdCriteria = null;

	/**
	 * @var        array GroupMembership[] Collection to store aggregation of GroupMembership objects.
	 */
	protected $collGroupMembershipsRelatedByInviterTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGroupMembershipsRelatedByInviterTypeId.
	 */
	private $lastGroupMembershipRelatedByInviterTypeIdCriteria = null;

	/**
	 * @var        array GroupMembership[] Collection to store aggregation of GroupMembership objects.
	 */
	protected $collGroupMembershipsRelatedByObjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGroupMembershipsRelatedByObjectTypeId.
	 */
	private $lastGroupMembershipRelatedByObjectTypeIdCriteria = null;

	/**
	 * @var        array StatusUpdate[] Collection to store aggregation of StatusUpdate objects.
	 */
	protected $collStatusUpdates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStatusUpdates.
	 */
	private $lastStatusUpdateCriteria = null;

	/**
	 * @var        array LocationUpdate[] Collection to store aggregation of LocationUpdate objects.
	 */
	protected $collLocationUpdates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLocationUpdates.
	 */
	private $lastLocationUpdateCriteria = null;

	/**
	 * @var        array Comment[] Collection to store aggregation of Comment objects.
	 */
	protected $collCommentsRelatedByItemTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCommentsRelatedByItemTypeId.
	 */
	private $lastCommentRelatedByItemTypeIdCriteria = null;

	/**
	 * @var        array Comment[] Collection to store aggregation of Comment objects.
	 */
	protected $collCommentsRelatedByCommenterTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCommentsRelatedByCommenterTypeId.
	 */
	private $lastCommentRelatedByCommenterTypeIdCriteria = null;

	/**
	 * @var        array ActionCase[] Collection to store aggregation of ActionCase objects.
	 */
	protected $collActionCasesRelatedByIssuerTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActionCasesRelatedByIssuerTypeId.
	 */
	private $lastActionCaseRelatedByIssuerTypeIdCriteria = null;

	/**
	 * @var        array ActionCase[] Collection to store aggregation of ActionCase objects.
	 */
	protected $collActionCasesRelatedByTargetTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActionCasesRelatedByTargetTypeId.
	 */
	private $lastActionCaseRelatedByTargetTypeIdCriteria = null;

	/**
	 * @var        array RelationUpdate[] Collection to store aggregation of RelationUpdate objects.
	 */
	protected $collRelationUpdatesRelatedBySubjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelationUpdatesRelatedBySubjectTypeId.
	 */
	private $lastRelationUpdateRelatedBySubjectTypeIdCriteria = null;

	/**
	 * @var        array RelationUpdate[] Collection to store aggregation of RelationUpdate objects.
	 */
	protected $collRelationUpdatesRelatedByObjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelationUpdatesRelatedByObjectTypeId.
	 */
	private $lastRelationUpdateRelatedByObjectTypeIdCriteria = null;

	/**
	 * @var        array WallPost[] Collection to store aggregation of WallPost objects.
	 */
	protected $collWallPostsRelatedByOwnerTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collWallPostsRelatedByOwnerTypeId.
	 */
	private $lastWallPostRelatedByOwnerTypeIdCriteria = null;

	/**
	 * @var        array WallPost[] Collection to store aggregation of WallPost objects.
	 */
	protected $collWallPostsRelatedByPosterTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collWallPostsRelatedByPosterTypeId.
	 */
	private $lastWallPostRelatedByPosterTypeIdCriteria = null;

	/**
	 * @var        array WallPost[] Collection to store aggregation of WallPost objects.
	 */
	protected $collWallPostsRelatedByItemTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collWallPostsRelatedByItemTypeId.
	 */
	private $lastWallPostRelatedByItemTypeIdCriteria = null;

	/**
	 * @var        array LikeIt[] Collection to store aggregation of LikeIt objects.
	 */
	protected $collLikeItsRelatedByPosterTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLikeItsRelatedByPosterTypeId.
	 */
	private $lastLikeItRelatedByPosterTypeIdCriteria = null;

	/**
	 * @var        array LikeIt[] Collection to store aggregation of LikeIt objects.
	 */
	protected $collLikeItsRelatedByItemTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLikeItsRelatedByItemTypeId.
	 */
	private $lastLikeItRelatedByItemTypeIdCriteria = null;

	/**
	 * @var        array MarketingPackagePrice[] Collection to store aggregation of MarketingPackagePrice objects.
	 */
	protected $collMarketingPackagePricesRelatedByTargetTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMarketingPackagePricesRelatedByTargetTypeId.
	 */
	private $lastMarketingPackagePriceRelatedByTargetTypeIdCriteria = null;

	/**
	 * @var        array MarketingPackagePrice[] Collection to store aggregation of MarketingPackagePrice objects.
	 */
	protected $collMarketingPackagePricesRelatedByReferenceTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMarketingPackagePricesRelatedByReferenceTypeId.
	 */
	private $lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria = null;

	/**
	 * @var        array Place[] Collection to store aggregation of Place objects.
	 */
	protected $collPlaces;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPlaces.
	 */
	private $lastPlaceCriteria = null;

	/**
	 * @var        array Event[] Collection to store aggregation of Event objects.
	 */
	protected $collEventsRelatedByOwnerTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventsRelatedByOwnerTypeId.
	 */
	private $lastEventRelatedByOwnerTypeIdCriteria = null;

	/**
	 * @var        array Event[] Collection to store aggregation of Event objects.
	 */
	protected $collEventsRelatedByOrganiserTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventsRelatedByOrganiserTypeId.
	 */
	private $lastEventRelatedByOrganiserTypeIdCriteria = null;

	/**
	 * @var        array EventInvite[] Collection to store aggregation of EventInvite objects.
	 */
	protected $collEventInvitesRelatedBySubjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventInvitesRelatedBySubjectTypeId.
	 */
	private $lastEventInviteRelatedBySubjectTypeIdCriteria = null;

	/**
	 * @var        array EventInvite[] Collection to store aggregation of EventInvite objects.
	 */
	protected $collEventInvitesRelatedByInviterTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventInvitesRelatedByInviterTypeId.
	 */
	private $lastEventInviteRelatedByInviterTypeIdCriteria = null;

	/**
	 * @var        array TransferOwnershipRequest[] Collection to store aggregation of TransferOwnershipRequest objects.
	 */
	protected $collTransferOwnershipRequests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransferOwnershipRequests.
	 */
	private $lastTransferOwnershipRequestCriteria = null;

	/**
	 * @var        array Announcement[] Collection to store aggregation of Announcement objects.
	 */
	protected $collAnnouncementsRelatedByOwnerTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAnnouncementsRelatedByOwnerTypeId.
	 */
	private $lastAnnouncementRelatedByOwnerTypeIdCriteria = null;

	/**
	 * @var        array Announcement[] Collection to store aggregation of Announcement objects.
	 */
	protected $collAnnouncementsRelatedByObjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAnnouncementsRelatedByObjectTypeId.
	 */
	private $lastAnnouncementRelatedByObjectTypeIdCriteria = null;

	/**
	 * @var        array AnnRecipient[] Collection to store aggregation of AnnRecipient objects.
	 */
	protected $collAnnRecipients;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAnnRecipients.
	 */
	private $lastAnnRecipientCriteria = null;

	/**
	 * @var        array EmailLayout[] Collection to store aggregation of EmailLayout objects.
	 */
	protected $collEmailLayouts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmailLayouts.
	 */
	private $lastEmailLayoutCriteria = null;

	/**
	 * @var        array TradeExpert[] Collection to store aggregation of TradeExpert objects.
	 */
	protected $collTradeExperts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTradeExperts.
	 */
	private $lastTradeExpertCriteria = null;

	/**
	 * @var        array TradeExpertClient[] Collection to store aggregation of TradeExpertClient objects.
	 */
	protected $collTradeExpertClients;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTradeExpertClients.
	 */
	private $lastTradeExpertClientCriteria = null;

	/**
	 * @var        array Task[] Collection to store aggregation of Task objects.
	 */
	protected $collTasksRelatedByStaffTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTasksRelatedByStaffTypeId.
	 */
	private $lastTaskRelatedByStaffTypeIdCriteria = null;

	/**
	 * @var        array Task[] Collection to store aggregation of Task objects.
	 */
	protected $collTasksRelatedByObjectTypeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTasksRelatedByObjectTypeId.
	 */
	private $lastTaskRelatedByObjectTypeIdCriteria = null;

	/**
	 * @var        array Translator[] Collection to store aggregation of Translator objects.
	 */
	protected $collTranslators;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTranslators.
	 */
	private $lastTranslatorCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

  /**
   * The value for the culture field.
   * @var string
   */
  protected $culture;

	/**
	 * Initializes internal state of BasePrivacyNodeType object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [priority] column value.
	 * 
	 * @return     int
	 */
	public function getPriority()
	{
		return $this->priority;
	}

	/**
	 * Get the [requires_subject] column value.
	 * 
	 * @return     boolean
	 */
	public function getRequiresSubject()
	{
		return $this->requires_subject;
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     boolean
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     PrivacyNodeType The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PrivacyNodeTypePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [priority] column.
	 * 
	 * @param      int $v new value
	 * @return     PrivacyNodeType The current object (for fluent API support)
	 */
	public function setPriority($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->priority !== $v) {
			$this->priority = $v;
			$this->modifiedColumns[] = PrivacyNodeTypePeer::PRIORITY;
		}

		return $this;
	} // setPriority()

	/**
	 * Set the value of [requires_subject] column.
	 * 
	 * @param      boolean $v new value
	 * @return     PrivacyNodeType The current object (for fluent API support)
	 */
	public function setRequiresSubject($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->requires_subject !== $v) {
			$this->requires_subject = $v;
			$this->modifiedColumns[] = PrivacyNodeTypePeer::REQUIRES_SUBJECT;
		}

		return $this;
	} // setRequiresSubject()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     PrivacyNodeType The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->active !== $v) {
			$this->active = $v;
			$this->modifiedColumns[] = PrivacyNodeTypePeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->priority = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->requires_subject = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->active = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 4; // 4 = PrivacyNodeTypePeer::NUM_COLUMNS - PrivacyNodeTypePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PrivacyNodeType object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PrivacyNodeTypePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PrivacyNodeTypePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collRoles = null;
			$this->lastRoleCriteria = null;

			$this->collRoleMatrixsRelatedByObjectTypeId = null;
			$this->lastRoleMatrixRelatedByObjectTypeIdCriteria = null;

			$this->collRoleMatrixsRelatedBySubjectTypeId = null;
			$this->lastRoleMatrixRelatedBySubjectTypeIdCriteria = null;

			$this->collPrivacyNodeTypeI18ns = null;
			$this->lastPrivacyNodeTypeI18nCriteria = null;

			$this->collPrivacyPreferencesRelatedBySubjectTypeId = null;
			$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria = null;

			$this->collPrivacyPreferencesRelatedByObjectTypeId = null;
			$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria = null;

			$this->collMessagesRelatedBySenderTypeId = null;
			$this->lastMessageRelatedBySenderTypeIdCriteria = null;

			$this->collMessagesRelatedByRelatedObjectTypeId = null;
			$this->lastMessageRelatedByRelatedObjectTypeIdCriteria = null;

			$this->collMessageRecipients = null;
			$this->lastMessageRecipientCriteria = null;

			$this->collCompanyUsers = null;
			$this->lastCompanyUserCriteria = null;

			$this->collNotificationPrefs = null;
			$this->lastNotificationPrefCriteria = null;

			$this->collMediaItemFolders = null;
			$this->lastMediaItemFolderCriteria = null;

			$this->collMediaItems = null;
			$this->lastMediaItemCriteria = null;

			$this->collRatings = null;
			$this->lastRatingCriteria = null;

			$this->collErrorLogs = null;
			$this->lastErrorLogCriteria = null;

			$this->collActionLogs = null;
			$this->lastActionLogCriteria = null;

			$this->collServices = null;
			$this->lastServiceCriteria = null;

			$this->collMarketingPackages = null;
			$this->lastMarketingPackageCriteria = null;

			$this->collPurchases = null;
			$this->lastPurchaseCriteria = null;

			$this->collPayments = null;
			$this->lastPaymentCriteria = null;

			$this->collPaymentTransactions = null;
			$this->lastPaymentTransactionCriteria = null;

			$this->collCreditAccounts = null;
			$this->lastCreditAccountCriteria = null;

			$this->collJobs = null;
			$this->lastJobCriteria = null;

			$this->collHRProfiles = null;
			$this->lastHRProfileCriteria = null;

			$this->collUserBookmarks = null;
			$this->lastUserBookmarkCriteria = null;

			$this->collInviteFriendsRelatedByInviterTypeId = null;
			$this->lastInviteFriendRelatedByInviterTypeIdCriteria = null;

			$this->collInviteFriendsRelatedByInvitedToTypeId = null;
			$this->lastInviteFriendRelatedByInvitedToTypeIdCriteria = null;

			$this->collGroupMembershipsRelatedByInviterTypeId = null;
			$this->lastGroupMembershipRelatedByInviterTypeIdCriteria = null;

			$this->collGroupMembershipsRelatedByObjectTypeId = null;
			$this->lastGroupMembershipRelatedByObjectTypeIdCriteria = null;

			$this->collStatusUpdates = null;
			$this->lastStatusUpdateCriteria = null;

			$this->collLocationUpdates = null;
			$this->lastLocationUpdateCriteria = null;

			$this->collCommentsRelatedByItemTypeId = null;
			$this->lastCommentRelatedByItemTypeIdCriteria = null;

			$this->collCommentsRelatedByCommenterTypeId = null;
			$this->lastCommentRelatedByCommenterTypeIdCriteria = null;

			$this->collActionCasesRelatedByIssuerTypeId = null;
			$this->lastActionCaseRelatedByIssuerTypeIdCriteria = null;

			$this->collActionCasesRelatedByTargetTypeId = null;
			$this->lastActionCaseRelatedByTargetTypeIdCriteria = null;

			$this->collRelationUpdatesRelatedBySubjectTypeId = null;
			$this->lastRelationUpdateRelatedBySubjectTypeIdCriteria = null;

			$this->collRelationUpdatesRelatedByObjectTypeId = null;
			$this->lastRelationUpdateRelatedByObjectTypeIdCriteria = null;

			$this->collWallPostsRelatedByOwnerTypeId = null;
			$this->lastWallPostRelatedByOwnerTypeIdCriteria = null;

			$this->collWallPostsRelatedByPosterTypeId = null;
			$this->lastWallPostRelatedByPosterTypeIdCriteria = null;

			$this->collWallPostsRelatedByItemTypeId = null;
			$this->lastWallPostRelatedByItemTypeIdCriteria = null;

			$this->collLikeItsRelatedByPosterTypeId = null;
			$this->lastLikeItRelatedByPosterTypeIdCriteria = null;

			$this->collLikeItsRelatedByItemTypeId = null;
			$this->lastLikeItRelatedByItemTypeIdCriteria = null;

			$this->collMarketingPackagePricesRelatedByTargetTypeId = null;
			$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria = null;

			$this->collMarketingPackagePricesRelatedByReferenceTypeId = null;
			$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria = null;

			$this->collPlaces = null;
			$this->lastPlaceCriteria = null;

			$this->collEventsRelatedByOwnerTypeId = null;
			$this->lastEventRelatedByOwnerTypeIdCriteria = null;

			$this->collEventsRelatedByOrganiserTypeId = null;
			$this->lastEventRelatedByOrganiserTypeIdCriteria = null;

			$this->collEventInvitesRelatedBySubjectTypeId = null;
			$this->lastEventInviteRelatedBySubjectTypeIdCriteria = null;

			$this->collEventInvitesRelatedByInviterTypeId = null;
			$this->lastEventInviteRelatedByInviterTypeIdCriteria = null;

			$this->collTransferOwnershipRequests = null;
			$this->lastTransferOwnershipRequestCriteria = null;

			$this->collAnnouncementsRelatedByOwnerTypeId = null;
			$this->lastAnnouncementRelatedByOwnerTypeIdCriteria = null;

			$this->collAnnouncementsRelatedByObjectTypeId = null;
			$this->lastAnnouncementRelatedByObjectTypeIdCriteria = null;

			$this->collAnnRecipients = null;
			$this->lastAnnRecipientCriteria = null;

			$this->collEmailLayouts = null;
			$this->lastEmailLayoutCriteria = null;

			$this->collTradeExperts = null;
			$this->lastTradeExpertCriteria = null;

			$this->collTradeExpertClients = null;
			$this->lastTradeExpertClientCriteria = null;

			$this->collTasksRelatedByStaffTypeId = null;
			$this->lastTaskRelatedByStaffTypeIdCriteria = null;

			$this->collTasksRelatedByObjectTypeId = null;
			$this->lastTaskRelatedByObjectTypeIdCriteria = null;

			$this->collTranslators = null;
			$this->lastTranslatorCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePrivacyNodeType:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PrivacyNodeTypePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PrivacyNodeTypePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasePrivacyNodeType:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePrivacyNodeType:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PrivacyNodeTypePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasePrivacyNodeType:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PrivacyNodeTypePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PrivacyNodeTypePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PrivacyNodeTypePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PrivacyNodeTypePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collRoles !== null) {
				foreach ($this->collRoles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRoleMatrixsRelatedByObjectTypeId !== null) {
				foreach ($this->collRoleMatrixsRelatedByObjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRoleMatrixsRelatedBySubjectTypeId !== null) {
				foreach ($this->collRoleMatrixsRelatedBySubjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPrivacyNodeTypeI18ns !== null) {
				foreach ($this->collPrivacyNodeTypeI18ns as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPrivacyPreferencesRelatedBySubjectTypeId !== null) {
				foreach ($this->collPrivacyPreferencesRelatedBySubjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPrivacyPreferencesRelatedByObjectTypeId !== null) {
				foreach ($this->collPrivacyPreferencesRelatedByObjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMessagesRelatedBySenderTypeId !== null) {
				foreach ($this->collMessagesRelatedBySenderTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMessagesRelatedByRelatedObjectTypeId !== null) {
				foreach ($this->collMessagesRelatedByRelatedObjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMessageRecipients !== null) {
				foreach ($this->collMessageRecipients as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanyUsers !== null) {
				foreach ($this->collCompanyUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotificationPrefs !== null) {
				foreach ($this->collNotificationPrefs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMediaItemFolders !== null) {
				foreach ($this->collMediaItemFolders as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMediaItems !== null) {
				foreach ($this->collMediaItems as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRatings !== null) {
				foreach ($this->collRatings as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collErrorLogs !== null) {
				foreach ($this->collErrorLogs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collActionLogs !== null) {
				foreach ($this->collActionLogs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collServices !== null) {
				foreach ($this->collServices as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMarketingPackages !== null) {
				foreach ($this->collMarketingPackages as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPurchases !== null) {
				foreach ($this->collPurchases as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPayments !== null) {
				foreach ($this->collPayments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPaymentTransactions !== null) {
				foreach ($this->collPaymentTransactions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCreditAccounts !== null) {
				foreach ($this->collCreditAccounts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJobs !== null) {
				foreach ($this->collJobs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collHRProfiles !== null) {
				foreach ($this->collHRProfiles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserBookmarks !== null) {
				foreach ($this->collUserBookmarks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collInviteFriendsRelatedByInviterTypeId !== null) {
				foreach ($this->collInviteFriendsRelatedByInviterTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collInviteFriendsRelatedByInvitedToTypeId !== null) {
				foreach ($this->collInviteFriendsRelatedByInvitedToTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGroupMembershipsRelatedByInviterTypeId !== null) {
				foreach ($this->collGroupMembershipsRelatedByInviterTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGroupMembershipsRelatedByObjectTypeId !== null) {
				foreach ($this->collGroupMembershipsRelatedByObjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStatusUpdates !== null) {
				foreach ($this->collStatusUpdates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLocationUpdates !== null) {
				foreach ($this->collLocationUpdates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCommentsRelatedByItemTypeId !== null) {
				foreach ($this->collCommentsRelatedByItemTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCommentsRelatedByCommenterTypeId !== null) {
				foreach ($this->collCommentsRelatedByCommenterTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collActionCasesRelatedByIssuerTypeId !== null) {
				foreach ($this->collActionCasesRelatedByIssuerTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collActionCasesRelatedByTargetTypeId !== null) {
				foreach ($this->collActionCasesRelatedByTargetTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRelationUpdatesRelatedBySubjectTypeId !== null) {
				foreach ($this->collRelationUpdatesRelatedBySubjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRelationUpdatesRelatedByObjectTypeId !== null) {
				foreach ($this->collRelationUpdatesRelatedByObjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collWallPostsRelatedByOwnerTypeId !== null) {
				foreach ($this->collWallPostsRelatedByOwnerTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collWallPostsRelatedByPosterTypeId !== null) {
				foreach ($this->collWallPostsRelatedByPosterTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collWallPostsRelatedByItemTypeId !== null) {
				foreach ($this->collWallPostsRelatedByItemTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLikeItsRelatedByPosterTypeId !== null) {
				foreach ($this->collLikeItsRelatedByPosterTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLikeItsRelatedByItemTypeId !== null) {
				foreach ($this->collLikeItsRelatedByItemTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMarketingPackagePricesRelatedByTargetTypeId !== null) {
				foreach ($this->collMarketingPackagePricesRelatedByTargetTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMarketingPackagePricesRelatedByReferenceTypeId !== null) {
				foreach ($this->collMarketingPackagePricesRelatedByReferenceTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPlaces !== null) {
				foreach ($this->collPlaces as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventsRelatedByOwnerTypeId !== null) {
				foreach ($this->collEventsRelatedByOwnerTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventsRelatedByOrganiserTypeId !== null) {
				foreach ($this->collEventsRelatedByOrganiserTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventInvitesRelatedBySubjectTypeId !== null) {
				foreach ($this->collEventInvitesRelatedBySubjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventInvitesRelatedByInviterTypeId !== null) {
				foreach ($this->collEventInvitesRelatedByInviterTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransferOwnershipRequests !== null) {
				foreach ($this->collTransferOwnershipRequests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAnnouncementsRelatedByOwnerTypeId !== null) {
				foreach ($this->collAnnouncementsRelatedByOwnerTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAnnouncementsRelatedByObjectTypeId !== null) {
				foreach ($this->collAnnouncementsRelatedByObjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAnnRecipients !== null) {
				foreach ($this->collAnnRecipients as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmailLayouts !== null) {
				foreach ($this->collEmailLayouts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTradeExperts !== null) {
				foreach ($this->collTradeExperts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTradeExpertClients !== null) {
				foreach ($this->collTradeExpertClients as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTasksRelatedByStaffTypeId !== null) {
				foreach ($this->collTasksRelatedByStaffTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTasksRelatedByObjectTypeId !== null) {
				foreach ($this->collTasksRelatedByObjectTypeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTranslators !== null) {
				foreach ($this->collTranslators as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PrivacyNodeTypePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collRoles !== null) {
					foreach ($this->collRoles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRoleMatrixsRelatedByObjectTypeId !== null) {
					foreach ($this->collRoleMatrixsRelatedByObjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRoleMatrixsRelatedBySubjectTypeId !== null) {
					foreach ($this->collRoleMatrixsRelatedBySubjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPrivacyNodeTypeI18ns !== null) {
					foreach ($this->collPrivacyNodeTypeI18ns as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPrivacyPreferencesRelatedBySubjectTypeId !== null) {
					foreach ($this->collPrivacyPreferencesRelatedBySubjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPrivacyPreferencesRelatedByObjectTypeId !== null) {
					foreach ($this->collPrivacyPreferencesRelatedByObjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMessagesRelatedBySenderTypeId !== null) {
					foreach ($this->collMessagesRelatedBySenderTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMessagesRelatedByRelatedObjectTypeId !== null) {
					foreach ($this->collMessagesRelatedByRelatedObjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMessageRecipients !== null) {
					foreach ($this->collMessageRecipients as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanyUsers !== null) {
					foreach ($this->collCompanyUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotificationPrefs !== null) {
					foreach ($this->collNotificationPrefs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMediaItemFolders !== null) {
					foreach ($this->collMediaItemFolders as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMediaItems !== null) {
					foreach ($this->collMediaItems as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRatings !== null) {
					foreach ($this->collRatings as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collErrorLogs !== null) {
					foreach ($this->collErrorLogs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collActionLogs !== null) {
					foreach ($this->collActionLogs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collServices !== null) {
					foreach ($this->collServices as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMarketingPackages !== null) {
					foreach ($this->collMarketingPackages as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPurchases !== null) {
					foreach ($this->collPurchases as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPayments !== null) {
					foreach ($this->collPayments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPaymentTransactions !== null) {
					foreach ($this->collPaymentTransactions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCreditAccounts !== null) {
					foreach ($this->collCreditAccounts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJobs !== null) {
					foreach ($this->collJobs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collHRProfiles !== null) {
					foreach ($this->collHRProfiles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserBookmarks !== null) {
					foreach ($this->collUserBookmarks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collInviteFriendsRelatedByInviterTypeId !== null) {
					foreach ($this->collInviteFriendsRelatedByInviterTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collInviteFriendsRelatedByInvitedToTypeId !== null) {
					foreach ($this->collInviteFriendsRelatedByInvitedToTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGroupMembershipsRelatedByInviterTypeId !== null) {
					foreach ($this->collGroupMembershipsRelatedByInviterTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGroupMembershipsRelatedByObjectTypeId !== null) {
					foreach ($this->collGroupMembershipsRelatedByObjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStatusUpdates !== null) {
					foreach ($this->collStatusUpdates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLocationUpdates !== null) {
					foreach ($this->collLocationUpdates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCommentsRelatedByItemTypeId !== null) {
					foreach ($this->collCommentsRelatedByItemTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCommentsRelatedByCommenterTypeId !== null) {
					foreach ($this->collCommentsRelatedByCommenterTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collActionCasesRelatedByIssuerTypeId !== null) {
					foreach ($this->collActionCasesRelatedByIssuerTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collActionCasesRelatedByTargetTypeId !== null) {
					foreach ($this->collActionCasesRelatedByTargetTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRelationUpdatesRelatedBySubjectTypeId !== null) {
					foreach ($this->collRelationUpdatesRelatedBySubjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRelationUpdatesRelatedByObjectTypeId !== null) {
					foreach ($this->collRelationUpdatesRelatedByObjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collWallPostsRelatedByOwnerTypeId !== null) {
					foreach ($this->collWallPostsRelatedByOwnerTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collWallPostsRelatedByPosterTypeId !== null) {
					foreach ($this->collWallPostsRelatedByPosterTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collWallPostsRelatedByItemTypeId !== null) {
					foreach ($this->collWallPostsRelatedByItemTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLikeItsRelatedByPosterTypeId !== null) {
					foreach ($this->collLikeItsRelatedByPosterTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLikeItsRelatedByItemTypeId !== null) {
					foreach ($this->collLikeItsRelatedByItemTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMarketingPackagePricesRelatedByTargetTypeId !== null) {
					foreach ($this->collMarketingPackagePricesRelatedByTargetTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMarketingPackagePricesRelatedByReferenceTypeId !== null) {
					foreach ($this->collMarketingPackagePricesRelatedByReferenceTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPlaces !== null) {
					foreach ($this->collPlaces as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventsRelatedByOwnerTypeId !== null) {
					foreach ($this->collEventsRelatedByOwnerTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventsRelatedByOrganiserTypeId !== null) {
					foreach ($this->collEventsRelatedByOrganiserTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventInvitesRelatedBySubjectTypeId !== null) {
					foreach ($this->collEventInvitesRelatedBySubjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventInvitesRelatedByInviterTypeId !== null) {
					foreach ($this->collEventInvitesRelatedByInviterTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransferOwnershipRequests !== null) {
					foreach ($this->collTransferOwnershipRequests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAnnouncementsRelatedByOwnerTypeId !== null) {
					foreach ($this->collAnnouncementsRelatedByOwnerTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAnnouncementsRelatedByObjectTypeId !== null) {
					foreach ($this->collAnnouncementsRelatedByObjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAnnRecipients !== null) {
					foreach ($this->collAnnRecipients as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmailLayouts !== null) {
					foreach ($this->collEmailLayouts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTradeExperts !== null) {
					foreach ($this->collTradeExperts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTradeExpertClients !== null) {
					foreach ($this->collTradeExpertClients as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTasksRelatedByStaffTypeId !== null) {
					foreach ($this->collTasksRelatedByStaffTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTasksRelatedByObjectTypeId !== null) {
					foreach ($this->collTasksRelatedByObjectTypeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTranslators !== null) {
					foreach ($this->collTranslators as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PrivacyNodeTypePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getPriority();
				break;
			case 2:
				return $this->getRequiresSubject();
				break;
			case 3:
				return $this->getActive();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PrivacyNodeTypePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getPriority(),
			$keys[2] => $this->getRequiresSubject(),
			$keys[3] => $this->getActive(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PrivacyNodeTypePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setPriority($value);
				break;
			case 2:
				$this->setRequiresSubject($value);
				break;
			case 3:
				$this->setActive($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PrivacyNodeTypePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPriority($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setRequiresSubject($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setActive($arr[$keys[3]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);

		if ($this->isColumnModified(PrivacyNodeTypePeer::ID)) $criteria->add(PrivacyNodeTypePeer::ID, $this->id);
		if ($this->isColumnModified(PrivacyNodeTypePeer::PRIORITY)) $criteria->add(PrivacyNodeTypePeer::PRIORITY, $this->priority);
		if ($this->isColumnModified(PrivacyNodeTypePeer::REQUIRES_SUBJECT)) $criteria->add(PrivacyNodeTypePeer::REQUIRES_SUBJECT, $this->requires_subject);
		if ($this->isColumnModified(PrivacyNodeTypePeer::ACTIVE)) $criteria->add(PrivacyNodeTypePeer::ACTIVE, $this->active);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);

		$criteria->add(PrivacyNodeTypePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PrivacyNodeType (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPriority($this->priority);

		$copyObj->setRequiresSubject($this->requires_subject);

		$copyObj->setActive($this->active);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getRoles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRole($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRoleMatrixsRelatedByObjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRoleMatrixRelatedByObjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRoleMatrixsRelatedBySubjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRoleMatrixRelatedBySubjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPrivacyNodeTypeI18ns() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPrivacyNodeTypeI18n($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPrivacyPreferencesRelatedBySubjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPrivacyPreferenceRelatedBySubjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPrivacyPreferencesRelatedByObjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPrivacyPreferenceRelatedByObjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMessagesRelatedBySenderTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMessageRelatedBySenderTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMessagesRelatedByRelatedObjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMessageRelatedByRelatedObjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMessageRecipients() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMessageRecipient($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanyUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanyUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotificationPrefs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotificationPref($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMediaItemFolders() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMediaItemFolder($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMediaItems() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMediaItem($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRatings() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRating($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getErrorLogs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addErrorLog($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getActionLogs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActionLog($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getServices() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addService($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMarketingPackages() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMarketingPackage($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPurchases() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPurchase($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPayments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPayment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPaymentTransactions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPaymentTransaction($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCreditAccounts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCreditAccount($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJobs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJob($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getHRProfiles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addHRProfile($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserBookmarks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserBookmark($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getInviteFriendsRelatedByInviterTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addInviteFriendRelatedByInviterTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getInviteFriendsRelatedByInvitedToTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addInviteFriendRelatedByInvitedToTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGroupMembershipsRelatedByInviterTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGroupMembershipRelatedByInviterTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGroupMembershipsRelatedByObjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGroupMembershipRelatedByObjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStatusUpdates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStatusUpdate($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLocationUpdates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLocationUpdate($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCommentsRelatedByItemTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCommentRelatedByItemTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCommentsRelatedByCommenterTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCommentRelatedByCommenterTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getActionCasesRelatedByIssuerTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActionCaseRelatedByIssuerTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getActionCasesRelatedByTargetTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActionCaseRelatedByTargetTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRelationUpdatesRelatedBySubjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelationUpdateRelatedBySubjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRelationUpdatesRelatedByObjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelationUpdateRelatedByObjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getWallPostsRelatedByOwnerTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addWallPostRelatedByOwnerTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getWallPostsRelatedByPosterTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addWallPostRelatedByPosterTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getWallPostsRelatedByItemTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addWallPostRelatedByItemTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLikeItsRelatedByPosterTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLikeItRelatedByPosterTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLikeItsRelatedByItemTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLikeItRelatedByItemTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMarketingPackagePricesRelatedByTargetTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMarketingPackagePriceRelatedByTargetTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMarketingPackagePricesRelatedByReferenceTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMarketingPackagePriceRelatedByReferenceTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPlaces() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPlace($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventsRelatedByOwnerTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventRelatedByOwnerTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventsRelatedByOrganiserTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventRelatedByOrganiserTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventInvitesRelatedBySubjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventInviteRelatedBySubjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventInvitesRelatedByInviterTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventInviteRelatedByInviterTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransferOwnershipRequests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransferOwnershipRequest($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAnnouncementsRelatedByOwnerTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAnnouncementRelatedByOwnerTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAnnouncementsRelatedByObjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAnnouncementRelatedByObjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAnnRecipients() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAnnRecipient($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmailLayouts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmailLayout($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTradeExperts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTradeExpert($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTradeExpertClients() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTradeExpertClient($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTasksRelatedByStaffTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTaskRelatedByStaffTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTasksRelatedByObjectTypeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTaskRelatedByObjectTypeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTranslators() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTranslator($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PrivacyNodeType Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PrivacyNodeTypePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PrivacyNodeTypePeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collRoles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRoles()
	 */
	public function clearRoles()
	{
		$this->collRoles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRoles collection (array).
	 *
	 * By default this just sets the collRoles collection to an empty array (like clearcollRoles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRoles()
	{
		$this->collRoles = array();
	}

	/**
	 * Gets an array of Role objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related Roles from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Role[]
	 * @throws     PropelException
	 */
	public function getRoles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoles === null) {
			if ($this->isNew()) {
			   $this->collRoles = array();
			} else {

				$criteria->add(RolePeer::RELATED_TYPE_ID, $this->id);

				RolePeer::addSelectColumns($criteria);
				$this->collRoles = RolePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RolePeer::RELATED_TYPE_ID, $this->id);

				RolePeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleCriteria) || !$this->lastRoleCriteria->equals($criteria)) {
					$this->collRoles = RolePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleCriteria = $criteria;
		return $this->collRoles;
	}

	/**
	 * Returns the number of related Role objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Role objects.
	 * @throws     PropelException
	 */
	public function countRoles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRoles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RolePeer::RELATED_TYPE_ID, $this->id);

				$count = RolePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RolePeer::RELATED_TYPE_ID, $this->id);

				if (!isset($this->lastRoleCriteria) || !$this->lastRoleCriteria->equals($criteria)) {
					$count = RolePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRoles);
				}
			} else {
				$count = count($this->collRoles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Role object to this object
	 * through the Role foreign key attribute.
	 *
	 * @param      Role $l Role
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRole(Role $l)
	{
		if ($this->collRoles === null) {
			$this->initRoles();
		}
		if (!in_array($l, $this->collRoles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRoles, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Roles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getRolesJoinRoleRelatedByParentId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoles === null) {
			if ($this->isNew()) {
				$this->collRoles = array();
			} else {

				$criteria->add(RolePeer::RELATED_TYPE_ID, $this->id);

				$this->collRoles = RolePeer::doSelectJoinRoleRelatedByParentId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RolePeer::RELATED_TYPE_ID, $this->id);

			if (!isset($this->lastRoleCriteria) || !$this->lastRoleCriteria->equals($criteria)) {
				$this->collRoles = RolePeer::doSelectJoinRoleRelatedByParentId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleCriteria = $criteria;

		return $this->collRoles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Roles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getRolesJoinRoleRelatedByOppositeRoleId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoles === null) {
			if ($this->isNew()) {
				$this->collRoles = array();
			} else {

				$criteria->add(RolePeer::RELATED_TYPE_ID, $this->id);

				$this->collRoles = RolePeer::doSelectJoinRoleRelatedByOppositeRoleId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RolePeer::RELATED_TYPE_ID, $this->id);

			if (!isset($this->lastRoleCriteria) || !$this->lastRoleCriteria->equals($criteria)) {
				$this->collRoles = RolePeer::doSelectJoinRoleRelatedByOppositeRoleId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleCriteria = $criteria;

		return $this->collRoles;
	}

	/**
	 * Clears out the collRoleMatrixsRelatedByObjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRoleMatrixsRelatedByObjectTypeId()
	 */
	public function clearRoleMatrixsRelatedByObjectTypeId()
	{
		$this->collRoleMatrixsRelatedByObjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRoleMatrixsRelatedByObjectTypeId collection (array).
	 *
	 * By default this just sets the collRoleMatrixsRelatedByObjectTypeId collection to an empty array (like clearcollRoleMatrixsRelatedByObjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRoleMatrixsRelatedByObjectTypeId()
	{
		$this->collRoleMatrixsRelatedByObjectTypeId = array();
	}

	/**
	 * Gets an array of RoleMatrix objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related RoleMatrixsRelatedByObjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RoleMatrix[]
	 * @throws     PropelException
	 */
	public function getRoleMatrixsRelatedByObjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleMatrixsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collRoleMatrixsRelatedByObjectTypeId = array();
			} else {

				$criteria->add(RoleMatrixPeer::OBJECT_TYPE_ID, $this->id);

				RoleMatrixPeer::addSelectColumns($criteria);
				$this->collRoleMatrixsRelatedByObjectTypeId = RoleMatrixPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RoleMatrixPeer::OBJECT_TYPE_ID, $this->id);

				RoleMatrixPeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleMatrixRelatedByObjectTypeIdCriteria) || !$this->lastRoleMatrixRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$this->collRoleMatrixsRelatedByObjectTypeId = RoleMatrixPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleMatrixRelatedByObjectTypeIdCriteria = $criteria;
		return $this->collRoleMatrixsRelatedByObjectTypeId;
	}

	/**
	 * Returns the number of related RoleMatrix objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RoleMatrix objects.
	 * @throws     PropelException
	 */
	public function countRoleMatrixsRelatedByObjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRoleMatrixsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RoleMatrixPeer::OBJECT_TYPE_ID, $this->id);

				$count = RoleMatrixPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RoleMatrixPeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastRoleMatrixRelatedByObjectTypeIdCriteria) || !$this->lastRoleMatrixRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$count = RoleMatrixPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRoleMatrixsRelatedByObjectTypeId);
				}
			} else {
				$count = count($this->collRoleMatrixsRelatedByObjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RoleMatrix object to this object
	 * through the RoleMatrix foreign key attribute.
	 *
	 * @param      RoleMatrix $l RoleMatrix
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoleMatrixRelatedByObjectTypeId(RoleMatrix $l)
	{
		if ($this->collRoleMatrixsRelatedByObjectTypeId === null) {
			$this->initRoleMatrixsRelatedByObjectTypeId();
		}
		if (!in_array($l, $this->collRoleMatrixsRelatedByObjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRoleMatrixsRelatedByObjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByObjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related RoleMatrixsRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getRoleMatrixsRelatedByObjectTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleMatrixsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collRoleMatrixsRelatedByObjectTypeId = array();
			} else {

				$criteria->add(RoleMatrixPeer::OBJECT_TYPE_ID, $this->id);

				$this->collRoleMatrixsRelatedByObjectTypeId = RoleMatrixPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RoleMatrixPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastRoleMatrixRelatedByObjectTypeIdCriteria) || !$this->lastRoleMatrixRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collRoleMatrixsRelatedByObjectTypeId = RoleMatrixPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleMatrixRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collRoleMatrixsRelatedByObjectTypeId;
	}

	/**
	 * Clears out the collRoleMatrixsRelatedBySubjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRoleMatrixsRelatedBySubjectTypeId()
	 */
	public function clearRoleMatrixsRelatedBySubjectTypeId()
	{
		$this->collRoleMatrixsRelatedBySubjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRoleMatrixsRelatedBySubjectTypeId collection (array).
	 *
	 * By default this just sets the collRoleMatrixsRelatedBySubjectTypeId collection to an empty array (like clearcollRoleMatrixsRelatedBySubjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRoleMatrixsRelatedBySubjectTypeId()
	{
		$this->collRoleMatrixsRelatedBySubjectTypeId = array();
	}

	/**
	 * Gets an array of RoleMatrix objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related RoleMatrixsRelatedBySubjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RoleMatrix[]
	 * @throws     PropelException
	 */
	public function getRoleMatrixsRelatedBySubjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleMatrixsRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collRoleMatrixsRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(RoleMatrixPeer::SUBJECT_TYPE_ID, $this->id);

				RoleMatrixPeer::addSelectColumns($criteria);
				$this->collRoleMatrixsRelatedBySubjectTypeId = RoleMatrixPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RoleMatrixPeer::SUBJECT_TYPE_ID, $this->id);

				RoleMatrixPeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleMatrixRelatedBySubjectTypeIdCriteria) || !$this->lastRoleMatrixRelatedBySubjectTypeIdCriteria->equals($criteria)) {
					$this->collRoleMatrixsRelatedBySubjectTypeId = RoleMatrixPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleMatrixRelatedBySubjectTypeIdCriteria = $criteria;
		return $this->collRoleMatrixsRelatedBySubjectTypeId;
	}

	/**
	 * Returns the number of related RoleMatrix objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RoleMatrix objects.
	 * @throws     PropelException
	 */
	public function countRoleMatrixsRelatedBySubjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRoleMatrixsRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RoleMatrixPeer::SUBJECT_TYPE_ID, $this->id);

				$count = RoleMatrixPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RoleMatrixPeer::SUBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastRoleMatrixRelatedBySubjectTypeIdCriteria) || !$this->lastRoleMatrixRelatedBySubjectTypeIdCriteria->equals($criteria)) {
					$count = RoleMatrixPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRoleMatrixsRelatedBySubjectTypeId);
				}
			} else {
				$count = count($this->collRoleMatrixsRelatedBySubjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RoleMatrix object to this object
	 * through the RoleMatrix foreign key attribute.
	 *
	 * @param      RoleMatrix $l RoleMatrix
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoleMatrixRelatedBySubjectTypeId(RoleMatrix $l)
	{
		if ($this->collRoleMatrixsRelatedBySubjectTypeId === null) {
			$this->initRoleMatrixsRelatedBySubjectTypeId();
		}
		if (!in_array($l, $this->collRoleMatrixsRelatedBySubjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRoleMatrixsRelatedBySubjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedBySubjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related RoleMatrixsRelatedBySubjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getRoleMatrixsRelatedBySubjectTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleMatrixsRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$this->collRoleMatrixsRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(RoleMatrixPeer::SUBJECT_TYPE_ID, $this->id);

				$this->collRoleMatrixsRelatedBySubjectTypeId = RoleMatrixPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RoleMatrixPeer::SUBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastRoleMatrixRelatedBySubjectTypeIdCriteria) || !$this->lastRoleMatrixRelatedBySubjectTypeIdCriteria->equals($criteria)) {
				$this->collRoleMatrixsRelatedBySubjectTypeId = RoleMatrixPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleMatrixRelatedBySubjectTypeIdCriteria = $criteria;

		return $this->collRoleMatrixsRelatedBySubjectTypeId;
	}

	/**
	 * Clears out the collPrivacyNodeTypeI18ns collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPrivacyNodeTypeI18ns()
	 */
	public function clearPrivacyNodeTypeI18ns()
	{
		$this->collPrivacyNodeTypeI18ns = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPrivacyNodeTypeI18ns collection (array).
	 *
	 * By default this just sets the collPrivacyNodeTypeI18ns collection to an empty array (like clearcollPrivacyNodeTypeI18ns());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPrivacyNodeTypeI18ns()
	{
		$this->collPrivacyNodeTypeI18ns = array();
	}

	/**
	 * Gets an array of PrivacyNodeTypeI18n objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related PrivacyNodeTypeI18ns from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PrivacyNodeTypeI18n[]
	 * @throws     PropelException
	 */
	public function getPrivacyNodeTypeI18ns($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyNodeTypeI18ns === null) {
			if ($this->isNew()) {
			   $this->collPrivacyNodeTypeI18ns = array();
			} else {

				$criteria->add(PrivacyNodeTypeI18nPeer::ID, $this->id);

				PrivacyNodeTypeI18nPeer::addSelectColumns($criteria);
				$this->collPrivacyNodeTypeI18ns = PrivacyNodeTypeI18nPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PrivacyNodeTypeI18nPeer::ID, $this->id);

				PrivacyNodeTypeI18nPeer::addSelectColumns($criteria);
				if (!isset($this->lastPrivacyNodeTypeI18nCriteria) || !$this->lastPrivacyNodeTypeI18nCriteria->equals($criteria)) {
					$this->collPrivacyNodeTypeI18ns = PrivacyNodeTypeI18nPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPrivacyNodeTypeI18nCriteria = $criteria;
		return $this->collPrivacyNodeTypeI18ns;
	}

	/**
	 * Returns the number of related PrivacyNodeTypeI18n objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PrivacyNodeTypeI18n objects.
	 * @throws     PropelException
	 */
	public function countPrivacyNodeTypeI18ns(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPrivacyNodeTypeI18ns === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PrivacyNodeTypeI18nPeer::ID, $this->id);

				$count = PrivacyNodeTypeI18nPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PrivacyNodeTypeI18nPeer::ID, $this->id);

				if (!isset($this->lastPrivacyNodeTypeI18nCriteria) || !$this->lastPrivacyNodeTypeI18nCriteria->equals($criteria)) {
					$count = PrivacyNodeTypeI18nPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPrivacyNodeTypeI18ns);
				}
			} else {
				$count = count($this->collPrivacyNodeTypeI18ns);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PrivacyNodeTypeI18n object to this object
	 * through the PrivacyNodeTypeI18n foreign key attribute.
	 *
	 * @param      PrivacyNodeTypeI18n $l PrivacyNodeTypeI18n
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPrivacyNodeTypeI18n(PrivacyNodeTypeI18n $l)
	{
		if ($this->collPrivacyNodeTypeI18ns === null) {
			$this->initPrivacyNodeTypeI18ns();
		}
		if (!in_array($l, $this->collPrivacyNodeTypeI18ns, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPrivacyNodeTypeI18ns, $l);
			$l->setPrivacyNodeType($this);
		}
	}

	/**
	 * Clears out the collPrivacyPreferencesRelatedBySubjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPrivacyPreferencesRelatedBySubjectTypeId()
	 */
	public function clearPrivacyPreferencesRelatedBySubjectTypeId()
	{
		$this->collPrivacyPreferencesRelatedBySubjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPrivacyPreferencesRelatedBySubjectTypeId collection (array).
	 *
	 * By default this just sets the collPrivacyPreferencesRelatedBySubjectTypeId collection to an empty array (like clearcollPrivacyPreferencesRelatedBySubjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPrivacyPreferencesRelatedBySubjectTypeId()
	{
		$this->collPrivacyPreferencesRelatedBySubjectTypeId = array();
	}

	/**
	 * Gets an array of PrivacyPreference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related PrivacyPreferencesRelatedBySubjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PrivacyPreference[]
	 * @throws     PropelException
	 */
	public function getPrivacyPreferencesRelatedBySubjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collPrivacyPreferencesRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				$this->collPrivacyPreferencesRelatedBySubjectTypeId = PrivacyPreferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria->equals($criteria)) {
					$this->collPrivacyPreferencesRelatedBySubjectTypeId = PrivacyPreferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria = $criteria;
		return $this->collPrivacyPreferencesRelatedBySubjectTypeId;
	}

	/**
	 * Returns the number of related PrivacyPreference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PrivacyPreference objects.
	 * @throws     PropelException
	 */
	public function countPrivacyPreferencesRelatedBySubjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPrivacyPreferencesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

				$count = PrivacyPreferencePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria->equals($criteria)) {
					$count = PrivacyPreferencePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPrivacyPreferencesRelatedBySubjectTypeId);
				}
			} else {
				$count = count($this->collPrivacyPreferencesRelatedBySubjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PrivacyPreference object to this object
	 * through the PrivacyPreference foreign key attribute.
	 *
	 * @param      PrivacyPreference $l PrivacyPreference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPrivacyPreferenceRelatedBySubjectTypeId(PrivacyPreference $l)
	{
		if ($this->collPrivacyPreferencesRelatedBySubjectTypeId === null) {
			$this->initPrivacyPreferencesRelatedBySubjectTypeId();
		}
		if (!in_array($l, $this->collPrivacyPreferencesRelatedBySubjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPrivacyPreferencesRelatedBySubjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedBySubjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedBySubjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPrivacyPreferencesRelatedBySubjectTypeIdJoinRoleRelatedByRoleOnSubject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

				$this->collPrivacyPreferencesRelatedBySubjectTypeId = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnSubject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedBySubjectTypeId = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnSubject($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedBySubjectTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedBySubjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPrivacyPreferencesRelatedBySubjectTypeIdJoinRoleRelatedByRoleOnObject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

				$this->collPrivacyPreferencesRelatedBySubjectTypeId = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnObject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedBySubjectTypeId = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnObject($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedBySubjectTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedBySubjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPrivacyPreferencesRelatedBySubjectTypeIdJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

				$this->collPrivacyPreferencesRelatedBySubjectTypeId = PrivacyPreferencePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::SUBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedBySubjectTypeId = PrivacyPreferencePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedBySubjectTypeIdCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedBySubjectTypeId;
	}

	/**
	 * Clears out the collPrivacyPreferencesRelatedByObjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPrivacyPreferencesRelatedByObjectTypeId()
	 */
	public function clearPrivacyPreferencesRelatedByObjectTypeId()
	{
		$this->collPrivacyPreferencesRelatedByObjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPrivacyPreferencesRelatedByObjectTypeId collection (array).
	 *
	 * By default this just sets the collPrivacyPreferencesRelatedByObjectTypeId collection to an empty array (like clearcollPrivacyPreferencesRelatedByObjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPrivacyPreferencesRelatedByObjectTypeId()
	{
		$this->collPrivacyPreferencesRelatedByObjectTypeId = array();
	}

	/**
	 * Gets an array of PrivacyPreference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related PrivacyPreferencesRelatedByObjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PrivacyPreference[]
	 * @throws     PropelException
	 */
	public function getPrivacyPreferencesRelatedByObjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collPrivacyPreferencesRelatedByObjectTypeId = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				$this->collPrivacyPreferencesRelatedByObjectTypeId = PrivacyPreferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$this->collPrivacyPreferencesRelatedByObjectTypeId = PrivacyPreferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria = $criteria;
		return $this->collPrivacyPreferencesRelatedByObjectTypeId;
	}

	/**
	 * Returns the number of related PrivacyPreference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PrivacyPreference objects.
	 * @throws     PropelException
	 */
	public function countPrivacyPreferencesRelatedByObjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPrivacyPreferencesRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

				$count = PrivacyPreferencePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$count = PrivacyPreferencePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPrivacyPreferencesRelatedByObjectTypeId);
				}
			} else {
				$count = count($this->collPrivacyPreferencesRelatedByObjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PrivacyPreference object to this object
	 * through the PrivacyPreference foreign key attribute.
	 *
	 * @param      PrivacyPreference $l PrivacyPreference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPrivacyPreferenceRelatedByObjectTypeId(PrivacyPreference $l)
	{
		if ($this->collPrivacyPreferencesRelatedByObjectTypeId === null) {
			$this->initPrivacyPreferencesRelatedByObjectTypeId();
		}
		if (!in_array($l, $this->collPrivacyPreferencesRelatedByObjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPrivacyPreferencesRelatedByObjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByObjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPrivacyPreferencesRelatedByObjectTypeIdJoinRoleRelatedByRoleOnSubject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByObjectTypeId = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

				$this->collPrivacyPreferencesRelatedByObjectTypeId = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnSubject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByObjectTypeId = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnSubject($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByObjectTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPrivacyPreferencesRelatedByObjectTypeIdJoinRoleRelatedByRoleOnObject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByObjectTypeId = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

				$this->collPrivacyPreferencesRelatedByObjectTypeId = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnObject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByObjectTypeId = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnObject($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByObjectTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPrivacyPreferencesRelatedByObjectTypeIdJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByObjectTypeId = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

				$this->collPrivacyPreferencesRelatedByObjectTypeId = PrivacyPreferencePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria) || !$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByObjectTypeId = PrivacyPreferencePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByObjectTypeId;
	}

	/**
	 * Clears out the collMessagesRelatedBySenderTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMessagesRelatedBySenderTypeId()
	 */
	public function clearMessagesRelatedBySenderTypeId()
	{
		$this->collMessagesRelatedBySenderTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMessagesRelatedBySenderTypeId collection (array).
	 *
	 * By default this just sets the collMessagesRelatedBySenderTypeId collection to an empty array (like clearcollMessagesRelatedBySenderTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMessagesRelatedBySenderTypeId()
	{
		$this->collMessagesRelatedBySenderTypeId = array();
	}

	/**
	 * Gets an array of Message objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related MessagesRelatedBySenderTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Message[]
	 * @throws     PropelException
	 */
	public function getMessagesRelatedBySenderTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessagesRelatedBySenderTypeId === null) {
			if ($this->isNew()) {
			   $this->collMessagesRelatedBySenderTypeId = array();
			} else {

				$criteria->add(MessagePeer::SENDER_TYPE_ID, $this->id);

				MessagePeer::addSelectColumns($criteria);
				$this->collMessagesRelatedBySenderTypeId = MessagePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MessagePeer::SENDER_TYPE_ID, $this->id);

				MessagePeer::addSelectColumns($criteria);
				if (!isset($this->lastMessageRelatedBySenderTypeIdCriteria) || !$this->lastMessageRelatedBySenderTypeIdCriteria->equals($criteria)) {
					$this->collMessagesRelatedBySenderTypeId = MessagePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMessageRelatedBySenderTypeIdCriteria = $criteria;
		return $this->collMessagesRelatedBySenderTypeId;
	}

	/**
	 * Returns the number of related Message objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Message objects.
	 * @throws     PropelException
	 */
	public function countMessagesRelatedBySenderTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMessagesRelatedBySenderTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MessagePeer::SENDER_TYPE_ID, $this->id);

				$count = MessagePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MessagePeer::SENDER_TYPE_ID, $this->id);

				if (!isset($this->lastMessageRelatedBySenderTypeIdCriteria) || !$this->lastMessageRelatedBySenderTypeIdCriteria->equals($criteria)) {
					$count = MessagePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMessagesRelatedBySenderTypeId);
				}
			} else {
				$count = count($this->collMessagesRelatedBySenderTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Message object to this object
	 * through the Message foreign key attribute.
	 *
	 * @param      Message $l Message
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMessageRelatedBySenderTypeId(Message $l)
	{
		if ($this->collMessagesRelatedBySenderTypeId === null) {
			$this->initMessagesRelatedBySenderTypeId();
		}
		if (!in_array($l, $this->collMessagesRelatedBySenderTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMessagesRelatedBySenderTypeId, $l);
			$l->setPrivacyNodeTypeRelatedBySenderTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MessagesRelatedBySenderTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMessagesRelatedBySenderTypeIdJoinMessageRelatedByThreadId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessagesRelatedBySenderTypeId === null) {
			if ($this->isNew()) {
				$this->collMessagesRelatedBySenderTypeId = array();
			} else {

				$criteria->add(MessagePeer::SENDER_TYPE_ID, $this->id);

				$this->collMessagesRelatedBySenderTypeId = MessagePeer::doSelectJoinMessageRelatedByThreadId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MessagePeer::SENDER_TYPE_ID, $this->id);

			if (!isset($this->lastMessageRelatedBySenderTypeIdCriteria) || !$this->lastMessageRelatedBySenderTypeIdCriteria->equals($criteria)) {
				$this->collMessagesRelatedBySenderTypeId = MessagePeer::doSelectJoinMessageRelatedByThreadId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMessageRelatedBySenderTypeIdCriteria = $criteria;

		return $this->collMessagesRelatedBySenderTypeId;
	}

	/**
	 * Clears out the collMessagesRelatedByRelatedObjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMessagesRelatedByRelatedObjectTypeId()
	 */
	public function clearMessagesRelatedByRelatedObjectTypeId()
	{
		$this->collMessagesRelatedByRelatedObjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMessagesRelatedByRelatedObjectTypeId collection (array).
	 *
	 * By default this just sets the collMessagesRelatedByRelatedObjectTypeId collection to an empty array (like clearcollMessagesRelatedByRelatedObjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMessagesRelatedByRelatedObjectTypeId()
	{
		$this->collMessagesRelatedByRelatedObjectTypeId = array();
	}

	/**
	 * Gets an array of Message objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related MessagesRelatedByRelatedObjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Message[]
	 * @throws     PropelException
	 */
	public function getMessagesRelatedByRelatedObjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessagesRelatedByRelatedObjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collMessagesRelatedByRelatedObjectTypeId = array();
			} else {

				$criteria->add(MessagePeer::RELATED_OBJECT_TYPE_ID, $this->id);

				MessagePeer::addSelectColumns($criteria);
				$this->collMessagesRelatedByRelatedObjectTypeId = MessagePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MessagePeer::RELATED_OBJECT_TYPE_ID, $this->id);

				MessagePeer::addSelectColumns($criteria);
				if (!isset($this->lastMessageRelatedByRelatedObjectTypeIdCriteria) || !$this->lastMessageRelatedByRelatedObjectTypeIdCriteria->equals($criteria)) {
					$this->collMessagesRelatedByRelatedObjectTypeId = MessagePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMessageRelatedByRelatedObjectTypeIdCriteria = $criteria;
		return $this->collMessagesRelatedByRelatedObjectTypeId;
	}

	/**
	 * Returns the number of related Message objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Message objects.
	 * @throws     PropelException
	 */
	public function countMessagesRelatedByRelatedObjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMessagesRelatedByRelatedObjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MessagePeer::RELATED_OBJECT_TYPE_ID, $this->id);

				$count = MessagePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MessagePeer::RELATED_OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastMessageRelatedByRelatedObjectTypeIdCriteria) || !$this->lastMessageRelatedByRelatedObjectTypeIdCriteria->equals($criteria)) {
					$count = MessagePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMessagesRelatedByRelatedObjectTypeId);
				}
			} else {
				$count = count($this->collMessagesRelatedByRelatedObjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Message object to this object
	 * through the Message foreign key attribute.
	 *
	 * @param      Message $l Message
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMessageRelatedByRelatedObjectTypeId(Message $l)
	{
		if ($this->collMessagesRelatedByRelatedObjectTypeId === null) {
			$this->initMessagesRelatedByRelatedObjectTypeId();
		}
		if (!in_array($l, $this->collMessagesRelatedByRelatedObjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMessagesRelatedByRelatedObjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByRelatedObjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MessagesRelatedByRelatedObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMessagesRelatedByRelatedObjectTypeIdJoinMessageRelatedByThreadId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessagesRelatedByRelatedObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collMessagesRelatedByRelatedObjectTypeId = array();
			} else {

				$criteria->add(MessagePeer::RELATED_OBJECT_TYPE_ID, $this->id);

				$this->collMessagesRelatedByRelatedObjectTypeId = MessagePeer::doSelectJoinMessageRelatedByThreadId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MessagePeer::RELATED_OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastMessageRelatedByRelatedObjectTypeIdCriteria) || !$this->lastMessageRelatedByRelatedObjectTypeIdCriteria->equals($criteria)) {
				$this->collMessagesRelatedByRelatedObjectTypeId = MessagePeer::doSelectJoinMessageRelatedByThreadId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMessageRelatedByRelatedObjectTypeIdCriteria = $criteria;

		return $this->collMessagesRelatedByRelatedObjectTypeId;
	}

	/**
	 * Clears out the collMessageRecipients collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMessageRecipients()
	 */
	public function clearMessageRecipients()
	{
		$this->collMessageRecipients = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMessageRecipients collection (array).
	 *
	 * By default this just sets the collMessageRecipients collection to an empty array (like clearcollMessageRecipients());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMessageRecipients()
	{
		$this->collMessageRecipients = array();
	}

	/**
	 * Gets an array of MessageRecipient objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related MessageRecipients from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MessageRecipient[]
	 * @throws     PropelException
	 */
	public function getMessageRecipients($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessageRecipients === null) {
			if ($this->isNew()) {
			   $this->collMessageRecipients = array();
			} else {

				$criteria->add(MessageRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				MessageRecipientPeer::addSelectColumns($criteria);
				$this->collMessageRecipients = MessageRecipientPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MessageRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				MessageRecipientPeer::addSelectColumns($criteria);
				if (!isset($this->lastMessageRecipientCriteria) || !$this->lastMessageRecipientCriteria->equals($criteria)) {
					$this->collMessageRecipients = MessageRecipientPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMessageRecipientCriteria = $criteria;
		return $this->collMessageRecipients;
	}

	/**
	 * Returns the number of related MessageRecipient objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MessageRecipient objects.
	 * @throws     PropelException
	 */
	public function countMessageRecipients(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMessageRecipients === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MessageRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				$count = MessageRecipientPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MessageRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				if (!isset($this->lastMessageRecipientCriteria) || !$this->lastMessageRecipientCriteria->equals($criteria)) {
					$count = MessageRecipientPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMessageRecipients);
				}
			} else {
				$count = count($this->collMessageRecipients);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MessageRecipient object to this object
	 * through the MessageRecipient foreign key attribute.
	 *
	 * @param      MessageRecipient $l MessageRecipient
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMessageRecipient(MessageRecipient $l)
	{
		if ($this->collMessageRecipients === null) {
			$this->initMessageRecipients();
		}
		if (!in_array($l, $this->collMessageRecipients, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMessageRecipients, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MessageRecipients from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMessageRecipientsJoinMessage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessageRecipients === null) {
			if ($this->isNew()) {
				$this->collMessageRecipients = array();
			} else {

				$criteria->add(MessageRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				$this->collMessageRecipients = MessageRecipientPeer::doSelectJoinMessage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MessageRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

			if (!isset($this->lastMessageRecipientCriteria) || !$this->lastMessageRecipientCriteria->equals($criteria)) {
				$this->collMessageRecipients = MessageRecipientPeer::doSelectJoinMessage($criteria, $con, $join_behavior);
			}
		}
		$this->lastMessageRecipientCriteria = $criteria;

		return $this->collMessageRecipients;
	}

	/**
	 * Clears out the collCompanyUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanyUsers()
	 */
	public function clearCompanyUsers()
	{
		$this->collCompanyUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanyUsers collection (array).
	 *
	 * By default this just sets the collCompanyUsers collection to an empty array (like clearcollCompanyUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanyUsers()
	{
		$this->collCompanyUsers = array();
	}

	/**
	 * Gets an array of CompanyUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related CompanyUsers from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompanyUser[]
	 * @throws     PropelException
	 */
	public function getCompanyUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
			   $this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::OBJECT_TYPE_ID, $this->id);

				CompanyUserPeer::addSelectColumns($criteria);
				$this->collCompanyUsers = CompanyUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyUserPeer::OBJECT_TYPE_ID, $this->id);

				CompanyUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
					$this->collCompanyUsers = CompanyUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyUserCriteria = $criteria;
		return $this->collCompanyUsers;
	}

	/**
	 * Returns the number of related CompanyUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompanyUser objects.
	 * @throws     PropelException
	 */
	public function countCompanyUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyUserPeer::OBJECT_TYPE_ID, $this->id);

				$count = CompanyUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyUserPeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
					$count = CompanyUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanyUsers);
				}
			} else {
				$count = count($this->collCompanyUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompanyUser object to this object
	 * through the CompanyUser foreign key attribute.
	 *
	 * @param      CompanyUser $l CompanyUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanyUser(CompanyUser $l)
	{
		if ($this->collCompanyUsers === null) {
			$this->initCompanyUsers();
		}
		if (!in_array($l, $this->collCompanyUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanyUsers, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related CompanyUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getCompanyUsersJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::OBJECT_TYPE_ID, $this->id);

				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyUserPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyUserCriteria = $criteria;

		return $this->collCompanyUsers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related CompanyUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getCompanyUsersJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::OBJECT_TYPE_ID, $this->id);

				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyUserPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyUserCriteria = $criteria;

		return $this->collCompanyUsers;
	}

	/**
	 * Clears out the collNotificationPrefs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotificationPrefs()
	 */
	public function clearNotificationPrefs()
	{
		$this->collNotificationPrefs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotificationPrefs collection (array).
	 *
	 * By default this just sets the collNotificationPrefs collection to an empty array (like clearcollNotificationPrefs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotificationPrefs()
	{
		$this->collNotificationPrefs = array();
	}

	/**
	 * Gets an array of NotificationPref objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related NotificationPrefs from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotificationPref[]
	 * @throws     PropelException
	 */
	public function getNotificationPrefs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotificationPrefs === null) {
			if ($this->isNew()) {
			   $this->collNotificationPrefs = array();
			} else {

				$criteria->add(NotificationPrefPeer::OBJECT_TYPE_ID, $this->id);

				NotificationPrefPeer::addSelectColumns($criteria);
				$this->collNotificationPrefs = NotificationPrefPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotificationPrefPeer::OBJECT_TYPE_ID, $this->id);

				NotificationPrefPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotificationPrefCriteria) || !$this->lastNotificationPrefCriteria->equals($criteria)) {
					$this->collNotificationPrefs = NotificationPrefPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotificationPrefCriteria = $criteria;
		return $this->collNotificationPrefs;
	}

	/**
	 * Returns the number of related NotificationPref objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotificationPref objects.
	 * @throws     PropelException
	 */
	public function countNotificationPrefs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotificationPrefs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotificationPrefPeer::OBJECT_TYPE_ID, $this->id);

				$count = NotificationPrefPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotificationPrefPeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastNotificationPrefCriteria) || !$this->lastNotificationPrefCriteria->equals($criteria)) {
					$count = NotificationPrefPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotificationPrefs);
				}
			} else {
				$count = count($this->collNotificationPrefs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotificationPref object to this object
	 * through the NotificationPref foreign key attribute.
	 *
	 * @param      NotificationPref $l NotificationPref
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotificationPref(NotificationPref $l)
	{
		if ($this->collNotificationPrefs === null) {
			$this->initNotificationPrefs();
		}
		if (!in_array($l, $this->collNotificationPrefs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotificationPrefs, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related NotificationPrefs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getNotificationPrefsJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotificationPrefs === null) {
			if ($this->isNew()) {
				$this->collNotificationPrefs = array();
			} else {

				$criteria->add(NotificationPrefPeer::OBJECT_TYPE_ID, $this->id);

				$this->collNotificationPrefs = NotificationPrefPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotificationPrefPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastNotificationPrefCriteria) || !$this->lastNotificationPrefCriteria->equals($criteria)) {
				$this->collNotificationPrefs = NotificationPrefPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotificationPrefCriteria = $criteria;

		return $this->collNotificationPrefs;
	}

	/**
	 * Clears out the collMediaItemFolders collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMediaItemFolders()
	 */
	public function clearMediaItemFolders()
	{
		$this->collMediaItemFolders = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMediaItemFolders collection (array).
	 *
	 * By default this just sets the collMediaItemFolders collection to an empty array (like clearcollMediaItemFolders());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMediaItemFolders()
	{
		$this->collMediaItemFolders = array();
	}

	/**
	 * Gets an array of MediaItemFolder objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related MediaItemFolders from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MediaItemFolder[]
	 * @throws     PropelException
	 */
	public function getMediaItemFolders($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMediaItemFolders === null) {
			if ($this->isNew()) {
			   $this->collMediaItemFolders = array();
			} else {

				$criteria->add(MediaItemFolderPeer::OWNER_TYPE_ID, $this->id);

				MediaItemFolderPeer::addSelectColumns($criteria);
				$this->collMediaItemFolders = MediaItemFolderPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MediaItemFolderPeer::OWNER_TYPE_ID, $this->id);

				MediaItemFolderPeer::addSelectColumns($criteria);
				if (!isset($this->lastMediaItemFolderCriteria) || !$this->lastMediaItemFolderCriteria->equals($criteria)) {
					$this->collMediaItemFolders = MediaItemFolderPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMediaItemFolderCriteria = $criteria;
		return $this->collMediaItemFolders;
	}

	/**
	 * Returns the number of related MediaItemFolder objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MediaItemFolder objects.
	 * @throws     PropelException
	 */
	public function countMediaItemFolders(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMediaItemFolders === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MediaItemFolderPeer::OWNER_TYPE_ID, $this->id);

				$count = MediaItemFolderPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MediaItemFolderPeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastMediaItemFolderCriteria) || !$this->lastMediaItemFolderCriteria->equals($criteria)) {
					$count = MediaItemFolderPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMediaItemFolders);
				}
			} else {
				$count = count($this->collMediaItemFolders);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MediaItemFolder object to this object
	 * through the MediaItemFolder foreign key attribute.
	 *
	 * @param      MediaItemFolder $l MediaItemFolder
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMediaItemFolder(MediaItemFolder $l)
	{
		if ($this->collMediaItemFolders === null) {
			$this->initMediaItemFolders();
		}
		if (!in_array($l, $this->collMediaItemFolders, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMediaItemFolders, $l);
			$l->setPrivacyNodeType($this);
		}
	}

	/**
	 * Clears out the collMediaItems collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMediaItems()
	 */
	public function clearMediaItems()
	{
		$this->collMediaItems = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMediaItems collection (array).
	 *
	 * By default this just sets the collMediaItems collection to an empty array (like clearcollMediaItems());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMediaItems()
	{
		$this->collMediaItems = array();
	}

	/**
	 * Gets an array of MediaItem objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related MediaItems from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MediaItem[]
	 * @throws     PropelException
	 */
	public function getMediaItems($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMediaItems === null) {
			if ($this->isNew()) {
			   $this->collMediaItems = array();
			} else {

				$criteria->add(MediaItemPeer::OWNER_TYPE_ID, $this->id);

				MediaItemPeer::addSelectColumns($criteria);
				$this->collMediaItems = MediaItemPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MediaItemPeer::OWNER_TYPE_ID, $this->id);

				MediaItemPeer::addSelectColumns($criteria);
				if (!isset($this->lastMediaItemCriteria) || !$this->lastMediaItemCriteria->equals($criteria)) {
					$this->collMediaItems = MediaItemPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMediaItemCriteria = $criteria;
		return $this->collMediaItems;
	}

	/**
	 * Returns the number of related MediaItem objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MediaItem objects.
	 * @throws     PropelException
	 */
	public function countMediaItems(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMediaItems === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MediaItemPeer::OWNER_TYPE_ID, $this->id);

				$count = MediaItemPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MediaItemPeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastMediaItemCriteria) || !$this->lastMediaItemCriteria->equals($criteria)) {
					$count = MediaItemPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMediaItems);
				}
			} else {
				$count = count($this->collMediaItems);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MediaItem object to this object
	 * through the MediaItem foreign key attribute.
	 *
	 * @param      MediaItem $l MediaItem
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMediaItem(MediaItem $l)
	{
		if ($this->collMediaItems === null) {
			$this->initMediaItems();
		}
		if (!in_array($l, $this->collMediaItems, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMediaItems, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MediaItems from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMediaItemsJoinMediaItemFolder($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMediaItems === null) {
			if ($this->isNew()) {
				$this->collMediaItems = array();
			} else {

				$criteria->add(MediaItemPeer::OWNER_TYPE_ID, $this->id);

				$this->collMediaItems = MediaItemPeer::doSelectJoinMediaItemFolder($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MediaItemPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastMediaItemCriteria) || !$this->lastMediaItemCriteria->equals($criteria)) {
				$this->collMediaItems = MediaItemPeer::doSelectJoinMediaItemFolder($criteria, $con, $join_behavior);
			}
		}
		$this->lastMediaItemCriteria = $criteria;

		return $this->collMediaItems;
	}

	/**
	 * Clears out the collRatings collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRatings()
	 */
	public function clearRatings()
	{
		$this->collRatings = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRatings collection (array).
	 *
	 * By default this just sets the collRatings collection to an empty array (like clearcollRatings());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRatings()
	{
		$this->collRatings = array();
	}

	/**
	 * Gets an array of Rating objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related Ratings from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Rating[]
	 * @throws     PropelException
	 */
	public function getRatings($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRatings === null) {
			if ($this->isNew()) {
			   $this->collRatings = array();
			} else {

				$criteria->add(RatingPeer::VISITOR_TYPE_ID, $this->id);

				RatingPeer::addSelectColumns($criteria);
				$this->collRatings = RatingPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RatingPeer::VISITOR_TYPE_ID, $this->id);

				RatingPeer::addSelectColumns($criteria);
				if (!isset($this->lastRatingCriteria) || !$this->lastRatingCriteria->equals($criteria)) {
					$this->collRatings = RatingPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRatingCriteria = $criteria;
		return $this->collRatings;
	}

	/**
	 * Returns the number of related Rating objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Rating objects.
	 * @throws     PropelException
	 */
	public function countRatings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRatings === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RatingPeer::VISITOR_TYPE_ID, $this->id);

				$count = RatingPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RatingPeer::VISITOR_TYPE_ID, $this->id);

				if (!isset($this->lastRatingCriteria) || !$this->lastRatingCriteria->equals($criteria)) {
					$count = RatingPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRatings);
				}
			} else {
				$count = count($this->collRatings);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Rating object to this object
	 * through the Rating foreign key attribute.
	 *
	 * @param      Rating $l Rating
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRating(Rating $l)
	{
		if ($this->collRatings === null) {
			$this->initRatings();
		}
		if (!in_array($l, $this->collRatings, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRatings, $l);
			$l->setPrivacyNodeType($this);
		}
	}

	/**
	 * Clears out the collErrorLogs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addErrorLogs()
	 */
	public function clearErrorLogs()
	{
		$this->collErrorLogs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collErrorLogs collection (array).
	 *
	 * By default this just sets the collErrorLogs collection to an empty array (like clearcollErrorLogs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initErrorLogs()
	{
		$this->collErrorLogs = array();
	}

	/**
	 * Gets an array of ErrorLog objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related ErrorLogs from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ErrorLog[]
	 * @throws     PropelException
	 */
	public function getErrorLogs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collErrorLogs === null) {
			if ($this->isNew()) {
			   $this->collErrorLogs = array();
			} else {

				$criteria->add(ErrorLogPeer::CAUSING_ITEM_TYPE_ID, $this->id);

				ErrorLogPeer::addSelectColumns($criteria);
				$this->collErrorLogs = ErrorLogPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ErrorLogPeer::CAUSING_ITEM_TYPE_ID, $this->id);

				ErrorLogPeer::addSelectColumns($criteria);
				if (!isset($this->lastErrorLogCriteria) || !$this->lastErrorLogCriteria->equals($criteria)) {
					$this->collErrorLogs = ErrorLogPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastErrorLogCriteria = $criteria;
		return $this->collErrorLogs;
	}

	/**
	 * Returns the number of related ErrorLog objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ErrorLog objects.
	 * @throws     PropelException
	 */
	public function countErrorLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collErrorLogs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ErrorLogPeer::CAUSING_ITEM_TYPE_ID, $this->id);

				$count = ErrorLogPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ErrorLogPeer::CAUSING_ITEM_TYPE_ID, $this->id);

				if (!isset($this->lastErrorLogCriteria) || !$this->lastErrorLogCriteria->equals($criteria)) {
					$count = ErrorLogPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collErrorLogs);
				}
			} else {
				$count = count($this->collErrorLogs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ErrorLog object to this object
	 * through the ErrorLog foreign key attribute.
	 *
	 * @param      ErrorLog $l ErrorLog
	 * @return     void
	 * @throws     PropelException
	 */
	public function addErrorLog(ErrorLog $l)
	{
		if ($this->collErrorLogs === null) {
			$this->initErrorLogs();
		}
		if (!in_array($l, $this->collErrorLogs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collErrorLogs, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related ErrorLogs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getErrorLogsJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collErrorLogs === null) {
			if ($this->isNew()) {
				$this->collErrorLogs = array();
			} else {

				$criteria->add(ErrorLogPeer::CAUSING_ITEM_TYPE_ID, $this->id);

				$this->collErrorLogs = ErrorLogPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ErrorLogPeer::CAUSING_ITEM_TYPE_ID, $this->id);

			if (!isset($this->lastErrorLogCriteria) || !$this->lastErrorLogCriteria->equals($criteria)) {
				$this->collErrorLogs = ErrorLogPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastErrorLogCriteria = $criteria;

		return $this->collErrorLogs;
	}

	/**
	 * Clears out the collActionLogs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActionLogs()
	 */
	public function clearActionLogs()
	{
		$this->collActionLogs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActionLogs collection (array).
	 *
	 * By default this just sets the collActionLogs collection to an empty array (like clearcollActionLogs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActionLogs()
	{
		$this->collActionLogs = array();
	}

	/**
	 * Gets an array of ActionLog objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related ActionLogs from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ActionLog[]
	 * @throws     PropelException
	 */
	public function getActionLogs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionLogs === null) {
			if ($this->isNew()) {
			   $this->collActionLogs = array();
			} else {

				$criteria->add(ActionLogPeer::OBJECT_TYPE_ID, $this->id);

				ActionLogPeer::addSelectColumns($criteria);
				$this->collActionLogs = ActionLogPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActionLogPeer::OBJECT_TYPE_ID, $this->id);

				ActionLogPeer::addSelectColumns($criteria);
				if (!isset($this->lastActionLogCriteria) || !$this->lastActionLogCriteria->equals($criteria)) {
					$this->collActionLogs = ActionLogPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActionLogCriteria = $criteria;
		return $this->collActionLogs;
	}

	/**
	 * Returns the number of related ActionLog objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ActionLog objects.
	 * @throws     PropelException
	 */
	public function countActionLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActionLogs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActionLogPeer::OBJECT_TYPE_ID, $this->id);

				$count = ActionLogPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActionLogPeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastActionLogCriteria) || !$this->lastActionLogCriteria->equals($criteria)) {
					$count = ActionLogPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collActionLogs);
				}
			} else {
				$count = count($this->collActionLogs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ActionLog object to this object
	 * through the ActionLog foreign key attribute.
	 *
	 * @param      ActionLog $l ActionLog
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActionLog(ActionLog $l)
	{
		if ($this->collActionLogs === null) {
			$this->initActionLogs();
		}
		if (!in_array($l, $this->collActionLogs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActionLogs, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related ActionLogs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getActionLogsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionLogs === null) {
			if ($this->isNew()) {
				$this->collActionLogs = array();
			} else {

				$criteria->add(ActionLogPeer::OBJECT_TYPE_ID, $this->id);

				$this->collActionLogs = ActionLogPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActionLogPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastActionLogCriteria) || !$this->lastActionLogCriteria->equals($criteria)) {
				$this->collActionLogs = ActionLogPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastActionLogCriteria = $criteria;

		return $this->collActionLogs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related ActionLogs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getActionLogsJoinActionCase($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionLogs === null) {
			if ($this->isNew()) {
				$this->collActionLogs = array();
			} else {

				$criteria->add(ActionLogPeer::OBJECT_TYPE_ID, $this->id);

				$this->collActionLogs = ActionLogPeer::doSelectJoinActionCase($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActionLogPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastActionLogCriteria) || !$this->lastActionLogCriteria->equals($criteria)) {
				$this->collActionLogs = ActionLogPeer::doSelectJoinActionCase($criteria, $con, $join_behavior);
			}
		}
		$this->lastActionLogCriteria = $criteria;

		return $this->collActionLogs;
	}

	/**
	 * Clears out the collServices collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addServices()
	 */
	public function clearServices()
	{
		$this->collServices = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collServices collection (array).
	 *
	 * By default this just sets the collServices collection to an empty array (like clearcollServices());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initServices()
	{
		$this->collServices = array();
	}

	/**
	 * Gets an array of Service objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related Services from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Service[]
	 * @throws     PropelException
	 */
	public function getServices($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServices === null) {
			if ($this->isNew()) {
			   $this->collServices = array();
			} else {

				$criteria->add(ServicePeer::APPLIES_TO_TYPE_ID, $this->id);

				ServicePeer::addSelectColumns($criteria);
				$this->collServices = ServicePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ServicePeer::APPLIES_TO_TYPE_ID, $this->id);

				ServicePeer::addSelectColumns($criteria);
				if (!isset($this->lastServiceCriteria) || !$this->lastServiceCriteria->equals($criteria)) {
					$this->collServices = ServicePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastServiceCriteria = $criteria;
		return $this->collServices;
	}

	/**
	 * Returns the number of related Service objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Service objects.
	 * @throws     PropelException
	 */
	public function countServices(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collServices === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ServicePeer::APPLIES_TO_TYPE_ID, $this->id);

				$count = ServicePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ServicePeer::APPLIES_TO_TYPE_ID, $this->id);

				if (!isset($this->lastServiceCriteria) || !$this->lastServiceCriteria->equals($criteria)) {
					$count = ServicePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collServices);
				}
			} else {
				$count = count($this->collServices);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Service object to this object
	 * through the Service foreign key attribute.
	 *
	 * @param      Service $l Service
	 * @return     void
	 * @throws     PropelException
	 */
	public function addService(Service $l)
	{
		if ($this->collServices === null) {
			$this->initServices();
		}
		if (!in_array($l, $this->collServices, true)) { // only add it if the **same** object is not already associated
			array_push($this->collServices, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Services from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getServicesJoinApplication($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServices === null) {
			if ($this->isNew()) {
				$this->collServices = array();
			} else {

				$criteria->add(ServicePeer::APPLIES_TO_TYPE_ID, $this->id);

				$this->collServices = ServicePeer::doSelectJoinApplication($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServicePeer::APPLIES_TO_TYPE_ID, $this->id);

			if (!isset($this->lastServiceCriteria) || !$this->lastServiceCriteria->equals($criteria)) {
				$this->collServices = ServicePeer::doSelectJoinApplication($criteria, $con, $join_behavior);
			}
		}
		$this->lastServiceCriteria = $criteria;

		return $this->collServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Services from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getServicesJoinMediaItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collServices === null) {
			if ($this->isNew()) {
				$this->collServices = array();
			} else {

				$criteria->add(ServicePeer::APPLIES_TO_TYPE_ID, $this->id);

				$this->collServices = ServicePeer::doSelectJoinMediaItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ServicePeer::APPLIES_TO_TYPE_ID, $this->id);

			if (!isset($this->lastServiceCriteria) || !$this->lastServiceCriteria->equals($criteria)) {
				$this->collServices = ServicePeer::doSelectJoinMediaItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastServiceCriteria = $criteria;

		return $this->collServices;
	}

	/**
	 * Clears out the collMarketingPackages collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMarketingPackages()
	 */
	public function clearMarketingPackages()
	{
		$this->collMarketingPackages = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMarketingPackages collection (array).
	 *
	 * By default this just sets the collMarketingPackages collection to an empty array (like clearcollMarketingPackages());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMarketingPackages()
	{
		$this->collMarketingPackages = array();
	}

	/**
	 * Gets an array of MarketingPackage objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related MarketingPackages from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MarketingPackage[]
	 * @throws     PropelException
	 */
	public function getMarketingPackages($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackages === null) {
			if ($this->isNew()) {
			   $this->collMarketingPackages = array();
			} else {

				$criteria->add(MarketingPackagePeer::APPLIES_TO_TYPE_ID, $this->id);

				MarketingPackagePeer::addSelectColumns($criteria);
				$this->collMarketingPackages = MarketingPackagePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MarketingPackagePeer::APPLIES_TO_TYPE_ID, $this->id);

				MarketingPackagePeer::addSelectColumns($criteria);
				if (!isset($this->lastMarketingPackageCriteria) || !$this->lastMarketingPackageCriteria->equals($criteria)) {
					$this->collMarketingPackages = MarketingPackagePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMarketingPackageCriteria = $criteria;
		return $this->collMarketingPackages;
	}

	/**
	 * Returns the number of related MarketingPackage objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MarketingPackage objects.
	 * @throws     PropelException
	 */
	public function countMarketingPackages(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMarketingPackages === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MarketingPackagePeer::APPLIES_TO_TYPE_ID, $this->id);

				$count = MarketingPackagePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MarketingPackagePeer::APPLIES_TO_TYPE_ID, $this->id);

				if (!isset($this->lastMarketingPackageCriteria) || !$this->lastMarketingPackageCriteria->equals($criteria)) {
					$count = MarketingPackagePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMarketingPackages);
				}
			} else {
				$count = count($this->collMarketingPackages);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MarketingPackage object to this object
	 * through the MarketingPackage foreign key attribute.
	 *
	 * @param      MarketingPackage $l MarketingPackage
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMarketingPackage(MarketingPackage $l)
	{
		if ($this->collMarketingPackages === null) {
			$this->initMarketingPackages();
		}
		if (!in_array($l, $this->collMarketingPackages, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMarketingPackages, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MarketingPackages from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMarketingPackagesJoinApplication($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackages === null) {
			if ($this->isNew()) {
				$this->collMarketingPackages = array();
			} else {

				$criteria->add(MarketingPackagePeer::APPLIES_TO_TYPE_ID, $this->id);

				$this->collMarketingPackages = MarketingPackagePeer::doSelectJoinApplication($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePeer::APPLIES_TO_TYPE_ID, $this->id);

			if (!isset($this->lastMarketingPackageCriteria) || !$this->lastMarketingPackageCriteria->equals($criteria)) {
				$this->collMarketingPackages = MarketingPackagePeer::doSelectJoinApplication($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackageCriteria = $criteria;

		return $this->collMarketingPackages;
	}

	/**
	 * Clears out the collPurchases collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPurchases()
	 */
	public function clearPurchases()
	{
		$this->collPurchases = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPurchases collection (array).
	 *
	 * By default this just sets the collPurchases collection to an empty array (like clearcollPurchases());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPurchases()
	{
		$this->collPurchases = array();
	}

	/**
	 * Gets an array of Purchase objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related Purchases from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Purchase[]
	 * @throws     PropelException
	 */
	public function getPurchases($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPurchases === null) {
			if ($this->isNew()) {
			   $this->collPurchases = array();
			} else {

				$criteria->add(PurchasePeer::BUYER_TYPE_ID, $this->id);

				PurchasePeer::addSelectColumns($criteria);
				$this->collPurchases = PurchasePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PurchasePeer::BUYER_TYPE_ID, $this->id);

				PurchasePeer::addSelectColumns($criteria);
				if (!isset($this->lastPurchaseCriteria) || !$this->lastPurchaseCriteria->equals($criteria)) {
					$this->collPurchases = PurchasePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPurchaseCriteria = $criteria;
		return $this->collPurchases;
	}

	/**
	 * Returns the number of related Purchase objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Purchase objects.
	 * @throws     PropelException
	 */
	public function countPurchases(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPurchases === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PurchasePeer::BUYER_TYPE_ID, $this->id);

				$count = PurchasePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PurchasePeer::BUYER_TYPE_ID, $this->id);

				if (!isset($this->lastPurchaseCriteria) || !$this->lastPurchaseCriteria->equals($criteria)) {
					$count = PurchasePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPurchases);
				}
			} else {
				$count = count($this->collPurchases);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Purchase object to this object
	 * through the Purchase foreign key attribute.
	 *
	 * @param      Purchase $l Purchase
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPurchase(Purchase $l)
	{
		if ($this->collPurchases === null) {
			$this->initPurchases();
		}
		if (!in_array($l, $this->collPurchases, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPurchases, $l);
			$l->setPrivacyNodeType($this);
		}
	}

	/**
	 * Clears out the collPayments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPayments()
	 */
	public function clearPayments()
	{
		$this->collPayments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPayments collection (array).
	 *
	 * By default this just sets the collPayments collection to an empty array (like clearcollPayments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPayments()
	{
		$this->collPayments = array();
	}

	/**
	 * Gets an array of Payment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related Payments from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Payment[]
	 * @throws     PropelException
	 */
	public function getPayments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPayments === null) {
			if ($this->isNew()) {
			   $this->collPayments = array();
			} else {

				$criteria->add(PaymentPeer::PAYER_TYPE_ID, $this->id);

				PaymentPeer::addSelectColumns($criteria);
				$this->collPayments = PaymentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PaymentPeer::PAYER_TYPE_ID, $this->id);

				PaymentPeer::addSelectColumns($criteria);
				if (!isset($this->lastPaymentCriteria) || !$this->lastPaymentCriteria->equals($criteria)) {
					$this->collPayments = PaymentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPaymentCriteria = $criteria;
		return $this->collPayments;
	}

	/**
	 * Returns the number of related Payment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Payment objects.
	 * @throws     PropelException
	 */
	public function countPayments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPayments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PaymentPeer::PAYER_TYPE_ID, $this->id);

				$count = PaymentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PaymentPeer::PAYER_TYPE_ID, $this->id);

				if (!isset($this->lastPaymentCriteria) || !$this->lastPaymentCriteria->equals($criteria)) {
					$count = PaymentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPayments);
				}
			} else {
				$count = count($this->collPayments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Payment object to this object
	 * through the Payment foreign key attribute.
	 *
	 * @param      Payment $l Payment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPayment(Payment $l)
	{
		if ($this->collPayments === null) {
			$this->initPayments();
		}
		if (!in_array($l, $this->collPayments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPayments, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Payments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPaymentsJoinPurchase($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPayments === null) {
			if ($this->isNew()) {
				$this->collPayments = array();
			} else {

				$criteria->add(PaymentPeer::PAYER_TYPE_ID, $this->id);

				$this->collPayments = PaymentPeer::doSelectJoinPurchase($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PaymentPeer::PAYER_TYPE_ID, $this->id);

			if (!isset($this->lastPaymentCriteria) || !$this->lastPaymentCriteria->equals($criteria)) {
				$this->collPayments = PaymentPeer::doSelectJoinPurchase($criteria, $con, $join_behavior);
			}
		}
		$this->lastPaymentCriteria = $criteria;

		return $this->collPayments;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Payments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPaymentsJoinCreditAccount($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPayments === null) {
			if ($this->isNew()) {
				$this->collPayments = array();
			} else {

				$criteria->add(PaymentPeer::PAYER_TYPE_ID, $this->id);

				$this->collPayments = PaymentPeer::doSelectJoinCreditAccount($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PaymentPeer::PAYER_TYPE_ID, $this->id);

			if (!isset($this->lastPaymentCriteria) || !$this->lastPaymentCriteria->equals($criteria)) {
				$this->collPayments = PaymentPeer::doSelectJoinCreditAccount($criteria, $con, $join_behavior);
			}
		}
		$this->lastPaymentCriteria = $criteria;

		return $this->collPayments;
	}

	/**
	 * Clears out the collPaymentTransactions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPaymentTransactions()
	 */
	public function clearPaymentTransactions()
	{
		$this->collPaymentTransactions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPaymentTransactions collection (array).
	 *
	 * By default this just sets the collPaymentTransactions collection to an empty array (like clearcollPaymentTransactions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPaymentTransactions()
	{
		$this->collPaymentTransactions = array();
	}

	/**
	 * Gets an array of PaymentTransaction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related PaymentTransactions from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PaymentTransaction[]
	 * @throws     PropelException
	 */
	public function getPaymentTransactions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPaymentTransactions === null) {
			if ($this->isNew()) {
			   $this->collPaymentTransactions = array();
			} else {

				$criteria->add(PaymentTransactionPeer::PAYER_TYPE_ID, $this->id);

				PaymentTransactionPeer::addSelectColumns($criteria);
				$this->collPaymentTransactions = PaymentTransactionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PaymentTransactionPeer::PAYER_TYPE_ID, $this->id);

				PaymentTransactionPeer::addSelectColumns($criteria);
				if (!isset($this->lastPaymentTransactionCriteria) || !$this->lastPaymentTransactionCriteria->equals($criteria)) {
					$this->collPaymentTransactions = PaymentTransactionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPaymentTransactionCriteria = $criteria;
		return $this->collPaymentTransactions;
	}

	/**
	 * Returns the number of related PaymentTransaction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PaymentTransaction objects.
	 * @throws     PropelException
	 */
	public function countPaymentTransactions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPaymentTransactions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PaymentTransactionPeer::PAYER_TYPE_ID, $this->id);

				$count = PaymentTransactionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PaymentTransactionPeer::PAYER_TYPE_ID, $this->id);

				if (!isset($this->lastPaymentTransactionCriteria) || !$this->lastPaymentTransactionCriteria->equals($criteria)) {
					$count = PaymentTransactionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPaymentTransactions);
				}
			} else {
				$count = count($this->collPaymentTransactions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PaymentTransaction object to this object
	 * through the PaymentTransaction foreign key attribute.
	 *
	 * @param      PaymentTransaction $l PaymentTransaction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPaymentTransaction(PaymentTransaction $l)
	{
		if ($this->collPaymentTransactions === null) {
			$this->initPaymentTransactions();
		}
		if (!in_array($l, $this->collPaymentTransactions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPaymentTransactions, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related PaymentTransactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPaymentTransactionsJoinPayment($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPaymentTransactions === null) {
			if ($this->isNew()) {
				$this->collPaymentTransactions = array();
			} else {

				$criteria->add(PaymentTransactionPeer::PAYER_TYPE_ID, $this->id);

				$this->collPaymentTransactions = PaymentTransactionPeer::doSelectJoinPayment($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PaymentTransactionPeer::PAYER_TYPE_ID, $this->id);

			if (!isset($this->lastPaymentTransactionCriteria) || !$this->lastPaymentTransactionCriteria->equals($criteria)) {
				$this->collPaymentTransactions = PaymentTransactionPeer::doSelectJoinPayment($criteria, $con, $join_behavior);
			}
		}
		$this->lastPaymentTransactionCriteria = $criteria;

		return $this->collPaymentTransactions;
	}

	/**
	 * Clears out the collCreditAccounts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCreditAccounts()
	 */
	public function clearCreditAccounts()
	{
		$this->collCreditAccounts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCreditAccounts collection (array).
	 *
	 * By default this just sets the collCreditAccounts collection to an empty array (like clearcollCreditAccounts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCreditAccounts()
	{
		$this->collCreditAccounts = array();
	}

	/**
	 * Gets an array of CreditAccount objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related CreditAccounts from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CreditAccount[]
	 * @throws     PropelException
	 */
	public function getCreditAccounts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCreditAccounts === null) {
			if ($this->isNew()) {
			   $this->collCreditAccounts = array();
			} else {

				$criteria->add(CreditAccountPeer::HOLDER_TYPE_ID, $this->id);

				CreditAccountPeer::addSelectColumns($criteria);
				$this->collCreditAccounts = CreditAccountPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CreditAccountPeer::HOLDER_TYPE_ID, $this->id);

				CreditAccountPeer::addSelectColumns($criteria);
				if (!isset($this->lastCreditAccountCriteria) || !$this->lastCreditAccountCriteria->equals($criteria)) {
					$this->collCreditAccounts = CreditAccountPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCreditAccountCriteria = $criteria;
		return $this->collCreditAccounts;
	}

	/**
	 * Returns the number of related CreditAccount objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CreditAccount objects.
	 * @throws     PropelException
	 */
	public function countCreditAccounts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCreditAccounts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CreditAccountPeer::HOLDER_TYPE_ID, $this->id);

				$count = CreditAccountPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CreditAccountPeer::HOLDER_TYPE_ID, $this->id);

				if (!isset($this->lastCreditAccountCriteria) || !$this->lastCreditAccountCriteria->equals($criteria)) {
					$count = CreditAccountPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCreditAccounts);
				}
			} else {
				$count = count($this->collCreditAccounts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CreditAccount object to this object
	 * through the CreditAccount foreign key attribute.
	 *
	 * @param      CreditAccount $l CreditAccount
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCreditAccount(CreditAccount $l)
	{
		if ($this->collCreditAccounts === null) {
			$this->initCreditAccounts();
		}
		if (!in_array($l, $this->collCreditAccounts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCreditAccounts, $l);
			$l->setPrivacyNodeType($this);
		}
	}

	/**
	 * Clears out the collJobs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJobs()
	 */
	public function clearJobs()
	{
		$this->collJobs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJobs collection (array).
	 *
	 * By default this just sets the collJobs collection to an empty array (like clearcollJobs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJobs()
	{
		$this->collJobs = array();
	}

	/**
	 * Gets an array of Job objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related Jobs from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Job[]
	 * @throws     PropelException
	 */
	public function getJobs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobs === null) {
			if ($this->isNew()) {
			   $this->collJobs = array();
			} else {

				$criteria->add(JobPeer::OWNER_TYPE_ID, $this->id);

				JobPeer::addSelectColumns($criteria);
				$this->collJobs = JobPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JobPeer::OWNER_TYPE_ID, $this->id);

				JobPeer::addSelectColumns($criteria);
				if (!isset($this->lastJobCriteria) || !$this->lastJobCriteria->equals($criteria)) {
					$this->collJobs = JobPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJobCriteria = $criteria;
		return $this->collJobs;
	}

	/**
	 * Returns the number of related Job objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Job objects.
	 * @throws     PropelException
	 */
	public function countJobs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJobs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JobPeer::OWNER_TYPE_ID, $this->id);

				$count = JobPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JobPeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastJobCriteria) || !$this->lastJobCriteria->equals($criteria)) {
					$count = JobPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJobs);
				}
			} else {
				$count = count($this->collJobs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Job object to this object
	 * through the Job foreign key attribute.
	 *
	 * @param      Job $l Job
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJob(Job $l)
	{
		if ($this->collJobs === null) {
			$this->initJobs();
		}
		if (!in_array($l, $this->collJobs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJobs, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Jobs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getJobsJoinMediaItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobs === null) {
			if ($this->isNew()) {
				$this->collJobs = array();
			} else {

				$criteria->add(JobPeer::OWNER_TYPE_ID, $this->id);

				$this->collJobs = JobPeer::doSelectJoinMediaItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastJobCriteria) || !$this->lastJobCriteria->equals($criteria)) {
				$this->collJobs = JobPeer::doSelectJoinMediaItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobCriteria = $criteria;

		return $this->collJobs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Jobs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getJobsJoinPurchaseItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobs === null) {
			if ($this->isNew()) {
				$this->collJobs = array();
			} else {

				$criteria->add(JobPeer::OWNER_TYPE_ID, $this->id);

				$this->collJobs = JobPeer::doSelectJoinPurchaseItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastJobCriteria) || !$this->lastJobCriteria->equals($criteria)) {
				$this->collJobs = JobPeer::doSelectJoinPurchaseItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobCriteria = $criteria;

		return $this->collJobs;
	}

	/**
	 * Clears out the collHRProfiles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addHRProfiles()
	 */
	public function clearHRProfiles()
	{
		$this->collHRProfiles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collHRProfiles collection (array).
	 *
	 * By default this just sets the collHRProfiles collection to an empty array (like clearcollHRProfiles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initHRProfiles()
	{
		$this->collHRProfiles = array();
	}

	/**
	 * Gets an array of HRProfile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related HRProfiles from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array HRProfile[]
	 * @throws     PropelException
	 */
	public function getHRProfiles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHRProfiles === null) {
			if ($this->isNew()) {
			   $this->collHRProfiles = array();
			} else {

				$criteria->add(HRProfilePeer::OWNER_TYPE_ID, $this->id);

				HRProfilePeer::addSelectColumns($criteria);
				$this->collHRProfiles = HRProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(HRProfilePeer::OWNER_TYPE_ID, $this->id);

				HRProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastHRProfileCriteria) || !$this->lastHRProfileCriteria->equals($criteria)) {
					$this->collHRProfiles = HRProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastHRProfileCriteria = $criteria;
		return $this->collHRProfiles;
	}

	/**
	 * Returns the number of related HRProfile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related HRProfile objects.
	 * @throws     PropelException
	 */
	public function countHRProfiles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collHRProfiles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(HRProfilePeer::OWNER_TYPE_ID, $this->id);

				$count = HRProfilePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(HRProfilePeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastHRProfileCriteria) || !$this->lastHRProfileCriteria->equals($criteria)) {
					$count = HRProfilePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collHRProfiles);
				}
			} else {
				$count = count($this->collHRProfiles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a HRProfile object to this object
	 * through the HRProfile foreign key attribute.
	 *
	 * @param      HRProfile $l HRProfile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHRProfile(HRProfile $l)
	{
		if ($this->collHRProfiles === null) {
			$this->initHRProfiles();
		}
		if (!in_array($l, $this->collHRProfiles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collHRProfiles, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related HRProfiles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getHRProfilesJoinMediaItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHRProfiles === null) {
			if ($this->isNew()) {
				$this->collHRProfiles = array();
			} else {

				$criteria->add(HRProfilePeer::OWNER_TYPE_ID, $this->id);

				$this->collHRProfiles = HRProfilePeer::doSelectJoinMediaItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HRProfilePeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastHRProfileCriteria) || !$this->lastHRProfileCriteria->equals($criteria)) {
				$this->collHRProfiles = HRProfilePeer::doSelectJoinMediaItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastHRProfileCriteria = $criteria;

		return $this->collHRProfiles;
	}

	/**
	 * Clears out the collUserBookmarks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserBookmarks()
	 */
	public function clearUserBookmarks()
	{
		$this->collUserBookmarks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserBookmarks collection (array).
	 *
	 * By default this just sets the collUserBookmarks collection to an empty array (like clearcollUserBookmarks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserBookmarks()
	{
		$this->collUserBookmarks = array();
	}

	/**
	 * Gets an array of UserBookmark objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related UserBookmarks from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserBookmark[]
	 * @throws     PropelException
	 */
	public function getUserBookmarks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserBookmarks === null) {
			if ($this->isNew()) {
			   $this->collUserBookmarks = array();
			} else {

				$criteria->add(UserBookmarkPeer::ITEM_TYPE_ID, $this->id);

				UserBookmarkPeer::addSelectColumns($criteria);
				$this->collUserBookmarks = UserBookmarkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserBookmarkPeer::ITEM_TYPE_ID, $this->id);

				UserBookmarkPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserBookmarkCriteria) || !$this->lastUserBookmarkCriteria->equals($criteria)) {
					$this->collUserBookmarks = UserBookmarkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserBookmarkCriteria = $criteria;
		return $this->collUserBookmarks;
	}

	/**
	 * Returns the number of related UserBookmark objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserBookmark objects.
	 * @throws     PropelException
	 */
	public function countUserBookmarks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserBookmarks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserBookmarkPeer::ITEM_TYPE_ID, $this->id);

				$count = UserBookmarkPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserBookmarkPeer::ITEM_TYPE_ID, $this->id);

				if (!isset($this->lastUserBookmarkCriteria) || !$this->lastUserBookmarkCriteria->equals($criteria)) {
					$count = UserBookmarkPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUserBookmarks);
				}
			} else {
				$count = count($this->collUserBookmarks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserBookmark object to this object
	 * through the UserBookmark foreign key attribute.
	 *
	 * @param      UserBookmark $l UserBookmark
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserBookmark(UserBookmark $l)
	{
		if ($this->collUserBookmarks === null) {
			$this->initUserBookmarks();
		}
		if (!in_array($l, $this->collUserBookmarks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserBookmarks, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related UserBookmarks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getUserBookmarksJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserBookmarks === null) {
			if ($this->isNew()) {
				$this->collUserBookmarks = array();
			} else {

				$criteria->add(UserBookmarkPeer::ITEM_TYPE_ID, $this->id);

				$this->collUserBookmarks = UserBookmarkPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserBookmarkPeer::ITEM_TYPE_ID, $this->id);

			if (!isset($this->lastUserBookmarkCriteria) || !$this->lastUserBookmarkCriteria->equals($criteria)) {
				$this->collUserBookmarks = UserBookmarkPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserBookmarkCriteria = $criteria;

		return $this->collUserBookmarks;
	}

	/**
	 * Clears out the collInviteFriendsRelatedByInviterTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addInviteFriendsRelatedByInviterTypeId()
	 */
	public function clearInviteFriendsRelatedByInviterTypeId()
	{
		$this->collInviteFriendsRelatedByInviterTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collInviteFriendsRelatedByInviterTypeId collection (array).
	 *
	 * By default this just sets the collInviteFriendsRelatedByInviterTypeId collection to an empty array (like clearcollInviteFriendsRelatedByInviterTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initInviteFriendsRelatedByInviterTypeId()
	{
		$this->collInviteFriendsRelatedByInviterTypeId = array();
	}

	/**
	 * Gets an array of InviteFriend objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related InviteFriendsRelatedByInviterTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array InviteFriend[]
	 * @throws     PropelException
	 */
	public function getInviteFriendsRelatedByInviterTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInviteFriendsRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
			   $this->collInviteFriendsRelatedByInviterTypeId = array();
			} else {

				$criteria->add(InviteFriendPeer::INVITER_TYPE_ID, $this->id);

				InviteFriendPeer::addSelectColumns($criteria);
				$this->collInviteFriendsRelatedByInviterTypeId = InviteFriendPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(InviteFriendPeer::INVITER_TYPE_ID, $this->id);

				InviteFriendPeer::addSelectColumns($criteria);
				if (!isset($this->lastInviteFriendRelatedByInviterTypeIdCriteria) || !$this->lastInviteFriendRelatedByInviterTypeIdCriteria->equals($criteria)) {
					$this->collInviteFriendsRelatedByInviterTypeId = InviteFriendPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastInviteFriendRelatedByInviterTypeIdCriteria = $criteria;
		return $this->collInviteFriendsRelatedByInviterTypeId;
	}

	/**
	 * Returns the number of related InviteFriend objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related InviteFriend objects.
	 * @throws     PropelException
	 */
	public function countInviteFriendsRelatedByInviterTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collInviteFriendsRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(InviteFriendPeer::INVITER_TYPE_ID, $this->id);

				$count = InviteFriendPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(InviteFriendPeer::INVITER_TYPE_ID, $this->id);

				if (!isset($this->lastInviteFriendRelatedByInviterTypeIdCriteria) || !$this->lastInviteFriendRelatedByInviterTypeIdCriteria->equals($criteria)) {
					$count = InviteFriendPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collInviteFriendsRelatedByInviterTypeId);
				}
			} else {
				$count = count($this->collInviteFriendsRelatedByInviterTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a InviteFriend object to this object
	 * through the InviteFriend foreign key attribute.
	 *
	 * @param      InviteFriend $l InviteFriend
	 * @return     void
	 * @throws     PropelException
	 */
	public function addInviteFriendRelatedByInviterTypeId(InviteFriend $l)
	{
		if ($this->collInviteFriendsRelatedByInviterTypeId === null) {
			$this->initInviteFriendsRelatedByInviterTypeId();
		}
		if (!in_array($l, $this->collInviteFriendsRelatedByInviterTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collInviteFriendsRelatedByInviterTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByInviterTypeId($this);
		}
	}

	/**
	 * Clears out the collInviteFriendsRelatedByInvitedToTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addInviteFriendsRelatedByInvitedToTypeId()
	 */
	public function clearInviteFriendsRelatedByInvitedToTypeId()
	{
		$this->collInviteFriendsRelatedByInvitedToTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collInviteFriendsRelatedByInvitedToTypeId collection (array).
	 *
	 * By default this just sets the collInviteFriendsRelatedByInvitedToTypeId collection to an empty array (like clearcollInviteFriendsRelatedByInvitedToTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initInviteFriendsRelatedByInvitedToTypeId()
	{
		$this->collInviteFriendsRelatedByInvitedToTypeId = array();
	}

	/**
	 * Gets an array of InviteFriend objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related InviteFriendsRelatedByInvitedToTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array InviteFriend[]
	 * @throws     PropelException
	 */
	public function getInviteFriendsRelatedByInvitedToTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInviteFriendsRelatedByInvitedToTypeId === null) {
			if ($this->isNew()) {
			   $this->collInviteFriendsRelatedByInvitedToTypeId = array();
			} else {

				$criteria->add(InviteFriendPeer::INVITED_TO_TYPE_ID, $this->id);

				InviteFriendPeer::addSelectColumns($criteria);
				$this->collInviteFriendsRelatedByInvitedToTypeId = InviteFriendPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(InviteFriendPeer::INVITED_TO_TYPE_ID, $this->id);

				InviteFriendPeer::addSelectColumns($criteria);
				if (!isset($this->lastInviteFriendRelatedByInvitedToTypeIdCriteria) || !$this->lastInviteFriendRelatedByInvitedToTypeIdCriteria->equals($criteria)) {
					$this->collInviteFriendsRelatedByInvitedToTypeId = InviteFriendPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastInviteFriendRelatedByInvitedToTypeIdCriteria = $criteria;
		return $this->collInviteFriendsRelatedByInvitedToTypeId;
	}

	/**
	 * Returns the number of related InviteFriend objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related InviteFriend objects.
	 * @throws     PropelException
	 */
	public function countInviteFriendsRelatedByInvitedToTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collInviteFriendsRelatedByInvitedToTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(InviteFriendPeer::INVITED_TO_TYPE_ID, $this->id);

				$count = InviteFriendPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(InviteFriendPeer::INVITED_TO_TYPE_ID, $this->id);

				if (!isset($this->lastInviteFriendRelatedByInvitedToTypeIdCriteria) || !$this->lastInviteFriendRelatedByInvitedToTypeIdCriteria->equals($criteria)) {
					$count = InviteFriendPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collInviteFriendsRelatedByInvitedToTypeId);
				}
			} else {
				$count = count($this->collInviteFriendsRelatedByInvitedToTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a InviteFriend object to this object
	 * through the InviteFriend foreign key attribute.
	 *
	 * @param      InviteFriend $l InviteFriend
	 * @return     void
	 * @throws     PropelException
	 */
	public function addInviteFriendRelatedByInvitedToTypeId(InviteFriend $l)
	{
		if ($this->collInviteFriendsRelatedByInvitedToTypeId === null) {
			$this->initInviteFriendsRelatedByInvitedToTypeId();
		}
		if (!in_array($l, $this->collInviteFriendsRelatedByInvitedToTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collInviteFriendsRelatedByInvitedToTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByInvitedToTypeId($this);
		}
	}

	/**
	 * Clears out the collGroupMembershipsRelatedByInviterTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGroupMembershipsRelatedByInviterTypeId()
	 */
	public function clearGroupMembershipsRelatedByInviterTypeId()
	{
		$this->collGroupMembershipsRelatedByInviterTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGroupMembershipsRelatedByInviterTypeId collection (array).
	 *
	 * By default this just sets the collGroupMembershipsRelatedByInviterTypeId collection to an empty array (like clearcollGroupMembershipsRelatedByInviterTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGroupMembershipsRelatedByInviterTypeId()
	{
		$this->collGroupMembershipsRelatedByInviterTypeId = array();
	}

	/**
	 * Gets an array of GroupMembership objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related GroupMembershipsRelatedByInviterTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GroupMembership[]
	 * @throws     PropelException
	 */
	public function getGroupMembershipsRelatedByInviterTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMembershipsRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
			   $this->collGroupMembershipsRelatedByInviterTypeId = array();
			} else {

				$criteria->add(GroupMembershipPeer::INVITER_TYPE_ID, $this->id);

				GroupMembershipPeer::addSelectColumns($criteria);
				$this->collGroupMembershipsRelatedByInviterTypeId = GroupMembershipPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GroupMembershipPeer::INVITER_TYPE_ID, $this->id);

				GroupMembershipPeer::addSelectColumns($criteria);
				if (!isset($this->lastGroupMembershipRelatedByInviterTypeIdCriteria) || !$this->lastGroupMembershipRelatedByInviterTypeIdCriteria->equals($criteria)) {
					$this->collGroupMembershipsRelatedByInviterTypeId = GroupMembershipPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGroupMembershipRelatedByInviterTypeIdCriteria = $criteria;
		return $this->collGroupMembershipsRelatedByInviterTypeId;
	}

	/**
	 * Returns the number of related GroupMembership objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GroupMembership objects.
	 * @throws     PropelException
	 */
	public function countGroupMembershipsRelatedByInviterTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGroupMembershipsRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GroupMembershipPeer::INVITER_TYPE_ID, $this->id);

				$count = GroupMembershipPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GroupMembershipPeer::INVITER_TYPE_ID, $this->id);

				if (!isset($this->lastGroupMembershipRelatedByInviterTypeIdCriteria) || !$this->lastGroupMembershipRelatedByInviterTypeIdCriteria->equals($criteria)) {
					$count = GroupMembershipPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collGroupMembershipsRelatedByInviterTypeId);
				}
			} else {
				$count = count($this->collGroupMembershipsRelatedByInviterTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GroupMembership object to this object
	 * through the GroupMembership foreign key attribute.
	 *
	 * @param      GroupMembership $l GroupMembership
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGroupMembershipRelatedByInviterTypeId(GroupMembership $l)
	{
		if ($this->collGroupMembershipsRelatedByInviterTypeId === null) {
			$this->initGroupMembershipsRelatedByInviterTypeId();
		}
		if (!in_array($l, $this->collGroupMembershipsRelatedByInviterTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGroupMembershipsRelatedByInviterTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByInviterTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related GroupMembershipsRelatedByInviterTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getGroupMembershipsRelatedByInviterTypeIdJoinGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMembershipsRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
				$this->collGroupMembershipsRelatedByInviterTypeId = array();
			} else {

				$criteria->add(GroupMembershipPeer::INVITER_TYPE_ID, $this->id);

				$this->collGroupMembershipsRelatedByInviterTypeId = GroupMembershipPeer::doSelectJoinGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupMembershipPeer::INVITER_TYPE_ID, $this->id);

			if (!isset($this->lastGroupMembershipRelatedByInviterTypeIdCriteria) || !$this->lastGroupMembershipRelatedByInviterTypeIdCriteria->equals($criteria)) {
				$this->collGroupMembershipsRelatedByInviterTypeId = GroupMembershipPeer::doSelectJoinGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupMembershipRelatedByInviterTypeIdCriteria = $criteria;

		return $this->collGroupMembershipsRelatedByInviterTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related GroupMembershipsRelatedByInviterTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getGroupMembershipsRelatedByInviterTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMembershipsRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
				$this->collGroupMembershipsRelatedByInviterTypeId = array();
			} else {

				$criteria->add(GroupMembershipPeer::INVITER_TYPE_ID, $this->id);

				$this->collGroupMembershipsRelatedByInviterTypeId = GroupMembershipPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupMembershipPeer::INVITER_TYPE_ID, $this->id);

			if (!isset($this->lastGroupMembershipRelatedByInviterTypeIdCriteria) || !$this->lastGroupMembershipRelatedByInviterTypeIdCriteria->equals($criteria)) {
				$this->collGroupMembershipsRelatedByInviterTypeId = GroupMembershipPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupMembershipRelatedByInviterTypeIdCriteria = $criteria;

		return $this->collGroupMembershipsRelatedByInviterTypeId;
	}

	/**
	 * Clears out the collGroupMembershipsRelatedByObjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGroupMembershipsRelatedByObjectTypeId()
	 */
	public function clearGroupMembershipsRelatedByObjectTypeId()
	{
		$this->collGroupMembershipsRelatedByObjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGroupMembershipsRelatedByObjectTypeId collection (array).
	 *
	 * By default this just sets the collGroupMembershipsRelatedByObjectTypeId collection to an empty array (like clearcollGroupMembershipsRelatedByObjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGroupMembershipsRelatedByObjectTypeId()
	{
		$this->collGroupMembershipsRelatedByObjectTypeId = array();
	}

	/**
	 * Gets an array of GroupMembership objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related GroupMembershipsRelatedByObjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GroupMembership[]
	 * @throws     PropelException
	 */
	public function getGroupMembershipsRelatedByObjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMembershipsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collGroupMembershipsRelatedByObjectTypeId = array();
			} else {

				$criteria->add(GroupMembershipPeer::OBJECT_TYPE_ID, $this->id);

				GroupMembershipPeer::addSelectColumns($criteria);
				$this->collGroupMembershipsRelatedByObjectTypeId = GroupMembershipPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GroupMembershipPeer::OBJECT_TYPE_ID, $this->id);

				GroupMembershipPeer::addSelectColumns($criteria);
				if (!isset($this->lastGroupMembershipRelatedByObjectTypeIdCriteria) || !$this->lastGroupMembershipRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$this->collGroupMembershipsRelatedByObjectTypeId = GroupMembershipPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGroupMembershipRelatedByObjectTypeIdCriteria = $criteria;
		return $this->collGroupMembershipsRelatedByObjectTypeId;
	}

	/**
	 * Returns the number of related GroupMembership objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GroupMembership objects.
	 * @throws     PropelException
	 */
	public function countGroupMembershipsRelatedByObjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGroupMembershipsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GroupMembershipPeer::OBJECT_TYPE_ID, $this->id);

				$count = GroupMembershipPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GroupMembershipPeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastGroupMembershipRelatedByObjectTypeIdCriteria) || !$this->lastGroupMembershipRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$count = GroupMembershipPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collGroupMembershipsRelatedByObjectTypeId);
				}
			} else {
				$count = count($this->collGroupMembershipsRelatedByObjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GroupMembership object to this object
	 * through the GroupMembership foreign key attribute.
	 *
	 * @param      GroupMembership $l GroupMembership
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGroupMembershipRelatedByObjectTypeId(GroupMembership $l)
	{
		if ($this->collGroupMembershipsRelatedByObjectTypeId === null) {
			$this->initGroupMembershipsRelatedByObjectTypeId();
		}
		if (!in_array($l, $this->collGroupMembershipsRelatedByObjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGroupMembershipsRelatedByObjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByObjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related GroupMembershipsRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getGroupMembershipsRelatedByObjectTypeIdJoinGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMembershipsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collGroupMembershipsRelatedByObjectTypeId = array();
			} else {

				$criteria->add(GroupMembershipPeer::OBJECT_TYPE_ID, $this->id);

				$this->collGroupMembershipsRelatedByObjectTypeId = GroupMembershipPeer::doSelectJoinGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupMembershipPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastGroupMembershipRelatedByObjectTypeIdCriteria) || !$this->lastGroupMembershipRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collGroupMembershipsRelatedByObjectTypeId = GroupMembershipPeer::doSelectJoinGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupMembershipRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collGroupMembershipsRelatedByObjectTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related GroupMembershipsRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getGroupMembershipsRelatedByObjectTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMembershipsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collGroupMembershipsRelatedByObjectTypeId = array();
			} else {

				$criteria->add(GroupMembershipPeer::OBJECT_TYPE_ID, $this->id);

				$this->collGroupMembershipsRelatedByObjectTypeId = GroupMembershipPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupMembershipPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastGroupMembershipRelatedByObjectTypeIdCriteria) || !$this->lastGroupMembershipRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collGroupMembershipsRelatedByObjectTypeId = GroupMembershipPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupMembershipRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collGroupMembershipsRelatedByObjectTypeId;
	}

	/**
	 * Clears out the collStatusUpdates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStatusUpdates()
	 */
	public function clearStatusUpdates()
	{
		$this->collStatusUpdates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStatusUpdates collection (array).
	 *
	 * By default this just sets the collStatusUpdates collection to an empty array (like clearcollStatusUpdates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStatusUpdates()
	{
		$this->collStatusUpdates = array();
	}

	/**
	 * Gets an array of StatusUpdate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related StatusUpdates from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array StatusUpdate[]
	 * @throws     PropelException
	 */
	public function getStatusUpdates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStatusUpdates === null) {
			if ($this->isNew()) {
			   $this->collStatusUpdates = array();
			} else {

				$criteria->add(StatusUpdatePeer::OBJECT_TYPE_ID, $this->id);

				StatusUpdatePeer::addSelectColumns($criteria);
				$this->collStatusUpdates = StatusUpdatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StatusUpdatePeer::OBJECT_TYPE_ID, $this->id);

				StatusUpdatePeer::addSelectColumns($criteria);
				if (!isset($this->lastStatusUpdateCriteria) || !$this->lastStatusUpdateCriteria->equals($criteria)) {
					$this->collStatusUpdates = StatusUpdatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStatusUpdateCriteria = $criteria;
		return $this->collStatusUpdates;
	}

	/**
	 * Returns the number of related StatusUpdate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related StatusUpdate objects.
	 * @throws     PropelException
	 */
	public function countStatusUpdates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStatusUpdates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StatusUpdatePeer::OBJECT_TYPE_ID, $this->id);

				$count = StatusUpdatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StatusUpdatePeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastStatusUpdateCriteria) || !$this->lastStatusUpdateCriteria->equals($criteria)) {
					$count = StatusUpdatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collStatusUpdates);
				}
			} else {
				$count = count($this->collStatusUpdates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a StatusUpdate object to this object
	 * through the StatusUpdate foreign key attribute.
	 *
	 * @param      StatusUpdate $l StatusUpdate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStatusUpdate(StatusUpdate $l)
	{
		if ($this->collStatusUpdates === null) {
			$this->initStatusUpdates();
		}
		if (!in_array($l, $this->collStatusUpdates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStatusUpdates, $l);
			$l->setPrivacyNodeType($this);
		}
	}

	/**
	 * Clears out the collLocationUpdates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLocationUpdates()
	 */
	public function clearLocationUpdates()
	{
		$this->collLocationUpdates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLocationUpdates collection (array).
	 *
	 * By default this just sets the collLocationUpdates collection to an empty array (like clearcollLocationUpdates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLocationUpdates()
	{
		$this->collLocationUpdates = array();
	}

	/**
	 * Gets an array of LocationUpdate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related LocationUpdates from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array LocationUpdate[]
	 * @throws     PropelException
	 */
	public function getLocationUpdates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLocationUpdates === null) {
			if ($this->isNew()) {
			   $this->collLocationUpdates = array();
			} else {

				$criteria->add(LocationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				LocationUpdatePeer::addSelectColumns($criteria);
				$this->collLocationUpdates = LocationUpdatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LocationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				LocationUpdatePeer::addSelectColumns($criteria);
				if (!isset($this->lastLocationUpdateCriteria) || !$this->lastLocationUpdateCriteria->equals($criteria)) {
					$this->collLocationUpdates = LocationUpdatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLocationUpdateCriteria = $criteria;
		return $this->collLocationUpdates;
	}

	/**
	 * Returns the number of related LocationUpdate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related LocationUpdate objects.
	 * @throws     PropelException
	 */
	public function countLocationUpdates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLocationUpdates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LocationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				$count = LocationUpdatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LocationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastLocationUpdateCriteria) || !$this->lastLocationUpdateCriteria->equals($criteria)) {
					$count = LocationUpdatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collLocationUpdates);
				}
			} else {
				$count = count($this->collLocationUpdates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a LocationUpdate object to this object
	 * through the LocationUpdate foreign key attribute.
	 *
	 * @param      LocationUpdate $l LocationUpdate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLocationUpdate(LocationUpdate $l)
	{
		if ($this->collLocationUpdates === null) {
			$this->initLocationUpdates();
		}
		if (!in_array($l, $this->collLocationUpdates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLocationUpdates, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related LocationUpdates from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getLocationUpdatesJoinGeonameCityRelatedByState($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLocationUpdates === null) {
			if ($this->isNew()) {
				$this->collLocationUpdates = array();
			} else {

				$criteria->add(LocationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				$this->collLocationUpdates = LocationUpdatePeer::doSelectJoinGeonameCityRelatedByState($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LocationUpdatePeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastLocationUpdateCriteria) || !$this->lastLocationUpdateCriteria->equals($criteria)) {
				$this->collLocationUpdates = LocationUpdatePeer::doSelectJoinGeonameCityRelatedByState($criteria, $con, $join_behavior);
			}
		}
		$this->lastLocationUpdateCriteria = $criteria;

		return $this->collLocationUpdates;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related LocationUpdates from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getLocationUpdatesJoinGeonameCityRelatedByCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLocationUpdates === null) {
			if ($this->isNew()) {
				$this->collLocationUpdates = array();
			} else {

				$criteria->add(LocationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				$this->collLocationUpdates = LocationUpdatePeer::doSelectJoinGeonameCityRelatedByCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LocationUpdatePeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastLocationUpdateCriteria) || !$this->lastLocationUpdateCriteria->equals($criteria)) {
				$this->collLocationUpdates = LocationUpdatePeer::doSelectJoinGeonameCityRelatedByCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastLocationUpdateCriteria = $criteria;

		return $this->collLocationUpdates;
	}

	/**
	 * Clears out the collCommentsRelatedByItemTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCommentsRelatedByItemTypeId()
	 */
	public function clearCommentsRelatedByItemTypeId()
	{
		$this->collCommentsRelatedByItemTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCommentsRelatedByItemTypeId collection (array).
	 *
	 * By default this just sets the collCommentsRelatedByItemTypeId collection to an empty array (like clearcollCommentsRelatedByItemTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCommentsRelatedByItemTypeId()
	{
		$this->collCommentsRelatedByItemTypeId = array();
	}

	/**
	 * Gets an array of Comment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related CommentsRelatedByItemTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Comment[]
	 * @throws     PropelException
	 */
	public function getCommentsRelatedByItemTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCommentsRelatedByItemTypeId === null) {
			if ($this->isNew()) {
			   $this->collCommentsRelatedByItemTypeId = array();
			} else {

				$criteria->add(CommentPeer::ITEM_TYPE_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				$this->collCommentsRelatedByItemTypeId = CommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentPeer::ITEM_TYPE_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentRelatedByItemTypeIdCriteria) || !$this->lastCommentRelatedByItemTypeIdCriteria->equals($criteria)) {
					$this->collCommentsRelatedByItemTypeId = CommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentRelatedByItemTypeIdCriteria = $criteria;
		return $this->collCommentsRelatedByItemTypeId;
	}

	/**
	 * Returns the number of related Comment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Comment objects.
	 * @throws     PropelException
	 */
	public function countCommentsRelatedByItemTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCommentsRelatedByItemTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommentPeer::ITEM_TYPE_ID, $this->id);

				$count = CommentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommentPeer::ITEM_TYPE_ID, $this->id);

				if (!isset($this->lastCommentRelatedByItemTypeIdCriteria) || !$this->lastCommentRelatedByItemTypeIdCriteria->equals($criteria)) {
					$count = CommentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCommentsRelatedByItemTypeId);
				}
			} else {
				$count = count($this->collCommentsRelatedByItemTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Comment object to this object
	 * through the Comment foreign key attribute.
	 *
	 * @param      Comment $l Comment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCommentRelatedByItemTypeId(Comment $l)
	{
		if ($this->collCommentsRelatedByItemTypeId === null) {
			$this->initCommentsRelatedByItemTypeId();
		}
		if (!in_array($l, $this->collCommentsRelatedByItemTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCommentsRelatedByItemTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByItemTypeId($this);
		}
	}

	/**
	 * Clears out the collCommentsRelatedByCommenterTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCommentsRelatedByCommenterTypeId()
	 */
	public function clearCommentsRelatedByCommenterTypeId()
	{
		$this->collCommentsRelatedByCommenterTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCommentsRelatedByCommenterTypeId collection (array).
	 *
	 * By default this just sets the collCommentsRelatedByCommenterTypeId collection to an empty array (like clearcollCommentsRelatedByCommenterTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCommentsRelatedByCommenterTypeId()
	{
		$this->collCommentsRelatedByCommenterTypeId = array();
	}

	/**
	 * Gets an array of Comment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related CommentsRelatedByCommenterTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Comment[]
	 * @throws     PropelException
	 */
	public function getCommentsRelatedByCommenterTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCommentsRelatedByCommenterTypeId === null) {
			if ($this->isNew()) {
			   $this->collCommentsRelatedByCommenterTypeId = array();
			} else {

				$criteria->add(CommentPeer::COMMENTER_TYPE_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				$this->collCommentsRelatedByCommenterTypeId = CommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentPeer::COMMENTER_TYPE_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentRelatedByCommenterTypeIdCriteria) || !$this->lastCommentRelatedByCommenterTypeIdCriteria->equals($criteria)) {
					$this->collCommentsRelatedByCommenterTypeId = CommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentRelatedByCommenterTypeIdCriteria = $criteria;
		return $this->collCommentsRelatedByCommenterTypeId;
	}

	/**
	 * Returns the number of related Comment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Comment objects.
	 * @throws     PropelException
	 */
	public function countCommentsRelatedByCommenterTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCommentsRelatedByCommenterTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommentPeer::COMMENTER_TYPE_ID, $this->id);

				$count = CommentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommentPeer::COMMENTER_TYPE_ID, $this->id);

				if (!isset($this->lastCommentRelatedByCommenterTypeIdCriteria) || !$this->lastCommentRelatedByCommenterTypeIdCriteria->equals($criteria)) {
					$count = CommentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCommentsRelatedByCommenterTypeId);
				}
			} else {
				$count = count($this->collCommentsRelatedByCommenterTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Comment object to this object
	 * through the Comment foreign key attribute.
	 *
	 * @param      Comment $l Comment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCommentRelatedByCommenterTypeId(Comment $l)
	{
		if ($this->collCommentsRelatedByCommenterTypeId === null) {
			$this->initCommentsRelatedByCommenterTypeId();
		}
		if (!in_array($l, $this->collCommentsRelatedByCommenterTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCommentsRelatedByCommenterTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByCommenterTypeId($this);
		}
	}

	/**
	 * Clears out the collActionCasesRelatedByIssuerTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActionCasesRelatedByIssuerTypeId()
	 */
	public function clearActionCasesRelatedByIssuerTypeId()
	{
		$this->collActionCasesRelatedByIssuerTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActionCasesRelatedByIssuerTypeId collection (array).
	 *
	 * By default this just sets the collActionCasesRelatedByIssuerTypeId collection to an empty array (like clearcollActionCasesRelatedByIssuerTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActionCasesRelatedByIssuerTypeId()
	{
		$this->collActionCasesRelatedByIssuerTypeId = array();
	}

	/**
	 * Gets an array of ActionCase objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related ActionCasesRelatedByIssuerTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ActionCase[]
	 * @throws     PropelException
	 */
	public function getActionCasesRelatedByIssuerTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionCasesRelatedByIssuerTypeId === null) {
			if ($this->isNew()) {
			   $this->collActionCasesRelatedByIssuerTypeId = array();
			} else {

				$criteria->add(ActionCasePeer::ISSUER_TYPE_ID, $this->id);

				ActionCasePeer::addSelectColumns($criteria);
				$this->collActionCasesRelatedByIssuerTypeId = ActionCasePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActionCasePeer::ISSUER_TYPE_ID, $this->id);

				ActionCasePeer::addSelectColumns($criteria);
				if (!isset($this->lastActionCaseRelatedByIssuerTypeIdCriteria) || !$this->lastActionCaseRelatedByIssuerTypeIdCriteria->equals($criteria)) {
					$this->collActionCasesRelatedByIssuerTypeId = ActionCasePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActionCaseRelatedByIssuerTypeIdCriteria = $criteria;
		return $this->collActionCasesRelatedByIssuerTypeId;
	}

	/**
	 * Returns the number of related ActionCase objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ActionCase objects.
	 * @throws     PropelException
	 */
	public function countActionCasesRelatedByIssuerTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActionCasesRelatedByIssuerTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActionCasePeer::ISSUER_TYPE_ID, $this->id);

				$count = ActionCasePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActionCasePeer::ISSUER_TYPE_ID, $this->id);

				if (!isset($this->lastActionCaseRelatedByIssuerTypeIdCriteria) || !$this->lastActionCaseRelatedByIssuerTypeIdCriteria->equals($criteria)) {
					$count = ActionCasePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collActionCasesRelatedByIssuerTypeId);
				}
			} else {
				$count = count($this->collActionCasesRelatedByIssuerTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ActionCase object to this object
	 * through the ActionCase foreign key attribute.
	 *
	 * @param      ActionCase $l ActionCase
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActionCaseRelatedByIssuerTypeId(ActionCase $l)
	{
		if ($this->collActionCasesRelatedByIssuerTypeId === null) {
			$this->initActionCasesRelatedByIssuerTypeId();
		}
		if (!in_array($l, $this->collActionCasesRelatedByIssuerTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActionCasesRelatedByIssuerTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByIssuerTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related ActionCasesRelatedByIssuerTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getActionCasesRelatedByIssuerTypeIdJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionCasesRelatedByIssuerTypeId === null) {
			if ($this->isNew()) {
				$this->collActionCasesRelatedByIssuerTypeId = array();
			} else {

				$criteria->add(ActionCasePeer::ISSUER_TYPE_ID, $this->id);

				$this->collActionCasesRelatedByIssuerTypeId = ActionCasePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActionCasePeer::ISSUER_TYPE_ID, $this->id);

			if (!isset($this->lastActionCaseRelatedByIssuerTypeIdCriteria) || !$this->lastActionCaseRelatedByIssuerTypeIdCriteria->equals($criteria)) {
				$this->collActionCasesRelatedByIssuerTypeId = ActionCasePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastActionCaseRelatedByIssuerTypeIdCriteria = $criteria;

		return $this->collActionCasesRelatedByIssuerTypeId;
	}

	/**
	 * Clears out the collActionCasesRelatedByTargetTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActionCasesRelatedByTargetTypeId()
	 */
	public function clearActionCasesRelatedByTargetTypeId()
	{
		$this->collActionCasesRelatedByTargetTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActionCasesRelatedByTargetTypeId collection (array).
	 *
	 * By default this just sets the collActionCasesRelatedByTargetTypeId collection to an empty array (like clearcollActionCasesRelatedByTargetTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActionCasesRelatedByTargetTypeId()
	{
		$this->collActionCasesRelatedByTargetTypeId = array();
	}

	/**
	 * Gets an array of ActionCase objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related ActionCasesRelatedByTargetTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ActionCase[]
	 * @throws     PropelException
	 */
	public function getActionCasesRelatedByTargetTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionCasesRelatedByTargetTypeId === null) {
			if ($this->isNew()) {
			   $this->collActionCasesRelatedByTargetTypeId = array();
			} else {

				$criteria->add(ActionCasePeer::TARGET_TYPE_ID, $this->id);

				ActionCasePeer::addSelectColumns($criteria);
				$this->collActionCasesRelatedByTargetTypeId = ActionCasePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActionCasePeer::TARGET_TYPE_ID, $this->id);

				ActionCasePeer::addSelectColumns($criteria);
				if (!isset($this->lastActionCaseRelatedByTargetTypeIdCriteria) || !$this->lastActionCaseRelatedByTargetTypeIdCriteria->equals($criteria)) {
					$this->collActionCasesRelatedByTargetTypeId = ActionCasePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActionCaseRelatedByTargetTypeIdCriteria = $criteria;
		return $this->collActionCasesRelatedByTargetTypeId;
	}

	/**
	 * Returns the number of related ActionCase objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ActionCase objects.
	 * @throws     PropelException
	 */
	public function countActionCasesRelatedByTargetTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActionCasesRelatedByTargetTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActionCasePeer::TARGET_TYPE_ID, $this->id);

				$count = ActionCasePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActionCasePeer::TARGET_TYPE_ID, $this->id);

				if (!isset($this->lastActionCaseRelatedByTargetTypeIdCriteria) || !$this->lastActionCaseRelatedByTargetTypeIdCriteria->equals($criteria)) {
					$count = ActionCasePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collActionCasesRelatedByTargetTypeId);
				}
			} else {
				$count = count($this->collActionCasesRelatedByTargetTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ActionCase object to this object
	 * through the ActionCase foreign key attribute.
	 *
	 * @param      ActionCase $l ActionCase
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActionCaseRelatedByTargetTypeId(ActionCase $l)
	{
		if ($this->collActionCasesRelatedByTargetTypeId === null) {
			$this->initActionCasesRelatedByTargetTypeId();
		}
		if (!in_array($l, $this->collActionCasesRelatedByTargetTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActionCasesRelatedByTargetTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByTargetTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related ActionCasesRelatedByTargetTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getActionCasesRelatedByTargetTypeIdJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionCasesRelatedByTargetTypeId === null) {
			if ($this->isNew()) {
				$this->collActionCasesRelatedByTargetTypeId = array();
			} else {

				$criteria->add(ActionCasePeer::TARGET_TYPE_ID, $this->id);

				$this->collActionCasesRelatedByTargetTypeId = ActionCasePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActionCasePeer::TARGET_TYPE_ID, $this->id);

			if (!isset($this->lastActionCaseRelatedByTargetTypeIdCriteria) || !$this->lastActionCaseRelatedByTargetTypeIdCriteria->equals($criteria)) {
				$this->collActionCasesRelatedByTargetTypeId = ActionCasePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastActionCaseRelatedByTargetTypeIdCriteria = $criteria;

		return $this->collActionCasesRelatedByTargetTypeId;
	}

	/**
	 * Clears out the collRelationUpdatesRelatedBySubjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelationUpdatesRelatedBySubjectTypeId()
	 */
	public function clearRelationUpdatesRelatedBySubjectTypeId()
	{
		$this->collRelationUpdatesRelatedBySubjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelationUpdatesRelatedBySubjectTypeId collection (array).
	 *
	 * By default this just sets the collRelationUpdatesRelatedBySubjectTypeId collection to an empty array (like clearcollRelationUpdatesRelatedBySubjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelationUpdatesRelatedBySubjectTypeId()
	{
		$this->collRelationUpdatesRelatedBySubjectTypeId = array();
	}

	/**
	 * Gets an array of RelationUpdate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related RelationUpdatesRelatedBySubjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RelationUpdate[]
	 * @throws     PropelException
	 */
	public function getRelationUpdatesRelatedBySubjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationUpdatesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collRelationUpdatesRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(RelationUpdatePeer::SUBJECT_TYPE_ID, $this->id);

				RelationUpdatePeer::addSelectColumns($criteria);
				$this->collRelationUpdatesRelatedBySubjectTypeId = RelationUpdatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationUpdatePeer::SUBJECT_TYPE_ID, $this->id);

				RelationUpdatePeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationUpdateRelatedBySubjectTypeIdCriteria) || !$this->lastRelationUpdateRelatedBySubjectTypeIdCriteria->equals($criteria)) {
					$this->collRelationUpdatesRelatedBySubjectTypeId = RelationUpdatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationUpdateRelatedBySubjectTypeIdCriteria = $criteria;
		return $this->collRelationUpdatesRelatedBySubjectTypeId;
	}

	/**
	 * Returns the number of related RelationUpdate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RelationUpdate objects.
	 * @throws     PropelException
	 */
	public function countRelationUpdatesRelatedBySubjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelationUpdatesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationUpdatePeer::SUBJECT_TYPE_ID, $this->id);

				$count = RelationUpdatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationUpdatePeer::SUBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastRelationUpdateRelatedBySubjectTypeIdCriteria) || !$this->lastRelationUpdateRelatedBySubjectTypeIdCriteria->equals($criteria)) {
					$count = RelationUpdatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelationUpdatesRelatedBySubjectTypeId);
				}
			} else {
				$count = count($this->collRelationUpdatesRelatedBySubjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RelationUpdate object to this object
	 * through the RelationUpdate foreign key attribute.
	 *
	 * @param      RelationUpdate $l RelationUpdate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelationUpdateRelatedBySubjectTypeId(RelationUpdate $l)
	{
		if ($this->collRelationUpdatesRelatedBySubjectTypeId === null) {
			$this->initRelationUpdatesRelatedBySubjectTypeId();
		}
		if (!in_array($l, $this->collRelationUpdatesRelatedBySubjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelationUpdatesRelatedBySubjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedBySubjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related RelationUpdatesRelatedBySubjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getRelationUpdatesRelatedBySubjectTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationUpdatesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$this->collRelationUpdatesRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(RelationUpdatePeer::SUBJECT_TYPE_ID, $this->id);

				$this->collRelationUpdatesRelatedBySubjectTypeId = RelationUpdatePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationUpdatePeer::SUBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastRelationUpdateRelatedBySubjectTypeIdCriteria) || !$this->lastRelationUpdateRelatedBySubjectTypeIdCriteria->equals($criteria)) {
				$this->collRelationUpdatesRelatedBySubjectTypeId = RelationUpdatePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationUpdateRelatedBySubjectTypeIdCriteria = $criteria;

		return $this->collRelationUpdatesRelatedBySubjectTypeId;
	}

	/**
	 * Clears out the collRelationUpdatesRelatedByObjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelationUpdatesRelatedByObjectTypeId()
	 */
	public function clearRelationUpdatesRelatedByObjectTypeId()
	{
		$this->collRelationUpdatesRelatedByObjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelationUpdatesRelatedByObjectTypeId collection (array).
	 *
	 * By default this just sets the collRelationUpdatesRelatedByObjectTypeId collection to an empty array (like clearcollRelationUpdatesRelatedByObjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelationUpdatesRelatedByObjectTypeId()
	{
		$this->collRelationUpdatesRelatedByObjectTypeId = array();
	}

	/**
	 * Gets an array of RelationUpdate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related RelationUpdatesRelatedByObjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RelationUpdate[]
	 * @throws     PropelException
	 */
	public function getRelationUpdatesRelatedByObjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationUpdatesRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collRelationUpdatesRelatedByObjectTypeId = array();
			} else {

				$criteria->add(RelationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				RelationUpdatePeer::addSelectColumns($criteria);
				$this->collRelationUpdatesRelatedByObjectTypeId = RelationUpdatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				RelationUpdatePeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationUpdateRelatedByObjectTypeIdCriteria) || !$this->lastRelationUpdateRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$this->collRelationUpdatesRelatedByObjectTypeId = RelationUpdatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationUpdateRelatedByObjectTypeIdCriteria = $criteria;
		return $this->collRelationUpdatesRelatedByObjectTypeId;
	}

	/**
	 * Returns the number of related RelationUpdate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RelationUpdate objects.
	 * @throws     PropelException
	 */
	public function countRelationUpdatesRelatedByObjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelationUpdatesRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				$count = RelationUpdatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastRelationUpdateRelatedByObjectTypeIdCriteria) || !$this->lastRelationUpdateRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$count = RelationUpdatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelationUpdatesRelatedByObjectTypeId);
				}
			} else {
				$count = count($this->collRelationUpdatesRelatedByObjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RelationUpdate object to this object
	 * through the RelationUpdate foreign key attribute.
	 *
	 * @param      RelationUpdate $l RelationUpdate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelationUpdateRelatedByObjectTypeId(RelationUpdate $l)
	{
		if ($this->collRelationUpdatesRelatedByObjectTypeId === null) {
			$this->initRelationUpdatesRelatedByObjectTypeId();
		}
		if (!in_array($l, $this->collRelationUpdatesRelatedByObjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelationUpdatesRelatedByObjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByObjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related RelationUpdatesRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getRelationUpdatesRelatedByObjectTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationUpdatesRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collRelationUpdatesRelatedByObjectTypeId = array();
			} else {

				$criteria->add(RelationUpdatePeer::OBJECT_TYPE_ID, $this->id);

				$this->collRelationUpdatesRelatedByObjectTypeId = RelationUpdatePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationUpdatePeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastRelationUpdateRelatedByObjectTypeIdCriteria) || !$this->lastRelationUpdateRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collRelationUpdatesRelatedByObjectTypeId = RelationUpdatePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationUpdateRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collRelationUpdatesRelatedByObjectTypeId;
	}

	/**
	 * Clears out the collWallPostsRelatedByOwnerTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addWallPostsRelatedByOwnerTypeId()
	 */
	public function clearWallPostsRelatedByOwnerTypeId()
	{
		$this->collWallPostsRelatedByOwnerTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collWallPostsRelatedByOwnerTypeId collection (array).
	 *
	 * By default this just sets the collWallPostsRelatedByOwnerTypeId collection to an empty array (like clearcollWallPostsRelatedByOwnerTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initWallPostsRelatedByOwnerTypeId()
	{
		$this->collWallPostsRelatedByOwnerTypeId = array();
	}

	/**
	 * Gets an array of WallPost objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related WallPostsRelatedByOwnerTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array WallPost[]
	 * @throws     PropelException
	 */
	public function getWallPostsRelatedByOwnerTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPostsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
			   $this->collWallPostsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(WallPostPeer::OWNER_TYPE_ID, $this->id);

				WallPostPeer::addSelectColumns($criteria);
				$this->collWallPostsRelatedByOwnerTypeId = WallPostPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(WallPostPeer::OWNER_TYPE_ID, $this->id);

				WallPostPeer::addSelectColumns($criteria);
				if (!isset($this->lastWallPostRelatedByOwnerTypeIdCriteria) || !$this->lastWallPostRelatedByOwnerTypeIdCriteria->equals($criteria)) {
					$this->collWallPostsRelatedByOwnerTypeId = WallPostPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastWallPostRelatedByOwnerTypeIdCriteria = $criteria;
		return $this->collWallPostsRelatedByOwnerTypeId;
	}

	/**
	 * Returns the number of related WallPost objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related WallPost objects.
	 * @throws     PropelException
	 */
	public function countWallPostsRelatedByOwnerTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collWallPostsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(WallPostPeer::OWNER_TYPE_ID, $this->id);

				$count = WallPostPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(WallPostPeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastWallPostRelatedByOwnerTypeIdCriteria) || !$this->lastWallPostRelatedByOwnerTypeIdCriteria->equals($criteria)) {
					$count = WallPostPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collWallPostsRelatedByOwnerTypeId);
				}
			} else {
				$count = count($this->collWallPostsRelatedByOwnerTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a WallPost object to this object
	 * through the WallPost foreign key attribute.
	 *
	 * @param      WallPost $l WallPost
	 * @return     void
	 * @throws     PropelException
	 */
	public function addWallPostRelatedByOwnerTypeId(WallPost $l)
	{
		if ($this->collWallPostsRelatedByOwnerTypeId === null) {
			$this->initWallPostsRelatedByOwnerTypeId();
		}
		if (!in_array($l, $this->collWallPostsRelatedByOwnerTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collWallPostsRelatedByOwnerTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByOwnerTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related WallPostsRelatedByOwnerTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getWallPostsRelatedByOwnerTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPostsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$this->collWallPostsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(WallPostPeer::OWNER_TYPE_ID, $this->id);

				$this->collWallPostsRelatedByOwnerTypeId = WallPostPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallPostPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastWallPostRelatedByOwnerTypeIdCriteria) || !$this->lastWallPostRelatedByOwnerTypeIdCriteria->equals($criteria)) {
				$this->collWallPostsRelatedByOwnerTypeId = WallPostPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallPostRelatedByOwnerTypeIdCriteria = $criteria;

		return $this->collWallPostsRelatedByOwnerTypeId;
	}

	/**
	 * Clears out the collWallPostsRelatedByPosterTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addWallPostsRelatedByPosterTypeId()
	 */
	public function clearWallPostsRelatedByPosterTypeId()
	{
		$this->collWallPostsRelatedByPosterTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collWallPostsRelatedByPosterTypeId collection (array).
	 *
	 * By default this just sets the collWallPostsRelatedByPosterTypeId collection to an empty array (like clearcollWallPostsRelatedByPosterTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initWallPostsRelatedByPosterTypeId()
	{
		$this->collWallPostsRelatedByPosterTypeId = array();
	}

	/**
	 * Gets an array of WallPost objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related WallPostsRelatedByPosterTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array WallPost[]
	 * @throws     PropelException
	 */
	public function getWallPostsRelatedByPosterTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPostsRelatedByPosterTypeId === null) {
			if ($this->isNew()) {
			   $this->collWallPostsRelatedByPosterTypeId = array();
			} else {

				$criteria->add(WallPostPeer::POSTER_TYPE_ID, $this->id);

				WallPostPeer::addSelectColumns($criteria);
				$this->collWallPostsRelatedByPosterTypeId = WallPostPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(WallPostPeer::POSTER_TYPE_ID, $this->id);

				WallPostPeer::addSelectColumns($criteria);
				if (!isset($this->lastWallPostRelatedByPosterTypeIdCriteria) || !$this->lastWallPostRelatedByPosterTypeIdCriteria->equals($criteria)) {
					$this->collWallPostsRelatedByPosterTypeId = WallPostPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastWallPostRelatedByPosterTypeIdCriteria = $criteria;
		return $this->collWallPostsRelatedByPosterTypeId;
	}

	/**
	 * Returns the number of related WallPost objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related WallPost objects.
	 * @throws     PropelException
	 */
	public function countWallPostsRelatedByPosterTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collWallPostsRelatedByPosterTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(WallPostPeer::POSTER_TYPE_ID, $this->id);

				$count = WallPostPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(WallPostPeer::POSTER_TYPE_ID, $this->id);

				if (!isset($this->lastWallPostRelatedByPosterTypeIdCriteria) || !$this->lastWallPostRelatedByPosterTypeIdCriteria->equals($criteria)) {
					$count = WallPostPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collWallPostsRelatedByPosterTypeId);
				}
			} else {
				$count = count($this->collWallPostsRelatedByPosterTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a WallPost object to this object
	 * through the WallPost foreign key attribute.
	 *
	 * @param      WallPost $l WallPost
	 * @return     void
	 * @throws     PropelException
	 */
	public function addWallPostRelatedByPosterTypeId(WallPost $l)
	{
		if ($this->collWallPostsRelatedByPosterTypeId === null) {
			$this->initWallPostsRelatedByPosterTypeId();
		}
		if (!in_array($l, $this->collWallPostsRelatedByPosterTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collWallPostsRelatedByPosterTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByPosterTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related WallPostsRelatedByPosterTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getWallPostsRelatedByPosterTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPostsRelatedByPosterTypeId === null) {
			if ($this->isNew()) {
				$this->collWallPostsRelatedByPosterTypeId = array();
			} else {

				$criteria->add(WallPostPeer::POSTER_TYPE_ID, $this->id);

				$this->collWallPostsRelatedByPosterTypeId = WallPostPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallPostPeer::POSTER_TYPE_ID, $this->id);

			if (!isset($this->lastWallPostRelatedByPosterTypeIdCriteria) || !$this->lastWallPostRelatedByPosterTypeIdCriteria->equals($criteria)) {
				$this->collWallPostsRelatedByPosterTypeId = WallPostPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallPostRelatedByPosterTypeIdCriteria = $criteria;

		return $this->collWallPostsRelatedByPosterTypeId;
	}

	/**
	 * Clears out the collWallPostsRelatedByItemTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addWallPostsRelatedByItemTypeId()
	 */
	public function clearWallPostsRelatedByItemTypeId()
	{
		$this->collWallPostsRelatedByItemTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collWallPostsRelatedByItemTypeId collection (array).
	 *
	 * By default this just sets the collWallPostsRelatedByItemTypeId collection to an empty array (like clearcollWallPostsRelatedByItemTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initWallPostsRelatedByItemTypeId()
	{
		$this->collWallPostsRelatedByItemTypeId = array();
	}

	/**
	 * Gets an array of WallPost objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related WallPostsRelatedByItemTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array WallPost[]
	 * @throws     PropelException
	 */
	public function getWallPostsRelatedByItemTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPostsRelatedByItemTypeId === null) {
			if ($this->isNew()) {
			   $this->collWallPostsRelatedByItemTypeId = array();
			} else {

				$criteria->add(WallPostPeer::ITEM_TYPE_ID, $this->id);

				WallPostPeer::addSelectColumns($criteria);
				$this->collWallPostsRelatedByItemTypeId = WallPostPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(WallPostPeer::ITEM_TYPE_ID, $this->id);

				WallPostPeer::addSelectColumns($criteria);
				if (!isset($this->lastWallPostRelatedByItemTypeIdCriteria) || !$this->lastWallPostRelatedByItemTypeIdCriteria->equals($criteria)) {
					$this->collWallPostsRelatedByItemTypeId = WallPostPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastWallPostRelatedByItemTypeIdCriteria = $criteria;
		return $this->collWallPostsRelatedByItemTypeId;
	}

	/**
	 * Returns the number of related WallPost objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related WallPost objects.
	 * @throws     PropelException
	 */
	public function countWallPostsRelatedByItemTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collWallPostsRelatedByItemTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(WallPostPeer::ITEM_TYPE_ID, $this->id);

				$count = WallPostPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(WallPostPeer::ITEM_TYPE_ID, $this->id);

				if (!isset($this->lastWallPostRelatedByItemTypeIdCriteria) || !$this->lastWallPostRelatedByItemTypeIdCriteria->equals($criteria)) {
					$count = WallPostPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collWallPostsRelatedByItemTypeId);
				}
			} else {
				$count = count($this->collWallPostsRelatedByItemTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a WallPost object to this object
	 * through the WallPost foreign key attribute.
	 *
	 * @param      WallPost $l WallPost
	 * @return     void
	 * @throws     PropelException
	 */
	public function addWallPostRelatedByItemTypeId(WallPost $l)
	{
		if ($this->collWallPostsRelatedByItemTypeId === null) {
			$this->initWallPostsRelatedByItemTypeId();
		}
		if (!in_array($l, $this->collWallPostsRelatedByItemTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collWallPostsRelatedByItemTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByItemTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related WallPostsRelatedByItemTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getWallPostsRelatedByItemTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPostsRelatedByItemTypeId === null) {
			if ($this->isNew()) {
				$this->collWallPostsRelatedByItemTypeId = array();
			} else {

				$criteria->add(WallPostPeer::ITEM_TYPE_ID, $this->id);

				$this->collWallPostsRelatedByItemTypeId = WallPostPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallPostPeer::ITEM_TYPE_ID, $this->id);

			if (!isset($this->lastWallPostRelatedByItemTypeIdCriteria) || !$this->lastWallPostRelatedByItemTypeIdCriteria->equals($criteria)) {
				$this->collWallPostsRelatedByItemTypeId = WallPostPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallPostRelatedByItemTypeIdCriteria = $criteria;

		return $this->collWallPostsRelatedByItemTypeId;
	}

	/**
	 * Clears out the collLikeItsRelatedByPosterTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLikeItsRelatedByPosterTypeId()
	 */
	public function clearLikeItsRelatedByPosterTypeId()
	{
		$this->collLikeItsRelatedByPosterTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLikeItsRelatedByPosterTypeId collection (array).
	 *
	 * By default this just sets the collLikeItsRelatedByPosterTypeId collection to an empty array (like clearcollLikeItsRelatedByPosterTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLikeItsRelatedByPosterTypeId()
	{
		$this->collLikeItsRelatedByPosterTypeId = array();
	}

	/**
	 * Gets an array of LikeIt objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related LikeItsRelatedByPosterTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array LikeIt[]
	 * @throws     PropelException
	 */
	public function getLikeItsRelatedByPosterTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLikeItsRelatedByPosterTypeId === null) {
			if ($this->isNew()) {
			   $this->collLikeItsRelatedByPosterTypeId = array();
			} else {

				$criteria->add(LikeItPeer::POSTER_TYPE_ID, $this->id);

				LikeItPeer::addSelectColumns($criteria);
				$this->collLikeItsRelatedByPosterTypeId = LikeItPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LikeItPeer::POSTER_TYPE_ID, $this->id);

				LikeItPeer::addSelectColumns($criteria);
				if (!isset($this->lastLikeItRelatedByPosterTypeIdCriteria) || !$this->lastLikeItRelatedByPosterTypeIdCriteria->equals($criteria)) {
					$this->collLikeItsRelatedByPosterTypeId = LikeItPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLikeItRelatedByPosterTypeIdCriteria = $criteria;
		return $this->collLikeItsRelatedByPosterTypeId;
	}

	/**
	 * Returns the number of related LikeIt objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related LikeIt objects.
	 * @throws     PropelException
	 */
	public function countLikeItsRelatedByPosterTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLikeItsRelatedByPosterTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LikeItPeer::POSTER_TYPE_ID, $this->id);

				$count = LikeItPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LikeItPeer::POSTER_TYPE_ID, $this->id);

				if (!isset($this->lastLikeItRelatedByPosterTypeIdCriteria) || !$this->lastLikeItRelatedByPosterTypeIdCriteria->equals($criteria)) {
					$count = LikeItPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collLikeItsRelatedByPosterTypeId);
				}
			} else {
				$count = count($this->collLikeItsRelatedByPosterTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a LikeIt object to this object
	 * through the LikeIt foreign key attribute.
	 *
	 * @param      LikeIt $l LikeIt
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLikeItRelatedByPosterTypeId(LikeIt $l)
	{
		if ($this->collLikeItsRelatedByPosterTypeId === null) {
			$this->initLikeItsRelatedByPosterTypeId();
		}
		if (!in_array($l, $this->collLikeItsRelatedByPosterTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLikeItsRelatedByPosterTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByPosterTypeId($this);
		}
	}

	/**
	 * Clears out the collLikeItsRelatedByItemTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLikeItsRelatedByItemTypeId()
	 */
	public function clearLikeItsRelatedByItemTypeId()
	{
		$this->collLikeItsRelatedByItemTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLikeItsRelatedByItemTypeId collection (array).
	 *
	 * By default this just sets the collLikeItsRelatedByItemTypeId collection to an empty array (like clearcollLikeItsRelatedByItemTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLikeItsRelatedByItemTypeId()
	{
		$this->collLikeItsRelatedByItemTypeId = array();
	}

	/**
	 * Gets an array of LikeIt objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related LikeItsRelatedByItemTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array LikeIt[]
	 * @throws     PropelException
	 */
	public function getLikeItsRelatedByItemTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLikeItsRelatedByItemTypeId === null) {
			if ($this->isNew()) {
			   $this->collLikeItsRelatedByItemTypeId = array();
			} else {

				$criteria->add(LikeItPeer::ITEM_TYPE_ID, $this->id);

				LikeItPeer::addSelectColumns($criteria);
				$this->collLikeItsRelatedByItemTypeId = LikeItPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LikeItPeer::ITEM_TYPE_ID, $this->id);

				LikeItPeer::addSelectColumns($criteria);
				if (!isset($this->lastLikeItRelatedByItemTypeIdCriteria) || !$this->lastLikeItRelatedByItemTypeIdCriteria->equals($criteria)) {
					$this->collLikeItsRelatedByItemTypeId = LikeItPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLikeItRelatedByItemTypeIdCriteria = $criteria;
		return $this->collLikeItsRelatedByItemTypeId;
	}

	/**
	 * Returns the number of related LikeIt objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related LikeIt objects.
	 * @throws     PropelException
	 */
	public function countLikeItsRelatedByItemTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLikeItsRelatedByItemTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LikeItPeer::ITEM_TYPE_ID, $this->id);

				$count = LikeItPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LikeItPeer::ITEM_TYPE_ID, $this->id);

				if (!isset($this->lastLikeItRelatedByItemTypeIdCriteria) || !$this->lastLikeItRelatedByItemTypeIdCriteria->equals($criteria)) {
					$count = LikeItPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collLikeItsRelatedByItemTypeId);
				}
			} else {
				$count = count($this->collLikeItsRelatedByItemTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a LikeIt object to this object
	 * through the LikeIt foreign key attribute.
	 *
	 * @param      LikeIt $l LikeIt
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLikeItRelatedByItemTypeId(LikeIt $l)
	{
		if ($this->collLikeItsRelatedByItemTypeId === null) {
			$this->initLikeItsRelatedByItemTypeId();
		}
		if (!in_array($l, $this->collLikeItsRelatedByItemTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLikeItsRelatedByItemTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByItemTypeId($this);
		}
	}

	/**
	 * Clears out the collMarketingPackagePricesRelatedByTargetTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMarketingPackagePricesRelatedByTargetTypeId()
	 */
	public function clearMarketingPackagePricesRelatedByTargetTypeId()
	{
		$this->collMarketingPackagePricesRelatedByTargetTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMarketingPackagePricesRelatedByTargetTypeId collection (array).
	 *
	 * By default this just sets the collMarketingPackagePricesRelatedByTargetTypeId collection to an empty array (like clearcollMarketingPackagePricesRelatedByTargetTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMarketingPackagePricesRelatedByTargetTypeId()
	{
		$this->collMarketingPackagePricesRelatedByTargetTypeId = array();
	}

	/**
	 * Gets an array of MarketingPackagePrice objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related MarketingPackagePricesRelatedByTargetTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MarketingPackagePrice[]
	 * @throws     PropelException
	 */
	public function getMarketingPackagePricesRelatedByTargetTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePricesRelatedByTargetTypeId === null) {
			if ($this->isNew()) {
			   $this->collMarketingPackagePricesRelatedByTargetTypeId = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

				MarketingPackagePricePeer::addSelectColumns($criteria);
				$this->collMarketingPackagePricesRelatedByTargetTypeId = MarketingPackagePricePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

				MarketingPackagePricePeer::addSelectColumns($criteria);
				if (!isset($this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria->equals($criteria)) {
					$this->collMarketingPackagePricesRelatedByTargetTypeId = MarketingPackagePricePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria = $criteria;
		return $this->collMarketingPackagePricesRelatedByTargetTypeId;
	}

	/**
	 * Returns the number of related MarketingPackagePrice objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MarketingPackagePrice objects.
	 * @throws     PropelException
	 */
	public function countMarketingPackagePricesRelatedByTargetTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMarketingPackagePricesRelatedByTargetTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

				$count = MarketingPackagePricePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

				if (!isset($this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria->equals($criteria)) {
					$count = MarketingPackagePricePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMarketingPackagePricesRelatedByTargetTypeId);
				}
			} else {
				$count = count($this->collMarketingPackagePricesRelatedByTargetTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MarketingPackagePrice object to this object
	 * through the MarketingPackagePrice foreign key attribute.
	 *
	 * @param      MarketingPackagePrice $l MarketingPackagePrice
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMarketingPackagePriceRelatedByTargetTypeId(MarketingPackagePrice $l)
	{
		if ($this->collMarketingPackagePricesRelatedByTargetTypeId === null) {
			$this->initMarketingPackagePricesRelatedByTargetTypeId();
		}
		if (!in_array($l, $this->collMarketingPackagePricesRelatedByTargetTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMarketingPackagePricesRelatedByTargetTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByTargetTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MarketingPackagePricesRelatedByTargetTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMarketingPackagePricesRelatedByTargetTypeIdJoinMarketingPackage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePricesRelatedByTargetTypeId === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePricesRelatedByTargetTypeId = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

				$this->collMarketingPackagePricesRelatedByTargetTypeId = MarketingPackagePricePeer::doSelectJoinMarketingPackage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria->equals($criteria)) {
				$this->collMarketingPackagePricesRelatedByTargetTypeId = MarketingPackagePricePeer::doSelectJoinMarketingPackage($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria = $criteria;

		return $this->collMarketingPackagePricesRelatedByTargetTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MarketingPackagePricesRelatedByTargetTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMarketingPackagePricesRelatedByTargetTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePricesRelatedByTargetTypeId === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePricesRelatedByTargetTypeId = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

				$this->collMarketingPackagePricesRelatedByTargetTypeId = MarketingPackagePricePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria->equals($criteria)) {
				$this->collMarketingPackagePricesRelatedByTargetTypeId = MarketingPackagePricePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria = $criteria;

		return $this->collMarketingPackagePricesRelatedByTargetTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MarketingPackagePricesRelatedByTargetTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMarketingPackagePricesRelatedByTargetTypeIdJoinGeonameCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePricesRelatedByTargetTypeId === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePricesRelatedByTargetTypeId = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

				$this->collMarketingPackagePricesRelatedByTargetTypeId = MarketingPackagePricePeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::TARGET_TYPE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria->equals($criteria)) {
				$this->collMarketingPackagePricesRelatedByTargetTypeId = MarketingPackagePricePeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceRelatedByTargetTypeIdCriteria = $criteria;

		return $this->collMarketingPackagePricesRelatedByTargetTypeId;
	}

	/**
	 * Clears out the collMarketingPackagePricesRelatedByReferenceTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMarketingPackagePricesRelatedByReferenceTypeId()
	 */
	public function clearMarketingPackagePricesRelatedByReferenceTypeId()
	{
		$this->collMarketingPackagePricesRelatedByReferenceTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMarketingPackagePricesRelatedByReferenceTypeId collection (array).
	 *
	 * By default this just sets the collMarketingPackagePricesRelatedByReferenceTypeId collection to an empty array (like clearcollMarketingPackagePricesRelatedByReferenceTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMarketingPackagePricesRelatedByReferenceTypeId()
	{
		$this->collMarketingPackagePricesRelatedByReferenceTypeId = array();
	}

	/**
	 * Gets an array of MarketingPackagePrice objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related MarketingPackagePricesRelatedByReferenceTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MarketingPackagePrice[]
	 * @throws     PropelException
	 */
	public function getMarketingPackagePricesRelatedByReferenceTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePricesRelatedByReferenceTypeId === null) {
			if ($this->isNew()) {
			   $this->collMarketingPackagePricesRelatedByReferenceTypeId = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

				MarketingPackagePricePeer::addSelectColumns($criteria);
				$this->collMarketingPackagePricesRelatedByReferenceTypeId = MarketingPackagePricePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

				MarketingPackagePricePeer::addSelectColumns($criteria);
				if (!isset($this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria->equals($criteria)) {
					$this->collMarketingPackagePricesRelatedByReferenceTypeId = MarketingPackagePricePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria = $criteria;
		return $this->collMarketingPackagePricesRelatedByReferenceTypeId;
	}

	/**
	 * Returns the number of related MarketingPackagePrice objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MarketingPackagePrice objects.
	 * @throws     PropelException
	 */
	public function countMarketingPackagePricesRelatedByReferenceTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMarketingPackagePricesRelatedByReferenceTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

				$count = MarketingPackagePricePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

				if (!isset($this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria->equals($criteria)) {
					$count = MarketingPackagePricePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMarketingPackagePricesRelatedByReferenceTypeId);
				}
			} else {
				$count = count($this->collMarketingPackagePricesRelatedByReferenceTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MarketingPackagePrice object to this object
	 * through the MarketingPackagePrice foreign key attribute.
	 *
	 * @param      MarketingPackagePrice $l MarketingPackagePrice
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMarketingPackagePriceRelatedByReferenceTypeId(MarketingPackagePrice $l)
	{
		if ($this->collMarketingPackagePricesRelatedByReferenceTypeId === null) {
			$this->initMarketingPackagePricesRelatedByReferenceTypeId();
		}
		if (!in_array($l, $this->collMarketingPackagePricesRelatedByReferenceTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMarketingPackagePricesRelatedByReferenceTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByReferenceTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MarketingPackagePricesRelatedByReferenceTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMarketingPackagePricesRelatedByReferenceTypeIdJoinMarketingPackage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePricesRelatedByReferenceTypeId === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePricesRelatedByReferenceTypeId = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

				$this->collMarketingPackagePricesRelatedByReferenceTypeId = MarketingPackagePricePeer::doSelectJoinMarketingPackage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria->equals($criteria)) {
				$this->collMarketingPackagePricesRelatedByReferenceTypeId = MarketingPackagePricePeer::doSelectJoinMarketingPackage($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria = $criteria;

		return $this->collMarketingPackagePricesRelatedByReferenceTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MarketingPackagePricesRelatedByReferenceTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMarketingPackagePricesRelatedByReferenceTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePricesRelatedByReferenceTypeId === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePricesRelatedByReferenceTypeId = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

				$this->collMarketingPackagePricesRelatedByReferenceTypeId = MarketingPackagePricePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria->equals($criteria)) {
				$this->collMarketingPackagePricesRelatedByReferenceTypeId = MarketingPackagePricePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria = $criteria;

		return $this->collMarketingPackagePricesRelatedByReferenceTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related MarketingPackagePricesRelatedByReferenceTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getMarketingPackagePricesRelatedByReferenceTypeIdJoinGeonameCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePricesRelatedByReferenceTypeId === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePricesRelatedByReferenceTypeId = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

				$this->collMarketingPackagePricesRelatedByReferenceTypeId = MarketingPackagePricePeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::REFERENCE_TYPE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria) || !$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria->equals($criteria)) {
				$this->collMarketingPackagePricesRelatedByReferenceTypeId = MarketingPackagePricePeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceRelatedByReferenceTypeIdCriteria = $criteria;

		return $this->collMarketingPackagePricesRelatedByReferenceTypeId;
	}

	/**
	 * Clears out the collPlaces collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPlaces()
	 */
	public function clearPlaces()
	{
		$this->collPlaces = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPlaces collection (array).
	 *
	 * By default this just sets the collPlaces collection to an empty array (like clearcollPlaces());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPlaces()
	{
		$this->collPlaces = array();
	}

	/**
	 * Gets an array of Place objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related Places from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Place[]
	 * @throws     PropelException
	 */
	public function getPlaces($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
			   $this->collPlaces = array();
			} else {

				$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

				PlacePeer::addSelectColumns($criteria);
				$this->collPlaces = PlacePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

				PlacePeer::addSelectColumns($criteria);
				if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
					$this->collPlaces = PlacePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPlaceCriteria = $criteria;
		return $this->collPlaces;
	}

	/**
	 * Returns the number of related Place objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Place objects.
	 * @throws     PropelException
	 */
	public function countPlaces(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

				$count = PlacePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
					$count = PlacePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPlaces);
				}
			} else {
				$count = count($this->collPlaces);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Place object to this object
	 * through the Place foreign key attribute.
	 *
	 * @param      Place $l Place
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPlace(Place $l)
	{
		if ($this->collPlaces === null) {
			$this->initPlaces();
		}
		if (!in_array($l, $this->collPlaces, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPlaces, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Places from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPlacesJoinPlaceType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
				$this->collPlaces = array();
			} else {

				$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

				$this->collPlaces = PlacePeer::doSelectJoinPlaceType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
				$this->collPlaces = PlacePeer::doSelectJoinPlaceType($criteria, $con, $join_behavior);
			}
		}
		$this->lastPlaceCriteria = $criteria;

		return $this->collPlaces;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Places from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPlacesJoinGeonameCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
				$this->collPlaces = array();
			} else {

				$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

				$this->collPlaces = PlacePeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
				$this->collPlaces = PlacePeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastPlaceCriteria = $criteria;

		return $this->collPlaces;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Places from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getPlacesJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
				$this->collPlaces = array();
			} else {

				$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

				$this->collPlaces = PlacePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PlacePeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
				$this->collPlaces = PlacePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastPlaceCriteria = $criteria;

		return $this->collPlaces;
	}

	/**
	 * Clears out the collEventsRelatedByOwnerTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventsRelatedByOwnerTypeId()
	 */
	public function clearEventsRelatedByOwnerTypeId()
	{
		$this->collEventsRelatedByOwnerTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventsRelatedByOwnerTypeId collection (array).
	 *
	 * By default this just sets the collEventsRelatedByOwnerTypeId collection to an empty array (like clearcollEventsRelatedByOwnerTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventsRelatedByOwnerTypeId()
	{
		$this->collEventsRelatedByOwnerTypeId = array();
	}

	/**
	 * Gets an array of Event objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related EventsRelatedByOwnerTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Event[]
	 * @throws     PropelException
	 */
	public function getEventsRelatedByOwnerTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
			   $this->collEventsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

				EventPeer::addSelectColumns($criteria);
				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

				EventPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventRelatedByOwnerTypeIdCriteria) || !$this->lastEventRelatedByOwnerTypeIdCriteria->equals($criteria)) {
					$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventRelatedByOwnerTypeIdCriteria = $criteria;
		return $this->collEventsRelatedByOwnerTypeId;
	}

	/**
	 * Returns the number of related Event objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Event objects.
	 * @throws     PropelException
	 */
	public function countEventsRelatedByOwnerTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

				$count = EventPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastEventRelatedByOwnerTypeIdCriteria) || !$this->lastEventRelatedByOwnerTypeIdCriteria->equals($criteria)) {
					$count = EventPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEventsRelatedByOwnerTypeId);
				}
			} else {
				$count = count($this->collEventsRelatedByOwnerTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Event object to this object
	 * through the Event foreign key attribute.
	 *
	 * @param      Event $l Event
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventRelatedByOwnerTypeId(Event $l)
	{
		if ($this->collEventsRelatedByOwnerTypeId === null) {
			$this->initEventsRelatedByOwnerTypeId();
		}
		if (!in_array($l, $this->collEventsRelatedByOwnerTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventsRelatedByOwnerTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByOwnerTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventsRelatedByOwnerTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventsRelatedByOwnerTypeIdJoinEventType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$this->collEventsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelectJoinEventType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastEventRelatedByOwnerTypeIdCriteria) || !$this->lastEventRelatedByOwnerTypeIdCriteria->equals($criteria)) {
				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelectJoinEventType($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventRelatedByOwnerTypeIdCriteria = $criteria;

		return $this->collEventsRelatedByOwnerTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventsRelatedByOwnerTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventsRelatedByOwnerTypeIdJoinTimeScheme($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$this->collEventsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelectJoinTimeScheme($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastEventRelatedByOwnerTypeIdCriteria) || !$this->lastEventRelatedByOwnerTypeIdCriteria->equals($criteria)) {
				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelectJoinTimeScheme($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventRelatedByOwnerTypeIdCriteria = $criteria;

		return $this->collEventsRelatedByOwnerTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventsRelatedByOwnerTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventsRelatedByOwnerTypeIdJoinGeonameCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$this->collEventsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastEventRelatedByOwnerTypeIdCriteria) || !$this->lastEventRelatedByOwnerTypeIdCriteria->equals($criteria)) {
				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventRelatedByOwnerTypeIdCriteria = $criteria;

		return $this->collEventsRelatedByOwnerTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventsRelatedByOwnerTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventsRelatedByOwnerTypeIdJoinPlace($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$this->collEventsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelectJoinPlace($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastEventRelatedByOwnerTypeIdCriteria) || !$this->lastEventRelatedByOwnerTypeIdCriteria->equals($criteria)) {
				$this->collEventsRelatedByOwnerTypeId = EventPeer::doSelectJoinPlace($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventRelatedByOwnerTypeIdCriteria = $criteria;

		return $this->collEventsRelatedByOwnerTypeId;
	}

	/**
	 * Clears out the collEventsRelatedByOrganiserTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventsRelatedByOrganiserTypeId()
	 */
	public function clearEventsRelatedByOrganiserTypeId()
	{
		$this->collEventsRelatedByOrganiserTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventsRelatedByOrganiserTypeId collection (array).
	 *
	 * By default this just sets the collEventsRelatedByOrganiserTypeId collection to an empty array (like clearcollEventsRelatedByOrganiserTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventsRelatedByOrganiserTypeId()
	{
		$this->collEventsRelatedByOrganiserTypeId = array();
	}

	/**
	 * Gets an array of Event objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related EventsRelatedByOrganiserTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Event[]
	 * @throws     PropelException
	 */
	public function getEventsRelatedByOrganiserTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOrganiserTypeId === null) {
			if ($this->isNew()) {
			   $this->collEventsRelatedByOrganiserTypeId = array();
			} else {

				$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

				EventPeer::addSelectColumns($criteria);
				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

				EventPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventRelatedByOrganiserTypeIdCriteria) || !$this->lastEventRelatedByOrganiserTypeIdCriteria->equals($criteria)) {
					$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventRelatedByOrganiserTypeIdCriteria = $criteria;
		return $this->collEventsRelatedByOrganiserTypeId;
	}

	/**
	 * Returns the number of related Event objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Event objects.
	 * @throws     PropelException
	 */
	public function countEventsRelatedByOrganiserTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventsRelatedByOrganiserTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

				$count = EventPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

				if (!isset($this->lastEventRelatedByOrganiserTypeIdCriteria) || !$this->lastEventRelatedByOrganiserTypeIdCriteria->equals($criteria)) {
					$count = EventPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEventsRelatedByOrganiserTypeId);
				}
			} else {
				$count = count($this->collEventsRelatedByOrganiserTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Event object to this object
	 * through the Event foreign key attribute.
	 *
	 * @param      Event $l Event
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventRelatedByOrganiserTypeId(Event $l)
	{
		if ($this->collEventsRelatedByOrganiserTypeId === null) {
			$this->initEventsRelatedByOrganiserTypeId();
		}
		if (!in_array($l, $this->collEventsRelatedByOrganiserTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventsRelatedByOrganiserTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByOrganiserTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventsRelatedByOrganiserTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventsRelatedByOrganiserTypeIdJoinEventType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOrganiserTypeId === null) {
			if ($this->isNew()) {
				$this->collEventsRelatedByOrganiserTypeId = array();
			} else {

				$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelectJoinEventType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

			if (!isset($this->lastEventRelatedByOrganiserTypeIdCriteria) || !$this->lastEventRelatedByOrganiserTypeIdCriteria->equals($criteria)) {
				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelectJoinEventType($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventRelatedByOrganiserTypeIdCriteria = $criteria;

		return $this->collEventsRelatedByOrganiserTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventsRelatedByOrganiserTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventsRelatedByOrganiserTypeIdJoinTimeScheme($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOrganiserTypeId === null) {
			if ($this->isNew()) {
				$this->collEventsRelatedByOrganiserTypeId = array();
			} else {

				$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelectJoinTimeScheme($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

			if (!isset($this->lastEventRelatedByOrganiserTypeIdCriteria) || !$this->lastEventRelatedByOrganiserTypeIdCriteria->equals($criteria)) {
				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelectJoinTimeScheme($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventRelatedByOrganiserTypeIdCriteria = $criteria;

		return $this->collEventsRelatedByOrganiserTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventsRelatedByOrganiserTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventsRelatedByOrganiserTypeIdJoinGeonameCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOrganiserTypeId === null) {
			if ($this->isNew()) {
				$this->collEventsRelatedByOrganiserTypeId = array();
			} else {

				$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

			if (!isset($this->lastEventRelatedByOrganiserTypeIdCriteria) || !$this->lastEventRelatedByOrganiserTypeIdCriteria->equals($criteria)) {
				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventRelatedByOrganiserTypeIdCriteria = $criteria;

		return $this->collEventsRelatedByOrganiserTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventsRelatedByOrganiserTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventsRelatedByOrganiserTypeIdJoinPlace($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventsRelatedByOrganiserTypeId === null) {
			if ($this->isNew()) {
				$this->collEventsRelatedByOrganiserTypeId = array();
			} else {

				$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelectJoinPlace($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::ORGANISER_TYPE_ID, $this->id);

			if (!isset($this->lastEventRelatedByOrganiserTypeIdCriteria) || !$this->lastEventRelatedByOrganiserTypeIdCriteria->equals($criteria)) {
				$this->collEventsRelatedByOrganiserTypeId = EventPeer::doSelectJoinPlace($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventRelatedByOrganiserTypeIdCriteria = $criteria;

		return $this->collEventsRelatedByOrganiserTypeId;
	}

	/**
	 * Clears out the collEventInvitesRelatedBySubjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventInvitesRelatedBySubjectTypeId()
	 */
	public function clearEventInvitesRelatedBySubjectTypeId()
	{
		$this->collEventInvitesRelatedBySubjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventInvitesRelatedBySubjectTypeId collection (array).
	 *
	 * By default this just sets the collEventInvitesRelatedBySubjectTypeId collection to an empty array (like clearcollEventInvitesRelatedBySubjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventInvitesRelatedBySubjectTypeId()
	{
		$this->collEventInvitesRelatedBySubjectTypeId = array();
	}

	/**
	 * Gets an array of EventInvite objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related EventInvitesRelatedBySubjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EventInvite[]
	 * @throws     PropelException
	 */
	public function getEventInvitesRelatedBySubjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventInvitesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collEventInvitesRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(EventInvitePeer::SUBJECT_TYPE_ID, $this->id);

				EventInvitePeer::addSelectColumns($criteria);
				$this->collEventInvitesRelatedBySubjectTypeId = EventInvitePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventInvitePeer::SUBJECT_TYPE_ID, $this->id);

				EventInvitePeer::addSelectColumns($criteria);
				if (!isset($this->lastEventInviteRelatedBySubjectTypeIdCriteria) || !$this->lastEventInviteRelatedBySubjectTypeIdCriteria->equals($criteria)) {
					$this->collEventInvitesRelatedBySubjectTypeId = EventInvitePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventInviteRelatedBySubjectTypeIdCriteria = $criteria;
		return $this->collEventInvitesRelatedBySubjectTypeId;
	}

	/**
	 * Returns the number of related EventInvite objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EventInvite objects.
	 * @throws     PropelException
	 */
	public function countEventInvitesRelatedBySubjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventInvitesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventInvitePeer::SUBJECT_TYPE_ID, $this->id);

				$count = EventInvitePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventInvitePeer::SUBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastEventInviteRelatedBySubjectTypeIdCriteria) || !$this->lastEventInviteRelatedBySubjectTypeIdCriteria->equals($criteria)) {
					$count = EventInvitePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEventInvitesRelatedBySubjectTypeId);
				}
			} else {
				$count = count($this->collEventInvitesRelatedBySubjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EventInvite object to this object
	 * through the EventInvite foreign key attribute.
	 *
	 * @param      EventInvite $l EventInvite
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventInviteRelatedBySubjectTypeId(EventInvite $l)
	{
		if ($this->collEventInvitesRelatedBySubjectTypeId === null) {
			$this->initEventInvitesRelatedBySubjectTypeId();
		}
		if (!in_array($l, $this->collEventInvitesRelatedBySubjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventInvitesRelatedBySubjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedBySubjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventInvitesRelatedBySubjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventInvitesRelatedBySubjectTypeIdJoinEvent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventInvitesRelatedBySubjectTypeId === null) {
			if ($this->isNew()) {
				$this->collEventInvitesRelatedBySubjectTypeId = array();
			} else {

				$criteria->add(EventInvitePeer::SUBJECT_TYPE_ID, $this->id);

				$this->collEventInvitesRelatedBySubjectTypeId = EventInvitePeer::doSelectJoinEvent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventInvitePeer::SUBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastEventInviteRelatedBySubjectTypeIdCriteria) || !$this->lastEventInviteRelatedBySubjectTypeIdCriteria->equals($criteria)) {
				$this->collEventInvitesRelatedBySubjectTypeId = EventInvitePeer::doSelectJoinEvent($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventInviteRelatedBySubjectTypeIdCriteria = $criteria;

		return $this->collEventInvitesRelatedBySubjectTypeId;
	}

	/**
	 * Clears out the collEventInvitesRelatedByInviterTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventInvitesRelatedByInviterTypeId()
	 */
	public function clearEventInvitesRelatedByInviterTypeId()
	{
		$this->collEventInvitesRelatedByInviterTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventInvitesRelatedByInviterTypeId collection (array).
	 *
	 * By default this just sets the collEventInvitesRelatedByInviterTypeId collection to an empty array (like clearcollEventInvitesRelatedByInviterTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventInvitesRelatedByInviterTypeId()
	{
		$this->collEventInvitesRelatedByInviterTypeId = array();
	}

	/**
	 * Gets an array of EventInvite objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related EventInvitesRelatedByInviterTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EventInvite[]
	 * @throws     PropelException
	 */
	public function getEventInvitesRelatedByInviterTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventInvitesRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
			   $this->collEventInvitesRelatedByInviterTypeId = array();
			} else {

				$criteria->add(EventInvitePeer::INVITER_TYPE_ID, $this->id);

				EventInvitePeer::addSelectColumns($criteria);
				$this->collEventInvitesRelatedByInviterTypeId = EventInvitePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventInvitePeer::INVITER_TYPE_ID, $this->id);

				EventInvitePeer::addSelectColumns($criteria);
				if (!isset($this->lastEventInviteRelatedByInviterTypeIdCriteria) || !$this->lastEventInviteRelatedByInviterTypeIdCriteria->equals($criteria)) {
					$this->collEventInvitesRelatedByInviterTypeId = EventInvitePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventInviteRelatedByInviterTypeIdCriteria = $criteria;
		return $this->collEventInvitesRelatedByInviterTypeId;
	}

	/**
	 * Returns the number of related EventInvite objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EventInvite objects.
	 * @throws     PropelException
	 */
	public function countEventInvitesRelatedByInviterTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventInvitesRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventInvitePeer::INVITER_TYPE_ID, $this->id);

				$count = EventInvitePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventInvitePeer::INVITER_TYPE_ID, $this->id);

				if (!isset($this->lastEventInviteRelatedByInviterTypeIdCriteria) || !$this->lastEventInviteRelatedByInviterTypeIdCriteria->equals($criteria)) {
					$count = EventInvitePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEventInvitesRelatedByInviterTypeId);
				}
			} else {
				$count = count($this->collEventInvitesRelatedByInviterTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EventInvite object to this object
	 * through the EventInvite foreign key attribute.
	 *
	 * @param      EventInvite $l EventInvite
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventInviteRelatedByInviterTypeId(EventInvite $l)
	{
		if ($this->collEventInvitesRelatedByInviterTypeId === null) {
			$this->initEventInvitesRelatedByInviterTypeId();
		}
		if (!in_array($l, $this->collEventInvitesRelatedByInviterTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventInvitesRelatedByInviterTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByInviterTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related EventInvitesRelatedByInviterTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getEventInvitesRelatedByInviterTypeIdJoinEvent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventInvitesRelatedByInviterTypeId === null) {
			if ($this->isNew()) {
				$this->collEventInvitesRelatedByInviterTypeId = array();
			} else {

				$criteria->add(EventInvitePeer::INVITER_TYPE_ID, $this->id);

				$this->collEventInvitesRelatedByInviterTypeId = EventInvitePeer::doSelectJoinEvent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventInvitePeer::INVITER_TYPE_ID, $this->id);

			if (!isset($this->lastEventInviteRelatedByInviterTypeIdCriteria) || !$this->lastEventInviteRelatedByInviterTypeIdCriteria->equals($criteria)) {
				$this->collEventInvitesRelatedByInviterTypeId = EventInvitePeer::doSelectJoinEvent($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventInviteRelatedByInviterTypeIdCriteria = $criteria;

		return $this->collEventInvitesRelatedByInviterTypeId;
	}

	/**
	 * Clears out the collTransferOwnershipRequests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransferOwnershipRequests()
	 */
	public function clearTransferOwnershipRequests()
	{
		$this->collTransferOwnershipRequests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransferOwnershipRequests collection (array).
	 *
	 * By default this just sets the collTransferOwnershipRequests collection to an empty array (like clearcollTransferOwnershipRequests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransferOwnershipRequests()
	{
		$this->collTransferOwnershipRequests = array();
	}

	/**
	 * Gets an array of TransferOwnershipRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related TransferOwnershipRequests from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TransferOwnershipRequest[]
	 * @throws     PropelException
	 */
	public function getTransferOwnershipRequests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequests === null) {
			if ($this->isNew()) {
			   $this->collTransferOwnershipRequests = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

				TransferOwnershipRequestPeer::addSelectColumns($criteria);
				$this->collTransferOwnershipRequests = TransferOwnershipRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

				TransferOwnershipRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransferOwnershipRequestCriteria) || !$this->lastTransferOwnershipRequestCriteria->equals($criteria)) {
					$this->collTransferOwnershipRequests = TransferOwnershipRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransferOwnershipRequestCriteria = $criteria;
		return $this->collTransferOwnershipRequests;
	}

	/**
	 * Returns the number of related TransferOwnershipRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TransferOwnershipRequest objects.
	 * @throws     PropelException
	 */
	public function countTransferOwnershipRequests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransferOwnershipRequests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

				$count = TransferOwnershipRequestPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

				if (!isset($this->lastTransferOwnershipRequestCriteria) || !$this->lastTransferOwnershipRequestCriteria->equals($criteria)) {
					$count = TransferOwnershipRequestPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTransferOwnershipRequests);
				}
			} else {
				$count = count($this->collTransferOwnershipRequests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TransferOwnershipRequest object to this object
	 * through the TransferOwnershipRequest foreign key attribute.
	 *
	 * @param      TransferOwnershipRequest $l TransferOwnershipRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransferOwnershipRequest(TransferOwnershipRequest $l)
	{
		if ($this->collTransferOwnershipRequests === null) {
			$this->initTransferOwnershipRequests();
		}
		if (!in_array($l, $this->collTransferOwnershipRequests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransferOwnershipRequests, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related TransferOwnershipRequests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTransferOwnershipRequestsJoinUserRelatedByProcessInitById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequests === null) {
			if ($this->isNew()) {
				$this->collTransferOwnershipRequests = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

				$this->collTransferOwnershipRequests = TransferOwnershipRequestPeer::doSelectJoinUserRelatedByProcessInitById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

			if (!isset($this->lastTransferOwnershipRequestCriteria) || !$this->lastTransferOwnershipRequestCriteria->equals($criteria)) {
				$this->collTransferOwnershipRequests = TransferOwnershipRequestPeer::doSelectJoinUserRelatedByProcessInitById($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransferOwnershipRequestCriteria = $criteria;

		return $this->collTransferOwnershipRequests;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related TransferOwnershipRequests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTransferOwnershipRequestsJoinUserRelatedByCurrentOwnerId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequests === null) {
			if ($this->isNew()) {
				$this->collTransferOwnershipRequests = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

				$this->collTransferOwnershipRequests = TransferOwnershipRequestPeer::doSelectJoinUserRelatedByCurrentOwnerId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

			if (!isset($this->lastTransferOwnershipRequestCriteria) || !$this->lastTransferOwnershipRequestCriteria->equals($criteria)) {
				$this->collTransferOwnershipRequests = TransferOwnershipRequestPeer::doSelectJoinUserRelatedByCurrentOwnerId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransferOwnershipRequestCriteria = $criteria;

		return $this->collTransferOwnershipRequests;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related TransferOwnershipRequests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTransferOwnershipRequestsJoinUserRelatedByNewOwnerId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequests === null) {
			if ($this->isNew()) {
				$this->collTransferOwnershipRequests = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

				$this->collTransferOwnershipRequests = TransferOwnershipRequestPeer::doSelectJoinUserRelatedByNewOwnerId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransferOwnershipRequestPeer::ACCOUNT_TYPE_ID, $this->id);

			if (!isset($this->lastTransferOwnershipRequestCriteria) || !$this->lastTransferOwnershipRequestCriteria->equals($criteria)) {
				$this->collTransferOwnershipRequests = TransferOwnershipRequestPeer::doSelectJoinUserRelatedByNewOwnerId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransferOwnershipRequestCriteria = $criteria;

		return $this->collTransferOwnershipRequests;
	}

	/**
	 * Clears out the collAnnouncementsRelatedByOwnerTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAnnouncementsRelatedByOwnerTypeId()
	 */
	public function clearAnnouncementsRelatedByOwnerTypeId()
	{
		$this->collAnnouncementsRelatedByOwnerTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAnnouncementsRelatedByOwnerTypeId collection (array).
	 *
	 * By default this just sets the collAnnouncementsRelatedByOwnerTypeId collection to an empty array (like clearcollAnnouncementsRelatedByOwnerTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAnnouncementsRelatedByOwnerTypeId()
	{
		$this->collAnnouncementsRelatedByOwnerTypeId = array();
	}

	/**
	 * Gets an array of Announcement objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related AnnouncementsRelatedByOwnerTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Announcement[]
	 * @throws     PropelException
	 */
	public function getAnnouncementsRelatedByOwnerTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnnouncementsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
			   $this->collAnnouncementsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(AnnouncementPeer::OWNER_TYPE_ID, $this->id);

				AnnouncementPeer::addSelectColumns($criteria);
				$this->collAnnouncementsRelatedByOwnerTypeId = AnnouncementPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AnnouncementPeer::OWNER_TYPE_ID, $this->id);

				AnnouncementPeer::addSelectColumns($criteria);
				if (!isset($this->lastAnnouncementRelatedByOwnerTypeIdCriteria) || !$this->lastAnnouncementRelatedByOwnerTypeIdCriteria->equals($criteria)) {
					$this->collAnnouncementsRelatedByOwnerTypeId = AnnouncementPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAnnouncementRelatedByOwnerTypeIdCriteria = $criteria;
		return $this->collAnnouncementsRelatedByOwnerTypeId;
	}

	/**
	 * Returns the number of related Announcement objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Announcement objects.
	 * @throws     PropelException
	 */
	public function countAnnouncementsRelatedByOwnerTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAnnouncementsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AnnouncementPeer::OWNER_TYPE_ID, $this->id);

				$count = AnnouncementPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AnnouncementPeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastAnnouncementRelatedByOwnerTypeIdCriteria) || !$this->lastAnnouncementRelatedByOwnerTypeIdCriteria->equals($criteria)) {
					$count = AnnouncementPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAnnouncementsRelatedByOwnerTypeId);
				}
			} else {
				$count = count($this->collAnnouncementsRelatedByOwnerTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Announcement object to this object
	 * through the Announcement foreign key attribute.
	 *
	 * @param      Announcement $l Announcement
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAnnouncementRelatedByOwnerTypeId(Announcement $l)
	{
		if ($this->collAnnouncementsRelatedByOwnerTypeId === null) {
			$this->initAnnouncementsRelatedByOwnerTypeId();
		}
		if (!in_array($l, $this->collAnnouncementsRelatedByOwnerTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAnnouncementsRelatedByOwnerTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByOwnerTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related AnnouncementsRelatedByOwnerTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getAnnouncementsRelatedByOwnerTypeIdJoinEmailLayout($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnnouncementsRelatedByOwnerTypeId === null) {
			if ($this->isNew()) {
				$this->collAnnouncementsRelatedByOwnerTypeId = array();
			} else {

				$criteria->add(AnnouncementPeer::OWNER_TYPE_ID, $this->id);

				$this->collAnnouncementsRelatedByOwnerTypeId = AnnouncementPeer::doSelectJoinEmailLayout($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnnouncementPeer::OWNER_TYPE_ID, $this->id);

			if (!isset($this->lastAnnouncementRelatedByOwnerTypeIdCriteria) || !$this->lastAnnouncementRelatedByOwnerTypeIdCriteria->equals($criteria)) {
				$this->collAnnouncementsRelatedByOwnerTypeId = AnnouncementPeer::doSelectJoinEmailLayout($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnnouncementRelatedByOwnerTypeIdCriteria = $criteria;

		return $this->collAnnouncementsRelatedByOwnerTypeId;
	}

	/**
	 * Clears out the collAnnouncementsRelatedByObjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAnnouncementsRelatedByObjectTypeId()
	 */
	public function clearAnnouncementsRelatedByObjectTypeId()
	{
		$this->collAnnouncementsRelatedByObjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAnnouncementsRelatedByObjectTypeId collection (array).
	 *
	 * By default this just sets the collAnnouncementsRelatedByObjectTypeId collection to an empty array (like clearcollAnnouncementsRelatedByObjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAnnouncementsRelatedByObjectTypeId()
	{
		$this->collAnnouncementsRelatedByObjectTypeId = array();
	}

	/**
	 * Gets an array of Announcement objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related AnnouncementsRelatedByObjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Announcement[]
	 * @throws     PropelException
	 */
	public function getAnnouncementsRelatedByObjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnnouncementsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collAnnouncementsRelatedByObjectTypeId = array();
			} else {

				$criteria->add(AnnouncementPeer::OBJECT_TYPE_ID, $this->id);

				AnnouncementPeer::addSelectColumns($criteria);
				$this->collAnnouncementsRelatedByObjectTypeId = AnnouncementPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AnnouncementPeer::OBJECT_TYPE_ID, $this->id);

				AnnouncementPeer::addSelectColumns($criteria);
				if (!isset($this->lastAnnouncementRelatedByObjectTypeIdCriteria) || !$this->lastAnnouncementRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$this->collAnnouncementsRelatedByObjectTypeId = AnnouncementPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAnnouncementRelatedByObjectTypeIdCriteria = $criteria;
		return $this->collAnnouncementsRelatedByObjectTypeId;
	}

	/**
	 * Returns the number of related Announcement objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Announcement objects.
	 * @throws     PropelException
	 */
	public function countAnnouncementsRelatedByObjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAnnouncementsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AnnouncementPeer::OBJECT_TYPE_ID, $this->id);

				$count = AnnouncementPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AnnouncementPeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastAnnouncementRelatedByObjectTypeIdCriteria) || !$this->lastAnnouncementRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$count = AnnouncementPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAnnouncementsRelatedByObjectTypeId);
				}
			} else {
				$count = count($this->collAnnouncementsRelatedByObjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Announcement object to this object
	 * through the Announcement foreign key attribute.
	 *
	 * @param      Announcement $l Announcement
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAnnouncementRelatedByObjectTypeId(Announcement $l)
	{
		if ($this->collAnnouncementsRelatedByObjectTypeId === null) {
			$this->initAnnouncementsRelatedByObjectTypeId();
		}
		if (!in_array($l, $this->collAnnouncementsRelatedByObjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAnnouncementsRelatedByObjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByObjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related AnnouncementsRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getAnnouncementsRelatedByObjectTypeIdJoinEmailLayout($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnnouncementsRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collAnnouncementsRelatedByObjectTypeId = array();
			} else {

				$criteria->add(AnnouncementPeer::OBJECT_TYPE_ID, $this->id);

				$this->collAnnouncementsRelatedByObjectTypeId = AnnouncementPeer::doSelectJoinEmailLayout($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnnouncementPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastAnnouncementRelatedByObjectTypeIdCriteria) || !$this->lastAnnouncementRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collAnnouncementsRelatedByObjectTypeId = AnnouncementPeer::doSelectJoinEmailLayout($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnnouncementRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collAnnouncementsRelatedByObjectTypeId;
	}

	/**
	 * Clears out the collAnnRecipients collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAnnRecipients()
	 */
	public function clearAnnRecipients()
	{
		$this->collAnnRecipients = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAnnRecipients collection (array).
	 *
	 * By default this just sets the collAnnRecipients collection to an empty array (like clearcollAnnRecipients());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAnnRecipients()
	{
		$this->collAnnRecipients = array();
	}

	/**
	 * Gets an array of AnnRecipient objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related AnnRecipients from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AnnRecipient[]
	 * @throws     PropelException
	 */
	public function getAnnRecipients($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnnRecipients === null) {
			if ($this->isNew()) {
			   $this->collAnnRecipients = array();
			} else {

				$criteria->add(AnnRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				AnnRecipientPeer::addSelectColumns($criteria);
				$this->collAnnRecipients = AnnRecipientPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AnnRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				AnnRecipientPeer::addSelectColumns($criteria);
				if (!isset($this->lastAnnRecipientCriteria) || !$this->lastAnnRecipientCriteria->equals($criteria)) {
					$this->collAnnRecipients = AnnRecipientPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAnnRecipientCriteria = $criteria;
		return $this->collAnnRecipients;
	}

	/**
	 * Returns the number of related AnnRecipient objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AnnRecipient objects.
	 * @throws     PropelException
	 */
	public function countAnnRecipients(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAnnRecipients === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AnnRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				$count = AnnRecipientPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AnnRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				if (!isset($this->lastAnnRecipientCriteria) || !$this->lastAnnRecipientCriteria->equals($criteria)) {
					$count = AnnRecipientPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAnnRecipients);
				}
			} else {
				$count = count($this->collAnnRecipients);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AnnRecipient object to this object
	 * through the AnnRecipient foreign key attribute.
	 *
	 * @param      AnnRecipient $l AnnRecipient
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAnnRecipient(AnnRecipient $l)
	{
		if ($this->collAnnRecipients === null) {
			$this->initAnnRecipients();
		}
		if (!in_array($l, $this->collAnnRecipients, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAnnRecipients, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related AnnRecipients from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getAnnRecipientsJoinAnnouncement($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnnRecipients === null) {
			if ($this->isNew()) {
				$this->collAnnRecipients = array();
			} else {

				$criteria->add(AnnRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

				$this->collAnnRecipients = AnnRecipientPeer::doSelectJoinAnnouncement($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnnRecipientPeer::RECIPIENT_TYPE_ID, $this->id);

			if (!isset($this->lastAnnRecipientCriteria) || !$this->lastAnnRecipientCriteria->equals($criteria)) {
				$this->collAnnRecipients = AnnRecipientPeer::doSelectJoinAnnouncement($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnnRecipientCriteria = $criteria;

		return $this->collAnnRecipients;
	}

	/**
	 * Clears out the collEmailLayouts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmailLayouts()
	 */
	public function clearEmailLayouts()
	{
		$this->collEmailLayouts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmailLayouts collection (array).
	 *
	 * By default this just sets the collEmailLayouts collection to an empty array (like clearcollEmailLayouts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmailLayouts()
	{
		$this->collEmailLayouts = array();
	}

	/**
	 * Gets an array of EmailLayout objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related EmailLayouts from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmailLayout[]
	 * @throws     PropelException
	 */
	public function getEmailLayouts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailLayouts === null) {
			if ($this->isNew()) {
			   $this->collEmailLayouts = array();
			} else {

				$criteria->add(EmailLayoutPeer::OWNER_TYPE_ID, $this->id);

				EmailLayoutPeer::addSelectColumns($criteria);
				$this->collEmailLayouts = EmailLayoutPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmailLayoutPeer::OWNER_TYPE_ID, $this->id);

				EmailLayoutPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmailLayoutCriteria) || !$this->lastEmailLayoutCriteria->equals($criteria)) {
					$this->collEmailLayouts = EmailLayoutPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmailLayoutCriteria = $criteria;
		return $this->collEmailLayouts;
	}

	/**
	 * Returns the number of related EmailLayout objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmailLayout objects.
	 * @throws     PropelException
	 */
	public function countEmailLayouts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmailLayouts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmailLayoutPeer::OWNER_TYPE_ID, $this->id);

				$count = EmailLayoutPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmailLayoutPeer::OWNER_TYPE_ID, $this->id);

				if (!isset($this->lastEmailLayoutCriteria) || !$this->lastEmailLayoutCriteria->equals($criteria)) {
					$count = EmailLayoutPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmailLayouts);
				}
			} else {
				$count = count($this->collEmailLayouts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmailLayout object to this object
	 * through the EmailLayout foreign key attribute.
	 *
	 * @param      EmailLayout $l EmailLayout
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmailLayout(EmailLayout $l)
	{
		if ($this->collEmailLayouts === null) {
			$this->initEmailLayouts();
		}
		if (!in_array($l, $this->collEmailLayouts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmailLayouts, $l);
			$l->setPrivacyNodeType($this);
		}
	}

	/**
	 * Clears out the collTradeExperts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTradeExperts()
	 */
	public function clearTradeExperts()
	{
		$this->collTradeExperts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTradeExperts collection (array).
	 *
	 * By default this just sets the collTradeExperts collection to an empty array (like clearcollTradeExperts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTradeExperts()
	{
		$this->collTradeExperts = array();
	}

	/**
	 * Gets an array of TradeExpert objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related TradeExperts from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TradeExpert[]
	 * @throws     PropelException
	 */
	public function getTradeExperts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTradeExperts === null) {
			if ($this->isNew()) {
			   $this->collTradeExperts = array();
			} else {

				$criteria->add(TradeExpertPeer::HOLDER_TYPE_ID, $this->id);

				TradeExpertPeer::addSelectColumns($criteria);
				$this->collTradeExperts = TradeExpertPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TradeExpertPeer::HOLDER_TYPE_ID, $this->id);

				TradeExpertPeer::addSelectColumns($criteria);
				if (!isset($this->lastTradeExpertCriteria) || !$this->lastTradeExpertCriteria->equals($criteria)) {
					$this->collTradeExperts = TradeExpertPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTradeExpertCriteria = $criteria;
		return $this->collTradeExperts;
	}

	/**
	 * Returns the number of related TradeExpert objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TradeExpert objects.
	 * @throws     PropelException
	 */
	public function countTradeExperts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTradeExperts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TradeExpertPeer::HOLDER_TYPE_ID, $this->id);

				$count = TradeExpertPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TradeExpertPeer::HOLDER_TYPE_ID, $this->id);

				if (!isset($this->lastTradeExpertCriteria) || !$this->lastTradeExpertCriteria->equals($criteria)) {
					$count = TradeExpertPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTradeExperts);
				}
			} else {
				$count = count($this->collTradeExperts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TradeExpert object to this object
	 * through the TradeExpert foreign key attribute.
	 *
	 * @param      TradeExpert $l TradeExpert
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTradeExpert(TradeExpert $l)
	{
		if ($this->collTradeExperts === null) {
			$this->initTradeExperts();
		}
		if (!in_array($l, $this->collTradeExperts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTradeExperts, $l);
			$l->setPrivacyNodeType($this);
		}
	}

	/**
	 * Clears out the collTradeExpertClients collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTradeExpertClients()
	 */
	public function clearTradeExpertClients()
	{
		$this->collTradeExpertClients = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTradeExpertClients collection (array).
	 *
	 * By default this just sets the collTradeExpertClients collection to an empty array (like clearcollTradeExpertClients());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTradeExpertClients()
	{
		$this->collTradeExpertClients = array();
	}

	/**
	 * Gets an array of TradeExpertClient objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related TradeExpertClients from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TradeExpertClient[]
	 * @throws     PropelException
	 */
	public function getTradeExpertClients($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTradeExpertClients === null) {
			if ($this->isNew()) {
			   $this->collTradeExpertClients = array();
			} else {

				$criteria->add(TradeExpertClientPeer::CLIENT_TYPE_ID, $this->id);

				TradeExpertClientPeer::addSelectColumns($criteria);
				$this->collTradeExpertClients = TradeExpertClientPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TradeExpertClientPeer::CLIENT_TYPE_ID, $this->id);

				TradeExpertClientPeer::addSelectColumns($criteria);
				if (!isset($this->lastTradeExpertClientCriteria) || !$this->lastTradeExpertClientCriteria->equals($criteria)) {
					$this->collTradeExpertClients = TradeExpertClientPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTradeExpertClientCriteria = $criteria;
		return $this->collTradeExpertClients;
	}

	/**
	 * Returns the number of related TradeExpertClient objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TradeExpertClient objects.
	 * @throws     PropelException
	 */
	public function countTradeExpertClients(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTradeExpertClients === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TradeExpertClientPeer::CLIENT_TYPE_ID, $this->id);

				$count = TradeExpertClientPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TradeExpertClientPeer::CLIENT_TYPE_ID, $this->id);

				if (!isset($this->lastTradeExpertClientCriteria) || !$this->lastTradeExpertClientCriteria->equals($criteria)) {
					$count = TradeExpertClientPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTradeExpertClients);
				}
			} else {
				$count = count($this->collTradeExpertClients);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TradeExpertClient object to this object
	 * through the TradeExpertClient foreign key attribute.
	 *
	 * @param      TradeExpertClient $l TradeExpertClient
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTradeExpertClient(TradeExpertClient $l)
	{
		if ($this->collTradeExpertClients === null) {
			$this->initTradeExpertClients();
		}
		if (!in_array($l, $this->collTradeExpertClients, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTradeExpertClients, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related TradeExpertClients from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTradeExpertClientsJoinTradeExpert($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTradeExpertClients === null) {
			if ($this->isNew()) {
				$this->collTradeExpertClients = array();
			} else {

				$criteria->add(TradeExpertClientPeer::CLIENT_TYPE_ID, $this->id);

				$this->collTradeExpertClients = TradeExpertClientPeer::doSelectJoinTradeExpert($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TradeExpertClientPeer::CLIENT_TYPE_ID, $this->id);

			if (!isset($this->lastTradeExpertClientCriteria) || !$this->lastTradeExpertClientCriteria->equals($criteria)) {
				$this->collTradeExpertClients = TradeExpertClientPeer::doSelectJoinTradeExpert($criteria, $con, $join_behavior);
			}
		}
		$this->lastTradeExpertClientCriteria = $criteria;

		return $this->collTradeExpertClients;
	}

	/**
	 * Clears out the collTasksRelatedByStaffTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTasksRelatedByStaffTypeId()
	 */
	public function clearTasksRelatedByStaffTypeId()
	{
		$this->collTasksRelatedByStaffTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTasksRelatedByStaffTypeId collection (array).
	 *
	 * By default this just sets the collTasksRelatedByStaffTypeId collection to an empty array (like clearcollTasksRelatedByStaffTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTasksRelatedByStaffTypeId()
	{
		$this->collTasksRelatedByStaffTypeId = array();
	}

	/**
	 * Gets an array of Task objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related TasksRelatedByStaffTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Task[]
	 * @throws     PropelException
	 */
	public function getTasksRelatedByStaffTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasksRelatedByStaffTypeId === null) {
			if ($this->isNew()) {
			   $this->collTasksRelatedByStaffTypeId = array();
			} else {

				$criteria->add(TaskPeer::STAFF_TYPE_ID, $this->id);

				TaskPeer::addSelectColumns($criteria);
				$this->collTasksRelatedByStaffTypeId = TaskPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TaskPeer::STAFF_TYPE_ID, $this->id);

				TaskPeer::addSelectColumns($criteria);
				if (!isset($this->lastTaskRelatedByStaffTypeIdCriteria) || !$this->lastTaskRelatedByStaffTypeIdCriteria->equals($criteria)) {
					$this->collTasksRelatedByStaffTypeId = TaskPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTaskRelatedByStaffTypeIdCriteria = $criteria;
		return $this->collTasksRelatedByStaffTypeId;
	}

	/**
	 * Returns the number of related Task objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Task objects.
	 * @throws     PropelException
	 */
	public function countTasksRelatedByStaffTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTasksRelatedByStaffTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TaskPeer::STAFF_TYPE_ID, $this->id);

				$count = TaskPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TaskPeer::STAFF_TYPE_ID, $this->id);

				if (!isset($this->lastTaskRelatedByStaffTypeIdCriteria) || !$this->lastTaskRelatedByStaffTypeIdCriteria->equals($criteria)) {
					$count = TaskPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTasksRelatedByStaffTypeId);
				}
			} else {
				$count = count($this->collTasksRelatedByStaffTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Task object to this object
	 * through the Task foreign key attribute.
	 *
	 * @param      Task $l Task
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTaskRelatedByStaffTypeId(Task $l)
	{
		if ($this->collTasksRelatedByStaffTypeId === null) {
			$this->initTasksRelatedByStaffTypeId();
		}
		if (!in_array($l, $this->collTasksRelatedByStaffTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTasksRelatedByStaffTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByStaffTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related TasksRelatedByStaffTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTasksRelatedByStaffTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasksRelatedByStaffTypeId === null) {
			if ($this->isNew()) {
				$this->collTasksRelatedByStaffTypeId = array();
			} else {

				$criteria->add(TaskPeer::STAFF_TYPE_ID, $this->id);

				$this->collTasksRelatedByStaffTypeId = TaskPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::STAFF_TYPE_ID, $this->id);

			if (!isset($this->lastTaskRelatedByStaffTypeIdCriteria) || !$this->lastTaskRelatedByStaffTypeIdCriteria->equals($criteria)) {
				$this->collTasksRelatedByStaffTypeId = TaskPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskRelatedByStaffTypeIdCriteria = $criteria;

		return $this->collTasksRelatedByStaffTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related TasksRelatedByStaffTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTasksRelatedByStaffTypeIdJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasksRelatedByStaffTypeId === null) {
			if ($this->isNew()) {
				$this->collTasksRelatedByStaffTypeId = array();
			} else {

				$criteria->add(TaskPeer::STAFF_TYPE_ID, $this->id);

				$this->collTasksRelatedByStaffTypeId = TaskPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::STAFF_TYPE_ID, $this->id);

			if (!isset($this->lastTaskRelatedByStaffTypeIdCriteria) || !$this->lastTaskRelatedByStaffTypeIdCriteria->equals($criteria)) {
				$this->collTasksRelatedByStaffTypeId = TaskPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskRelatedByStaffTypeIdCriteria = $criteria;

		return $this->collTasksRelatedByStaffTypeId;
	}

	/**
	 * Clears out the collTasksRelatedByObjectTypeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTasksRelatedByObjectTypeId()
	 */
	public function clearTasksRelatedByObjectTypeId()
	{
		$this->collTasksRelatedByObjectTypeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTasksRelatedByObjectTypeId collection (array).
	 *
	 * By default this just sets the collTasksRelatedByObjectTypeId collection to an empty array (like clearcollTasksRelatedByObjectTypeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTasksRelatedByObjectTypeId()
	{
		$this->collTasksRelatedByObjectTypeId = array();
	}

	/**
	 * Gets an array of Task objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related TasksRelatedByObjectTypeId from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Task[]
	 * @throws     PropelException
	 */
	public function getTasksRelatedByObjectTypeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasksRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
			   $this->collTasksRelatedByObjectTypeId = array();
			} else {

				$criteria->add(TaskPeer::OBJECT_TYPE_ID, $this->id);

				TaskPeer::addSelectColumns($criteria);
				$this->collTasksRelatedByObjectTypeId = TaskPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TaskPeer::OBJECT_TYPE_ID, $this->id);

				TaskPeer::addSelectColumns($criteria);
				if (!isset($this->lastTaskRelatedByObjectTypeIdCriteria) || !$this->lastTaskRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$this->collTasksRelatedByObjectTypeId = TaskPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTaskRelatedByObjectTypeIdCriteria = $criteria;
		return $this->collTasksRelatedByObjectTypeId;
	}

	/**
	 * Returns the number of related Task objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Task objects.
	 * @throws     PropelException
	 */
	public function countTasksRelatedByObjectTypeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTasksRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TaskPeer::OBJECT_TYPE_ID, $this->id);

				$count = TaskPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TaskPeer::OBJECT_TYPE_ID, $this->id);

				if (!isset($this->lastTaskRelatedByObjectTypeIdCriteria) || !$this->lastTaskRelatedByObjectTypeIdCriteria->equals($criteria)) {
					$count = TaskPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTasksRelatedByObjectTypeId);
				}
			} else {
				$count = count($this->collTasksRelatedByObjectTypeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Task object to this object
	 * through the Task foreign key attribute.
	 *
	 * @param      Task $l Task
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTaskRelatedByObjectTypeId(Task $l)
	{
		if ($this->collTasksRelatedByObjectTypeId === null) {
			$this->initTasksRelatedByObjectTypeId();
		}
		if (!in_array($l, $this->collTasksRelatedByObjectTypeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTasksRelatedByObjectTypeId, $l);
			$l->setPrivacyNodeTypeRelatedByObjectTypeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related TasksRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTasksRelatedByObjectTypeIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasksRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collTasksRelatedByObjectTypeId = array();
			} else {

				$criteria->add(TaskPeer::OBJECT_TYPE_ID, $this->id);

				$this->collTasksRelatedByObjectTypeId = TaskPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastTaskRelatedByObjectTypeIdCriteria) || !$this->lastTaskRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collTasksRelatedByObjectTypeId = TaskPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collTasksRelatedByObjectTypeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related TasksRelatedByObjectTypeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTasksRelatedByObjectTypeIdJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasksRelatedByObjectTypeId === null) {
			if ($this->isNew()) {
				$this->collTasksRelatedByObjectTypeId = array();
			} else {

				$criteria->add(TaskPeer::OBJECT_TYPE_ID, $this->id);

				$this->collTasksRelatedByObjectTypeId = TaskPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::OBJECT_TYPE_ID, $this->id);

			if (!isset($this->lastTaskRelatedByObjectTypeIdCriteria) || !$this->lastTaskRelatedByObjectTypeIdCriteria->equals($criteria)) {
				$this->collTasksRelatedByObjectTypeId = TaskPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskRelatedByObjectTypeIdCriteria = $criteria;

		return $this->collTasksRelatedByObjectTypeId;
	}

	/**
	 * Clears out the collTranslators collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTranslators()
	 */
	public function clearTranslators()
	{
		$this->collTranslators = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTranslators collection (array).
	 *
	 * By default this just sets the collTranslators collection to an empty array (like clearcollTranslators());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTranslators()
	{
		$this->collTranslators = array();
	}

	/**
	 * Gets an array of Translator objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType has previously been saved, it will retrieve
	 * related Translators from storage. If this PrivacyNodeType is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Translator[]
	 * @throws     PropelException
	 */
	public function getTranslators($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTranslators === null) {
			if ($this->isNew()) {
			   $this->collTranslators = array();
			} else {

				$criteria->add(TranslatorPeer::HOLDER_TYPE_ID, $this->id);

				TranslatorPeer::addSelectColumns($criteria);
				$this->collTranslators = TranslatorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TranslatorPeer::HOLDER_TYPE_ID, $this->id);

				TranslatorPeer::addSelectColumns($criteria);
				if (!isset($this->lastTranslatorCriteria) || !$this->lastTranslatorCriteria->equals($criteria)) {
					$this->collTranslators = TranslatorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTranslatorCriteria = $criteria;
		return $this->collTranslators;
	}

	/**
	 * Returns the number of related Translator objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Translator objects.
	 * @throws     PropelException
	 */
	public function countTranslators(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTranslators === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TranslatorPeer::HOLDER_TYPE_ID, $this->id);

				$count = TranslatorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TranslatorPeer::HOLDER_TYPE_ID, $this->id);

				if (!isset($this->lastTranslatorCriteria) || !$this->lastTranslatorCriteria->equals($criteria)) {
					$count = TranslatorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTranslators);
				}
			} else {
				$count = count($this->collTranslators);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Translator object to this object
	 * through the Translator foreign key attribute.
	 *
	 * @param      Translator $l Translator
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTranslator(Translator $l)
	{
		if ($this->collTranslators === null) {
			$this->initTranslators();
		}
		if (!in_array($l, $this->collTranslators, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTranslators, $l);
			$l->setPrivacyNodeType($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PrivacyNodeType is new, it will return
	 * an empty collection; or if this PrivacyNodeType has previously
	 * been saved, it will retrieve related Translators from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PrivacyNodeType.
	 */
	public function getTranslatorsJoinTranslatorRelatedByCorporateAccount($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTranslators === null) {
			if ($this->isNew()) {
				$this->collTranslators = array();
			} else {

				$criteria->add(TranslatorPeer::HOLDER_TYPE_ID, $this->id);

				$this->collTranslators = TranslatorPeer::doSelectJoinTranslatorRelatedByCorporateAccount($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TranslatorPeer::HOLDER_TYPE_ID, $this->id);

			if (!isset($this->lastTranslatorCriteria) || !$this->lastTranslatorCriteria->equals($criteria)) {
				$this->collTranslators = TranslatorPeer::doSelectJoinTranslatorRelatedByCorporateAccount($criteria, $con, $join_behavior);
			}
		}
		$this->lastTranslatorCriteria = $criteria;

		return $this->collTranslators;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collRoles) {
				foreach ((array) $this->collRoles as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRoleMatrixsRelatedByObjectTypeId) {
				foreach ((array) $this->collRoleMatrixsRelatedByObjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRoleMatrixsRelatedBySubjectTypeId) {
				foreach ((array) $this->collRoleMatrixsRelatedBySubjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPrivacyNodeTypeI18ns) {
				foreach ((array) $this->collPrivacyNodeTypeI18ns as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPrivacyPreferencesRelatedBySubjectTypeId) {
				foreach ((array) $this->collPrivacyPreferencesRelatedBySubjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPrivacyPreferencesRelatedByObjectTypeId) {
				foreach ((array) $this->collPrivacyPreferencesRelatedByObjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMessagesRelatedBySenderTypeId) {
				foreach ((array) $this->collMessagesRelatedBySenderTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMessagesRelatedByRelatedObjectTypeId) {
				foreach ((array) $this->collMessagesRelatedByRelatedObjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMessageRecipients) {
				foreach ((array) $this->collMessageRecipients as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanyUsers) {
				foreach ((array) $this->collCompanyUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotificationPrefs) {
				foreach ((array) $this->collNotificationPrefs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMediaItemFolders) {
				foreach ((array) $this->collMediaItemFolders as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMediaItems) {
				foreach ((array) $this->collMediaItems as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRatings) {
				foreach ((array) $this->collRatings as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collErrorLogs) {
				foreach ((array) $this->collErrorLogs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collActionLogs) {
				foreach ((array) $this->collActionLogs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collServices) {
				foreach ((array) $this->collServices as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMarketingPackages) {
				foreach ((array) $this->collMarketingPackages as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPurchases) {
				foreach ((array) $this->collPurchases as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPayments) {
				foreach ((array) $this->collPayments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPaymentTransactions) {
				foreach ((array) $this->collPaymentTransactions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCreditAccounts) {
				foreach ((array) $this->collCreditAccounts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJobs) {
				foreach ((array) $this->collJobs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collHRProfiles) {
				foreach ((array) $this->collHRProfiles as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserBookmarks) {
				foreach ((array) $this->collUserBookmarks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collInviteFriendsRelatedByInviterTypeId) {
				foreach ((array) $this->collInviteFriendsRelatedByInviterTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collInviteFriendsRelatedByInvitedToTypeId) {
				foreach ((array) $this->collInviteFriendsRelatedByInvitedToTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGroupMembershipsRelatedByInviterTypeId) {
				foreach ((array) $this->collGroupMembershipsRelatedByInviterTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGroupMembershipsRelatedByObjectTypeId) {
				foreach ((array) $this->collGroupMembershipsRelatedByObjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStatusUpdates) {
				foreach ((array) $this->collStatusUpdates as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLocationUpdates) {
				foreach ((array) $this->collLocationUpdates as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCommentsRelatedByItemTypeId) {
				foreach ((array) $this->collCommentsRelatedByItemTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCommentsRelatedByCommenterTypeId) {
				foreach ((array) $this->collCommentsRelatedByCommenterTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collActionCasesRelatedByIssuerTypeId) {
				foreach ((array) $this->collActionCasesRelatedByIssuerTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collActionCasesRelatedByTargetTypeId) {
				foreach ((array) $this->collActionCasesRelatedByTargetTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRelationUpdatesRelatedBySubjectTypeId) {
				foreach ((array) $this->collRelationUpdatesRelatedBySubjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRelationUpdatesRelatedByObjectTypeId) {
				foreach ((array) $this->collRelationUpdatesRelatedByObjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collWallPostsRelatedByOwnerTypeId) {
				foreach ((array) $this->collWallPostsRelatedByOwnerTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collWallPostsRelatedByPosterTypeId) {
				foreach ((array) $this->collWallPostsRelatedByPosterTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collWallPostsRelatedByItemTypeId) {
				foreach ((array) $this->collWallPostsRelatedByItemTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLikeItsRelatedByPosterTypeId) {
				foreach ((array) $this->collLikeItsRelatedByPosterTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLikeItsRelatedByItemTypeId) {
				foreach ((array) $this->collLikeItsRelatedByItemTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMarketingPackagePricesRelatedByTargetTypeId) {
				foreach ((array) $this->collMarketingPackagePricesRelatedByTargetTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMarketingPackagePricesRelatedByReferenceTypeId) {
				foreach ((array) $this->collMarketingPackagePricesRelatedByReferenceTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPlaces) {
				foreach ((array) $this->collPlaces as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventsRelatedByOwnerTypeId) {
				foreach ((array) $this->collEventsRelatedByOwnerTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventsRelatedByOrganiserTypeId) {
				foreach ((array) $this->collEventsRelatedByOrganiserTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventInvitesRelatedBySubjectTypeId) {
				foreach ((array) $this->collEventInvitesRelatedBySubjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventInvitesRelatedByInviterTypeId) {
				foreach ((array) $this->collEventInvitesRelatedByInviterTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransferOwnershipRequests) {
				foreach ((array) $this->collTransferOwnershipRequests as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAnnouncementsRelatedByOwnerTypeId) {
				foreach ((array) $this->collAnnouncementsRelatedByOwnerTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAnnouncementsRelatedByObjectTypeId) {
				foreach ((array) $this->collAnnouncementsRelatedByObjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAnnRecipients) {
				foreach ((array) $this->collAnnRecipients as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmailLayouts) {
				foreach ((array) $this->collEmailLayouts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTradeExperts) {
				foreach ((array) $this->collTradeExperts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTradeExpertClients) {
				foreach ((array) $this->collTradeExpertClients as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTasksRelatedByStaffTypeId) {
				foreach ((array) $this->collTasksRelatedByStaffTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTasksRelatedByObjectTypeId) {
				foreach ((array) $this->collTasksRelatedByObjectTypeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTranslators) {
				foreach ((array) $this->collTranslators as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collRoles = null;
		$this->collRoleMatrixsRelatedByObjectTypeId = null;
		$this->collRoleMatrixsRelatedBySubjectTypeId = null;
		$this->collPrivacyNodeTypeI18ns = null;
		$this->collPrivacyPreferencesRelatedBySubjectTypeId = null;
		$this->collPrivacyPreferencesRelatedByObjectTypeId = null;
		$this->collMessagesRelatedBySenderTypeId = null;
		$this->collMessagesRelatedByRelatedObjectTypeId = null;
		$this->collMessageRecipients = null;
		$this->collCompanyUsers = null;
		$this->collNotificationPrefs = null;
		$this->collMediaItemFolders = null;
		$this->collMediaItems = null;
		$this->collRatings = null;
		$this->collErrorLogs = null;
		$this->collActionLogs = null;
		$this->collServices = null;
		$this->collMarketingPackages = null;
		$this->collPurchases = null;
		$this->collPayments = null;
		$this->collPaymentTransactions = null;
		$this->collCreditAccounts = null;
		$this->collJobs = null;
		$this->collHRProfiles = null;
		$this->collUserBookmarks = null;
		$this->collInviteFriendsRelatedByInviterTypeId = null;
		$this->collInviteFriendsRelatedByInvitedToTypeId = null;
		$this->collGroupMembershipsRelatedByInviterTypeId = null;
		$this->collGroupMembershipsRelatedByObjectTypeId = null;
		$this->collStatusUpdates = null;
		$this->collLocationUpdates = null;
		$this->collCommentsRelatedByItemTypeId = null;
		$this->collCommentsRelatedByCommenterTypeId = null;
		$this->collActionCasesRelatedByIssuerTypeId = null;
		$this->collActionCasesRelatedByTargetTypeId = null;
		$this->collRelationUpdatesRelatedBySubjectTypeId = null;
		$this->collRelationUpdatesRelatedByObjectTypeId = null;
		$this->collWallPostsRelatedByOwnerTypeId = null;
		$this->collWallPostsRelatedByPosterTypeId = null;
		$this->collWallPostsRelatedByItemTypeId = null;
		$this->collLikeItsRelatedByPosterTypeId = null;
		$this->collLikeItsRelatedByItemTypeId = null;
		$this->collMarketingPackagePricesRelatedByTargetTypeId = null;
		$this->collMarketingPackagePricesRelatedByReferenceTypeId = null;
		$this->collPlaces = null;
		$this->collEventsRelatedByOwnerTypeId = null;
		$this->collEventsRelatedByOrganiserTypeId = null;
		$this->collEventInvitesRelatedBySubjectTypeId = null;
		$this->collEventInvitesRelatedByInviterTypeId = null;
		$this->collTransferOwnershipRequests = null;
		$this->collAnnouncementsRelatedByOwnerTypeId = null;
		$this->collAnnouncementsRelatedByObjectTypeId = null;
		$this->collAnnRecipients = null;
		$this->collEmailLayouts = null;
		$this->collTradeExperts = null;
		$this->collTradeExpertClients = null;
		$this->collTasksRelatedByStaffTypeId = null;
		$this->collTasksRelatedByObjectTypeId = null;
		$this->collTranslators = null;
	}


  /**
   * Returns the culture.
   *
   * @return string The culture
   */
  public function getCulture()
  {
    return $this->culture;
  }

  /**
   * Sets the culture.
   *
   * @param string $culture The culture to set
   *
   * @return void
   */
  public function setCulture($culture)
  {
    $this->culture = $culture;
  }

  public function getName($culture = null)
  {
    return $this->getCurrentPrivacyNodeTypeI18n($culture)->getName();
  }

  public function setName($value, $culture = null)
  {
    $this->getCurrentPrivacyNodeTypeI18n($culture)->setName($value);
  }

  protected $current_i18n = array();

  public function getCurrentPrivacyNodeTypeI18n($culture = null)
  {
    if (is_null($culture))
    {
      $culture = is_null($this->culture) ? sfPropel::getDefaultCulture() : $this->culture;
    }

    if (!isset($this->current_i18n[$culture]))
    {
      $obj = PrivacyNodeTypeI18nPeer::retrieveByPK($this->getId(), $culture);
      if ($obj)
      {
        $this->setPrivacyNodeTypeI18nForCulture($obj, $culture);
      }
      else
      {
        $this->setPrivacyNodeTypeI18nForCulture(new PrivacyNodeTypeI18n(), $culture);
        $this->current_i18n[$culture]->setCulture($culture);
      }
    }

    return $this->current_i18n[$culture];
  }

  public function setPrivacyNodeTypeI18nForCulture($object, $culture)
  {
    $this->current_i18n[$culture] = $object;
    $this->addPrivacyNodeTypeI18n($object);
  }


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasePrivacyNodeType:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasePrivacyNodeType::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasePrivacyNodeType
