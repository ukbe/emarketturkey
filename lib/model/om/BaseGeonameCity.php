<?php

/**
 * Base class that represents a row from the 'EXT_GEONAME' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/10/12 16:10:24
 *
 * @package    lib.model.om
 */
abstract class BaseGeonameCity extends BaseObject  implements Persistent {


  const PEER = 'GeonameCityPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        GeonameCityPeer
	 */
	protected static $peer;

	/**
	 * The value for the geoname_id field.
	 * @var        int
	 */
	protected $geoname_id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the asciiname field.
	 * @var        string
	 */
	protected $asciiname;

	/**
	 * The value for the alternatenames field.
	 * @var        string
	 */
	protected $alternatenames;

	/**
	 * The value for the latitude field.
	 * @var        string
	 */
	protected $latitude;

	/**
	 * The value for the longitude field.
	 * @var        string
	 */
	protected $longitude;

	/**
	 * The value for the feature_class field.
	 * @var        string
	 */
	protected $feature_class;

	/**
	 * The value for the feature_code field.
	 * @var        string
	 */
	protected $feature_code;

	/**
	 * The value for the country_code field.
	 * @var        string
	 */
	protected $country_code;

	/**
	 * The value for the cc2 field.
	 * @var        string
	 */
	protected $cc2;

	/**
	 * The value for the admin1_code field.
	 * @var        string
	 */
	protected $admin1_code;

	/**
	 * The value for the admin2_code field.
	 * @var        string
	 */
	protected $admin2_code;

	/**
	 * The value for the admin3_code field.
	 * @var        string
	 */
	protected $admin3_code;

	/**
	 * The value for the admin4_code field.
	 * @var        string
	 */
	protected $admin4_code;

	/**
	 * The value for the population field.
	 * @var        int
	 */
	protected $population;

	/**
	 * The value for the elevation field.
	 * @var        int
	 */
	protected $elevation;

	/**
	 * The value for the gtopo30 field.
	 * @var        int
	 */
	protected $gtopo30;

	/**
	 * The value for the timezone_id field.
	 * @var        string
	 */
	protected $timezone_id;

	/**
	 * The value for the modification_date field.
	 * @var        string
	 */
	protected $modification_date;

	/**
	 * @var        array ContactAddress[] Collection to store aggregation of ContactAddress objects.
	 */
	protected $collContactAddresss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collContactAddresss.
	 */
	private $lastContactAddressCriteria = null;

	/**
	 * @var        array UserProfile[] Collection to store aggregation of UserProfile objects.
	 */
	protected $collUserProfiles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserProfiles.
	 */
	private $lastUserProfileCriteria = null;

	/**
	 * @var        GeonameCountry one-to-one related GeonameCountry object
	 */
	protected $singleGeonameCountry;

	/**
	 * @var        array GeonameHierarchy[] Collection to store aggregation of GeonameHierarchy objects.
	 */
	protected $collGeonameHierarchysRelatedByParentId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGeonameHierarchysRelatedByParentId.
	 */
	private $lastGeonameHierarchyRelatedByParentIdCriteria = null;

	/**
	 * @var        array GeonameHierarchy[] Collection to store aggregation of GeonameHierarchy objects.
	 */
	protected $collGeonameHierarchysRelatedByChildId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGeonameHierarchysRelatedByChildId.
	 */
	private $lastGeonameHierarchyRelatedByChildIdCriteria = null;

	/**
	 * @var        array LocationUpdate[] Collection to store aggregation of LocationUpdate objects.
	 */
	protected $collLocationUpdatesRelatedByState;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLocationUpdatesRelatedByState.
	 */
	private $lastLocationUpdateRelatedByStateCriteria = null;

	/**
	 * @var        array LocationUpdate[] Collection to store aggregation of LocationUpdate objects.
	 */
	protected $collLocationUpdatesRelatedByCity;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLocationUpdatesRelatedByCity.
	 */
	private $lastLocationUpdateRelatedByCityCriteria = null;

	/**
	 * @var        array PostLocation[] Collection to store aggregation of PostLocation objects.
	 */
	protected $collPostLocationsRelatedByState;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostLocationsRelatedByState.
	 */
	private $lastPostLocationRelatedByStateCriteria = null;

	/**
	 * @var        array PostLocation[] Collection to store aggregation of PostLocation objects.
	 */
	protected $collPostLocationsRelatedByCity;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostLocationsRelatedByCity.
	 */
	private $lastPostLocationRelatedByCityCriteria = null;

	/**
	 * @var        array JobLocation[] Collection to store aggregation of JobLocation objects.
	 */
	protected $collJobLocations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJobLocations.
	 */
	private $lastJobLocationCriteria = null;

	/**
	 * @var        array MarketingPackagePrice[] Collection to store aggregation of MarketingPackagePrice objects.
	 */
	protected $collMarketingPackagePrices;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMarketingPackagePrices.
	 */
	private $lastMarketingPackagePriceCriteria = null;

	/**
	 * @var        array Place[] Collection to store aggregation of Place objects.
	 */
	protected $collPlaces;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPlaces.
	 */
	private $lastPlaceCriteria = null;

	/**
	 * @var        array Event[] Collection to store aggregation of Event objects.
	 */
	protected $collEvents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEvents.
	 */
	private $lastEventCriteria = null;

	/**
	 * @var        array TradeExpertArea[] Collection to store aggregation of TradeExpertArea objects.
	 */
	protected $collTradeExpertAreas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTradeExpertAreas.
	 */
	private $lastTradeExpertAreaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseGeonameCity object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [geoname_id] column value.
	 * 
	 * @return     int
	 */
	public function getGeonameId()
	{
		return $this->geoname_id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [asciiname] column value.
	 * 
	 * @return     string
	 */
	public function getAsciiname()
	{
		return $this->asciiname;
	}

	/**
	 * Get the [alternatenames] column value.
	 * 
	 * @return     string
	 */
	public function getAlternatenames()
	{
		return $this->alternatenames;
	}

	/**
	 * Get the [latitude] column value.
	 * 
	 * @return     string
	 */
	public function getLatitude()
	{
		return $this->latitude;
	}

	/**
	 * Get the [longitude] column value.
	 * 
	 * @return     string
	 */
	public function getLongitude()
	{
		return $this->longitude;
	}

	/**
	 * Get the [feature_class] column value.
	 * 
	 * @return     string
	 */
	public function getFeatureClass()
	{
		return $this->feature_class;
	}

	/**
	 * Get the [feature_code] column value.
	 * 
	 * @return     string
	 */
	public function getFeatureCode()
	{
		return $this->feature_code;
	}

	/**
	 * Get the [country_code] column value.
	 * 
	 * @return     string
	 */
	public function getCountryCode()
	{
		return $this->country_code;
	}

	/**
	 * Get the [cc2] column value.
	 * 
	 * @return     string
	 */
	public function getCc2()
	{
		return $this->cc2;
	}

	/**
	 * Get the [admin1_code] column value.
	 * 
	 * @return     string
	 */
	public function getAdmin1Code()
	{
		return $this->admin1_code;
	}

	/**
	 * Get the [admin2_code] column value.
	 * 
	 * @return     string
	 */
	public function getAdmin2Code()
	{
		return $this->admin2_code;
	}

	/**
	 * Get the [admin3_code] column value.
	 * 
	 * @return     string
	 */
	public function getAdmin3Code()
	{
		return $this->admin3_code;
	}

	/**
	 * Get the [admin4_code] column value.
	 * 
	 * @return     string
	 */
	public function getAdmin4Code()
	{
		return $this->admin4_code;
	}

	/**
	 * Get the [population] column value.
	 * 
	 * @return     int
	 */
	public function getPopulation()
	{
		return $this->population;
	}

	/**
	 * Get the [elevation] column value.
	 * 
	 * @return     int
	 */
	public function getElevation()
	{
		return $this->elevation;
	}

	/**
	 * Get the [gtopo30] column value.
	 * 
	 * @return     int
	 */
	public function getGtopo30()
	{
		return $this->gtopo30;
	}

	/**
	 * Get the [timezone_id] column value.
	 * 
	 * @return     string
	 */
	public function getTimezoneId()
	{
		return $this->timezone_id;
	}

	/**
	 * Get the [optionally formatted] temporal [modification_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getModificationDate($format = 'Y-m-d')
	{
		if ($this->modification_date === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->modification_date);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->modification_date, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [geoname_id] column.
	 * 
	 * @param      int $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setGeonameId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->geoname_id !== $v) {
			$this->geoname_id = $v;
			$this->modifiedColumns[] = GeonameCityPeer::GEONAME_ID;
		}

		return $this;
	} // setGeonameId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = GeonameCityPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [asciiname] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setAsciiname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->asciiname !== $v) {
			$this->asciiname = $v;
			$this->modifiedColumns[] = GeonameCityPeer::ASCIINAME;
		}

		return $this;
	} // setAsciiname()

	/**
	 * Set the value of [alternatenames] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setAlternatenames($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alternatenames !== $v) {
			$this->alternatenames = $v;
			$this->modifiedColumns[] = GeonameCityPeer::ALTERNATENAMES;
		}

		return $this;
	} // setAlternatenames()

	/**
	 * Set the value of [latitude] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setLatitude($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->latitude !== $v) {
			$this->latitude = $v;
			$this->modifiedColumns[] = GeonameCityPeer::LATITUDE;
		}

		return $this;
	} // setLatitude()

	/**
	 * Set the value of [longitude] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setLongitude($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->longitude !== $v) {
			$this->longitude = $v;
			$this->modifiedColumns[] = GeonameCityPeer::LONGITUDE;
		}

		return $this;
	} // setLongitude()

	/**
	 * Set the value of [feature_class] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setFeatureClass($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->feature_class !== $v) {
			$this->feature_class = $v;
			$this->modifiedColumns[] = GeonameCityPeer::FEATURE_CLASS;
		}

		return $this;
	} // setFeatureClass()

	/**
	 * Set the value of [feature_code] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setFeatureCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->feature_code !== $v) {
			$this->feature_code = $v;
			$this->modifiedColumns[] = GeonameCityPeer::FEATURE_CODE;
		}

		return $this;
	} // setFeatureCode()

	/**
	 * Set the value of [country_code] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setCountryCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country_code !== $v) {
			$this->country_code = $v;
			$this->modifiedColumns[] = GeonameCityPeer::COUNTRY_CODE;
		}

		return $this;
	} // setCountryCode()

	/**
	 * Set the value of [cc2] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setCc2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cc2 !== $v) {
			$this->cc2 = $v;
			$this->modifiedColumns[] = GeonameCityPeer::CC2;
		}

		return $this;
	} // setCc2()

	/**
	 * Set the value of [admin1_code] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setAdmin1Code($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->admin1_code !== $v) {
			$this->admin1_code = $v;
			$this->modifiedColumns[] = GeonameCityPeer::ADMIN1_CODE;
		}

		return $this;
	} // setAdmin1Code()

	/**
	 * Set the value of [admin2_code] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setAdmin2Code($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->admin2_code !== $v) {
			$this->admin2_code = $v;
			$this->modifiedColumns[] = GeonameCityPeer::ADMIN2_CODE;
		}

		return $this;
	} // setAdmin2Code()

	/**
	 * Set the value of [admin3_code] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setAdmin3Code($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->admin3_code !== $v) {
			$this->admin3_code = $v;
			$this->modifiedColumns[] = GeonameCityPeer::ADMIN3_CODE;
		}

		return $this;
	} // setAdmin3Code()

	/**
	 * Set the value of [admin4_code] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setAdmin4Code($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->admin4_code !== $v) {
			$this->admin4_code = $v;
			$this->modifiedColumns[] = GeonameCityPeer::ADMIN4_CODE;
		}

		return $this;
	} // setAdmin4Code()

	/**
	 * Set the value of [population] column.
	 * 
	 * @param      int $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setPopulation($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->population !== $v) {
			$this->population = $v;
			$this->modifiedColumns[] = GeonameCityPeer::POPULATION;
		}

		return $this;
	} // setPopulation()

	/**
	 * Set the value of [elevation] column.
	 * 
	 * @param      int $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setElevation($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->elevation !== $v) {
			$this->elevation = $v;
			$this->modifiedColumns[] = GeonameCityPeer::ELEVATION;
		}

		return $this;
	} // setElevation()

	/**
	 * Set the value of [gtopo30] column.
	 * 
	 * @param      int $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setGtopo30($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->gtopo30 !== $v) {
			$this->gtopo30 = $v;
			$this->modifiedColumns[] = GeonameCityPeer::GTOPO30;
		}

		return $this;
	} // setGtopo30()

	/**
	 * Set the value of [timezone_id] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setTimezoneId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->timezone_id !== $v) {
			$this->timezone_id = $v;
			$this->modifiedColumns[] = GeonameCityPeer::TIMEZONE_ID;
		}

		return $this;
	} // setTimezoneId()

	/**
	 * Sets the value of [modification_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     GeonameCity The current object (for fluent API support)
	 */
	public function setModificationDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->modification_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->modification_date !== null && $tmpDt = new DateTime($this->modification_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->modification_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = GeonameCityPeer::MODIFICATION_DATE;
			}
		} // if either are not null

		return $this;
	} // setModificationDate()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->geoname_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->asciiname = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->alternatenames = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->latitude = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->longitude = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->feature_class = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->feature_code = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->country_code = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->cc2 = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->admin1_code = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->admin2_code = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->admin3_code = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->admin4_code = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->population = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->elevation = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->gtopo30 = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->timezone_id = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->modification_date = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 19; // 19 = GeonameCityPeer::NUM_COLUMNS - GeonameCityPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating GeonameCity object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GeonameCityPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = GeonameCityPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collContactAddresss = null;
			$this->lastContactAddressCriteria = null;

			$this->collUserProfiles = null;
			$this->lastUserProfileCriteria = null;

			$this->singleGeonameCountry = null;

			$this->collGeonameHierarchysRelatedByParentId = null;
			$this->lastGeonameHierarchyRelatedByParentIdCriteria = null;

			$this->collGeonameHierarchysRelatedByChildId = null;
			$this->lastGeonameHierarchyRelatedByChildIdCriteria = null;

			$this->collLocationUpdatesRelatedByState = null;
			$this->lastLocationUpdateRelatedByStateCriteria = null;

			$this->collLocationUpdatesRelatedByCity = null;
			$this->lastLocationUpdateRelatedByCityCriteria = null;

			$this->collPostLocationsRelatedByState = null;
			$this->lastPostLocationRelatedByStateCriteria = null;

			$this->collPostLocationsRelatedByCity = null;
			$this->lastPostLocationRelatedByCityCriteria = null;

			$this->collJobLocations = null;
			$this->lastJobLocationCriteria = null;

			$this->collMarketingPackagePrices = null;
			$this->lastMarketingPackagePriceCriteria = null;

			$this->collPlaces = null;
			$this->lastPlaceCriteria = null;

			$this->collEvents = null;
			$this->lastEventCriteria = null;

			$this->collTradeExpertAreas = null;
			$this->lastTradeExpertAreaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseGeonameCity:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GeonameCityPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			GeonameCityPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseGeonameCity:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseGeonameCity:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GeonameCityPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseGeonameCity:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			GeonameCityPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = GeonameCityPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += GeonameCityPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collContactAddresss !== null) {
				foreach ($this->collContactAddresss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserProfiles !== null) {
				foreach ($this->collUserProfiles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->singleGeonameCountry !== null) {
				if (!$this->singleGeonameCountry->isDeleted()) {
						$affectedRows += $this->singleGeonameCountry->save($con);
				}
			}

			if ($this->collGeonameHierarchysRelatedByParentId !== null) {
				foreach ($this->collGeonameHierarchysRelatedByParentId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGeonameHierarchysRelatedByChildId !== null) {
				foreach ($this->collGeonameHierarchysRelatedByChildId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLocationUpdatesRelatedByState !== null) {
				foreach ($this->collLocationUpdatesRelatedByState as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLocationUpdatesRelatedByCity !== null) {
				foreach ($this->collLocationUpdatesRelatedByCity as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPostLocationsRelatedByState !== null) {
				foreach ($this->collPostLocationsRelatedByState as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPostLocationsRelatedByCity !== null) {
				foreach ($this->collPostLocationsRelatedByCity as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJobLocations !== null) {
				foreach ($this->collJobLocations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMarketingPackagePrices !== null) {
				foreach ($this->collMarketingPackagePrices as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPlaces !== null) {
				foreach ($this->collPlaces as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEvents !== null) {
				foreach ($this->collEvents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTradeExpertAreas !== null) {
				foreach ($this->collTradeExpertAreas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = GeonameCityPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collContactAddresss !== null) {
					foreach ($this->collContactAddresss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserProfiles !== null) {
					foreach ($this->collUserProfiles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->singleGeonameCountry !== null) {
					if (!$this->singleGeonameCountry->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singleGeonameCountry->getValidationFailures());
					}
				}

				if ($this->collGeonameHierarchysRelatedByParentId !== null) {
					foreach ($this->collGeonameHierarchysRelatedByParentId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGeonameHierarchysRelatedByChildId !== null) {
					foreach ($this->collGeonameHierarchysRelatedByChildId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLocationUpdatesRelatedByState !== null) {
					foreach ($this->collLocationUpdatesRelatedByState as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLocationUpdatesRelatedByCity !== null) {
					foreach ($this->collLocationUpdatesRelatedByCity as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPostLocationsRelatedByState !== null) {
					foreach ($this->collPostLocationsRelatedByState as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPostLocationsRelatedByCity !== null) {
					foreach ($this->collPostLocationsRelatedByCity as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJobLocations !== null) {
					foreach ($this->collJobLocations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMarketingPackagePrices !== null) {
					foreach ($this->collMarketingPackagePrices as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPlaces !== null) {
					foreach ($this->collPlaces as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEvents !== null) {
					foreach ($this->collEvents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTradeExpertAreas !== null) {
					foreach ($this->collTradeExpertAreas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = GeonameCityPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getGeonameId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getAsciiname();
				break;
			case 3:
				return $this->getAlternatenames();
				break;
			case 4:
				return $this->getLatitude();
				break;
			case 5:
				return $this->getLongitude();
				break;
			case 6:
				return $this->getFeatureClass();
				break;
			case 7:
				return $this->getFeatureCode();
				break;
			case 8:
				return $this->getCountryCode();
				break;
			case 9:
				return $this->getCc2();
				break;
			case 10:
				return $this->getAdmin1Code();
				break;
			case 11:
				return $this->getAdmin2Code();
				break;
			case 12:
				return $this->getAdmin3Code();
				break;
			case 13:
				return $this->getAdmin4Code();
				break;
			case 14:
				return $this->getPopulation();
				break;
			case 15:
				return $this->getElevation();
				break;
			case 16:
				return $this->getGtopo30();
				break;
			case 17:
				return $this->getTimezoneId();
				break;
			case 18:
				return $this->getModificationDate();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = GeonameCityPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getGeonameId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getAsciiname(),
			$keys[3] => $this->getAlternatenames(),
			$keys[4] => $this->getLatitude(),
			$keys[5] => $this->getLongitude(),
			$keys[6] => $this->getFeatureClass(),
			$keys[7] => $this->getFeatureCode(),
			$keys[8] => $this->getCountryCode(),
			$keys[9] => $this->getCc2(),
			$keys[10] => $this->getAdmin1Code(),
			$keys[11] => $this->getAdmin2Code(),
			$keys[12] => $this->getAdmin3Code(),
			$keys[13] => $this->getAdmin4Code(),
			$keys[14] => $this->getPopulation(),
			$keys[15] => $this->getElevation(),
			$keys[16] => $this->getGtopo30(),
			$keys[17] => $this->getTimezoneId(),
			$keys[18] => $this->getModificationDate(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = GeonameCityPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setGeonameId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setAsciiname($value);
				break;
			case 3:
				$this->setAlternatenames($value);
				break;
			case 4:
				$this->setLatitude($value);
				break;
			case 5:
				$this->setLongitude($value);
				break;
			case 6:
				$this->setFeatureClass($value);
				break;
			case 7:
				$this->setFeatureCode($value);
				break;
			case 8:
				$this->setCountryCode($value);
				break;
			case 9:
				$this->setCc2($value);
				break;
			case 10:
				$this->setAdmin1Code($value);
				break;
			case 11:
				$this->setAdmin2Code($value);
				break;
			case 12:
				$this->setAdmin3Code($value);
				break;
			case 13:
				$this->setAdmin4Code($value);
				break;
			case 14:
				$this->setPopulation($value);
				break;
			case 15:
				$this->setElevation($value);
				break;
			case 16:
				$this->setGtopo30($value);
				break;
			case 17:
				$this->setTimezoneId($value);
				break;
			case 18:
				$this->setModificationDate($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = GeonameCityPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setGeonameId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAsciiname($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setAlternatenames($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setLatitude($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setLongitude($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFeatureClass($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setFeatureCode($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCountryCode($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCc2($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAdmin1Code($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAdmin2Code($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setAdmin3Code($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setAdmin4Code($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPopulation($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setElevation($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setGtopo30($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTimezoneId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setModificationDate($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);

		if ($this->isColumnModified(GeonameCityPeer::GEONAME_ID)) $criteria->add(GeonameCityPeer::GEONAME_ID, $this->geoname_id);
		if ($this->isColumnModified(GeonameCityPeer::NAME)) $criteria->add(GeonameCityPeer::NAME, $this->name);
		if ($this->isColumnModified(GeonameCityPeer::ASCIINAME)) $criteria->add(GeonameCityPeer::ASCIINAME, $this->asciiname);
		if ($this->isColumnModified(GeonameCityPeer::ALTERNATENAMES)) $criteria->add(GeonameCityPeer::ALTERNATENAMES, $this->alternatenames);
		if ($this->isColumnModified(GeonameCityPeer::LATITUDE)) $criteria->add(GeonameCityPeer::LATITUDE, $this->latitude);
		if ($this->isColumnModified(GeonameCityPeer::LONGITUDE)) $criteria->add(GeonameCityPeer::LONGITUDE, $this->longitude);
		if ($this->isColumnModified(GeonameCityPeer::FEATURE_CLASS)) $criteria->add(GeonameCityPeer::FEATURE_CLASS, $this->feature_class);
		if ($this->isColumnModified(GeonameCityPeer::FEATURE_CODE)) $criteria->add(GeonameCityPeer::FEATURE_CODE, $this->feature_code);
		if ($this->isColumnModified(GeonameCityPeer::COUNTRY_CODE)) $criteria->add(GeonameCityPeer::COUNTRY_CODE, $this->country_code);
		if ($this->isColumnModified(GeonameCityPeer::CC2)) $criteria->add(GeonameCityPeer::CC2, $this->cc2);
		if ($this->isColumnModified(GeonameCityPeer::ADMIN1_CODE)) $criteria->add(GeonameCityPeer::ADMIN1_CODE, $this->admin1_code);
		if ($this->isColumnModified(GeonameCityPeer::ADMIN2_CODE)) $criteria->add(GeonameCityPeer::ADMIN2_CODE, $this->admin2_code);
		if ($this->isColumnModified(GeonameCityPeer::ADMIN3_CODE)) $criteria->add(GeonameCityPeer::ADMIN3_CODE, $this->admin3_code);
		if ($this->isColumnModified(GeonameCityPeer::ADMIN4_CODE)) $criteria->add(GeonameCityPeer::ADMIN4_CODE, $this->admin4_code);
		if ($this->isColumnModified(GeonameCityPeer::POPULATION)) $criteria->add(GeonameCityPeer::POPULATION, $this->population);
		if ($this->isColumnModified(GeonameCityPeer::ELEVATION)) $criteria->add(GeonameCityPeer::ELEVATION, $this->elevation);
		if ($this->isColumnModified(GeonameCityPeer::GTOPO30)) $criteria->add(GeonameCityPeer::GTOPO30, $this->gtopo30);
		if ($this->isColumnModified(GeonameCityPeer::TIMEZONE_ID)) $criteria->add(GeonameCityPeer::TIMEZONE_ID, $this->timezone_id);
		if ($this->isColumnModified(GeonameCityPeer::MODIFICATION_DATE)) $criteria->add(GeonameCityPeer::MODIFICATION_DATE, $this->modification_date);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);

		$criteria->add(GeonameCityPeer::GEONAME_ID, $this->geoname_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getGeonameId();
	}

	/**
	 * Generic method to set the primary key (geoname_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setGeonameId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of GeonameCity (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setGeonameId($this->geoname_id);

		$copyObj->setName($this->name);

		$copyObj->setAsciiname($this->asciiname);

		$copyObj->setAlternatenames($this->alternatenames);

		$copyObj->setLatitude($this->latitude);

		$copyObj->setLongitude($this->longitude);

		$copyObj->setFeatureClass($this->feature_class);

		$copyObj->setFeatureCode($this->feature_code);

		$copyObj->setCountryCode($this->country_code);

		$copyObj->setCc2($this->cc2);

		$copyObj->setAdmin1Code($this->admin1_code);

		$copyObj->setAdmin2Code($this->admin2_code);

		$copyObj->setAdmin3Code($this->admin3_code);

		$copyObj->setAdmin4Code($this->admin4_code);

		$copyObj->setPopulation($this->population);

		$copyObj->setElevation($this->elevation);

		$copyObj->setGtopo30($this->gtopo30);

		$copyObj->setTimezoneId($this->timezone_id);

		$copyObj->setModificationDate($this->modification_date);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getContactAddresss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addContactAddress($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserProfiles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserProfile($relObj->copy($deepCopy));
				}
			}

			$relObj = $this->getGeonameCountry();
			if ($relObj) {
				$copyObj->setGeonameCountry($relObj->copy($deepCopy));
			}

			foreach ($this->getGeonameHierarchysRelatedByParentId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGeonameHierarchyRelatedByParentId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGeonameHierarchysRelatedByChildId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGeonameHierarchyRelatedByChildId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLocationUpdatesRelatedByState() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLocationUpdateRelatedByState($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLocationUpdatesRelatedByCity() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLocationUpdateRelatedByCity($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPostLocationsRelatedByState() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostLocationRelatedByState($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPostLocationsRelatedByCity() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostLocationRelatedByCity($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJobLocations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJobLocation($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMarketingPackagePrices() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMarketingPackagePrice($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPlaces() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPlace($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEvents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEvent($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTradeExpertAreas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTradeExpertArea($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     GeonameCity Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     GeonameCityPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new GeonameCityPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collContactAddresss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addContactAddresss()
	 */
	public function clearContactAddresss()
	{
		$this->collContactAddresss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collContactAddresss collection (array).
	 *
	 * By default this just sets the collContactAddresss collection to an empty array (like clearcollContactAddresss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initContactAddresss()
	{
		$this->collContactAddresss = array();
	}

	/**
	 * Gets an array of ContactAddress objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related ContactAddresss from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ContactAddress[]
	 * @throws     PropelException
	 */
	public function getContactAddresss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContactAddresss === null) {
			if ($this->isNew()) {
			   $this->collContactAddresss = array();
			} else {

				$criteria->add(ContactAddressPeer::STATE, $this->geoname_id);

				ContactAddressPeer::addSelectColumns($criteria);
				$this->collContactAddresss = ContactAddressPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ContactAddressPeer::STATE, $this->geoname_id);

				ContactAddressPeer::addSelectColumns($criteria);
				if (!isset($this->lastContactAddressCriteria) || !$this->lastContactAddressCriteria->equals($criteria)) {
					$this->collContactAddresss = ContactAddressPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastContactAddressCriteria = $criteria;
		return $this->collContactAddresss;
	}

	/**
	 * Returns the number of related ContactAddress objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ContactAddress objects.
	 * @throws     PropelException
	 */
	public function countContactAddresss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collContactAddresss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ContactAddressPeer::STATE, $this->geoname_id);

				$count = ContactAddressPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ContactAddressPeer::STATE, $this->geoname_id);

				if (!isset($this->lastContactAddressCriteria) || !$this->lastContactAddressCriteria->equals($criteria)) {
					$count = ContactAddressPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collContactAddresss);
				}
			} else {
				$count = count($this->collContactAddresss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ContactAddress object to this object
	 * through the ContactAddress foreign key attribute.
	 *
	 * @param      ContactAddress $l ContactAddress
	 * @return     void
	 * @throws     PropelException
	 */
	public function addContactAddress(ContactAddress $l)
	{
		if ($this->collContactAddresss === null) {
			$this->initContactAddresss();
		}
		if (!in_array($l, $this->collContactAddresss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collContactAddresss, $l);
			$l->setGeonameCity($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related ContactAddresss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getContactAddresssJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContactAddresss === null) {
			if ($this->isNew()) {
				$this->collContactAddresss = array();
			} else {

				$criteria->add(ContactAddressPeer::STATE, $this->geoname_id);

				$this->collContactAddresss = ContactAddressPeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ContactAddressPeer::STATE, $this->geoname_id);

			if (!isset($this->lastContactAddressCriteria) || !$this->lastContactAddressCriteria->equals($criteria)) {
				$this->collContactAddresss = ContactAddressPeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastContactAddressCriteria = $criteria;

		return $this->collContactAddresss;
	}

	/**
	 * Clears out the collUserProfiles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserProfiles()
	 */
	public function clearUserProfiles()
	{
		$this->collUserProfiles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserProfiles collection (array).
	 *
	 * By default this just sets the collUserProfiles collection to an empty array (like clearcollUserProfiles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserProfiles()
	{
		$this->collUserProfiles = array();
	}

	/**
	 * Gets an array of UserProfile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related UserProfiles from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserProfile[]
	 * @throws     PropelException
	 */
	public function getUserProfiles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
			   $this->collUserProfiles = array();
			} else {

				$criteria->add(UserProfilePeer::HOME_TOWN_ID, $this->geoname_id);

				UserProfilePeer::addSelectColumns($criteria);
				$this->collUserProfiles = UserProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserProfilePeer::HOME_TOWN_ID, $this->geoname_id);

				UserProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
					$this->collUserProfiles = UserProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserProfileCriteria = $criteria;
		return $this->collUserProfiles;
	}

	/**
	 * Returns the number of related UserProfile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserProfile objects.
	 * @throws     PropelException
	 */
	public function countUserProfiles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserProfilePeer::HOME_TOWN_ID, $this->geoname_id);

				$count = UserProfilePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserProfilePeer::HOME_TOWN_ID, $this->geoname_id);

				if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
					$count = UserProfilePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUserProfiles);
				}
			} else {
				$count = count($this->collUserProfiles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserProfile object to this object
	 * through the UserProfile foreign key attribute.
	 *
	 * @param      UserProfile $l UserProfile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserProfile(UserProfile $l)
	{
		if ($this->collUserProfiles === null) {
			$this->initUserProfiles();
		}
		if (!in_array($l, $this->collUserProfiles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserProfiles, $l);
			$l->setGeonameCity($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related UserProfiles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getUserProfilesJoinMediaItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
				$this->collUserProfiles = array();
			} else {

				$criteria->add(UserProfilePeer::HOME_TOWN_ID, $this->geoname_id);

				$this->collUserProfiles = UserProfilePeer::doSelectJoinMediaItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserProfilePeer::HOME_TOWN_ID, $this->geoname_id);

			if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
				$this->collUserProfiles = UserProfilePeer::doSelectJoinMediaItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserProfileCriteria = $criteria;

		return $this->collUserProfiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related UserProfiles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getUserProfilesJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
				$this->collUserProfiles = array();
			} else {

				$criteria->add(UserProfilePeer::HOME_TOWN_ID, $this->geoname_id);

				$this->collUserProfiles = UserProfilePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserProfilePeer::HOME_TOWN_ID, $this->geoname_id);

			if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
				$this->collUserProfiles = UserProfilePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserProfileCriteria = $criteria;

		return $this->collUserProfiles;
	}

	/**
	 * Gets a single GeonameCountry object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     GeonameCountry
	 * @throws     PropelException
	 */
	public function getGeonameCountry(PropelPDO $con = null)
	{

		if ($this->singleGeonameCountry === null && !$this->isNew()) {
			$this->singleGeonameCountry = GeonameCountryPeer::retrieveByPK($this->geoname_id, $con);
		}

		return $this->singleGeonameCountry;
	}

	/**
	 * Sets a single GeonameCountry object as related to this object by a one-to-one relationship.
	 *
	 * @param      GeonameCountry $l GeonameCountry
	 * @return     GeonameCity The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setGeonameCountry(GeonameCountry $v)
	{
		$this->singleGeonameCountry = $v;

		// Make sure that that the passed-in GeonameCountry isn't already associated with this object
		if ($v->getGeonameCity() === null) {
			$v->setGeonameCity($this);
		}

		return $this;
	}

	/**
	 * Clears out the collGeonameHierarchysRelatedByParentId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGeonameHierarchysRelatedByParentId()
	 */
	public function clearGeonameHierarchysRelatedByParentId()
	{
		$this->collGeonameHierarchysRelatedByParentId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGeonameHierarchysRelatedByParentId collection (array).
	 *
	 * By default this just sets the collGeonameHierarchysRelatedByParentId collection to an empty array (like clearcollGeonameHierarchysRelatedByParentId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGeonameHierarchysRelatedByParentId()
	{
		$this->collGeonameHierarchysRelatedByParentId = array();
	}

	/**
	 * Gets an array of GeonameHierarchy objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related GeonameHierarchysRelatedByParentId from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GeonameHierarchy[]
	 * @throws     PropelException
	 */
	public function getGeonameHierarchysRelatedByParentId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGeonameHierarchysRelatedByParentId === null) {
			if ($this->isNew()) {
			   $this->collGeonameHierarchysRelatedByParentId = array();
			} else {

				$criteria->add(GeonameHierarchyPeer::PARENT_ID, $this->geoname_id);

				GeonameHierarchyPeer::addSelectColumns($criteria);
				$this->collGeonameHierarchysRelatedByParentId = GeonameHierarchyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GeonameHierarchyPeer::PARENT_ID, $this->geoname_id);

				GeonameHierarchyPeer::addSelectColumns($criteria);
				if (!isset($this->lastGeonameHierarchyRelatedByParentIdCriteria) || !$this->lastGeonameHierarchyRelatedByParentIdCriteria->equals($criteria)) {
					$this->collGeonameHierarchysRelatedByParentId = GeonameHierarchyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGeonameHierarchyRelatedByParentIdCriteria = $criteria;
		return $this->collGeonameHierarchysRelatedByParentId;
	}

	/**
	 * Returns the number of related GeonameHierarchy objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GeonameHierarchy objects.
	 * @throws     PropelException
	 */
	public function countGeonameHierarchysRelatedByParentId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGeonameHierarchysRelatedByParentId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GeonameHierarchyPeer::PARENT_ID, $this->geoname_id);

				$count = GeonameHierarchyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GeonameHierarchyPeer::PARENT_ID, $this->geoname_id);

				if (!isset($this->lastGeonameHierarchyRelatedByParentIdCriteria) || !$this->lastGeonameHierarchyRelatedByParentIdCriteria->equals($criteria)) {
					$count = GeonameHierarchyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collGeonameHierarchysRelatedByParentId);
				}
			} else {
				$count = count($this->collGeonameHierarchysRelatedByParentId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GeonameHierarchy object to this object
	 * through the GeonameHierarchy foreign key attribute.
	 *
	 * @param      GeonameHierarchy $l GeonameHierarchy
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGeonameHierarchyRelatedByParentId(GeonameHierarchy $l)
	{
		if ($this->collGeonameHierarchysRelatedByParentId === null) {
			$this->initGeonameHierarchysRelatedByParentId();
		}
		if (!in_array($l, $this->collGeonameHierarchysRelatedByParentId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGeonameHierarchysRelatedByParentId, $l);
			$l->setGeonameCityRelatedByParentId($this);
		}
	}

	/**
	 * Clears out the collGeonameHierarchysRelatedByChildId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGeonameHierarchysRelatedByChildId()
	 */
	public function clearGeonameHierarchysRelatedByChildId()
	{
		$this->collGeonameHierarchysRelatedByChildId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGeonameHierarchysRelatedByChildId collection (array).
	 *
	 * By default this just sets the collGeonameHierarchysRelatedByChildId collection to an empty array (like clearcollGeonameHierarchysRelatedByChildId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGeonameHierarchysRelatedByChildId()
	{
		$this->collGeonameHierarchysRelatedByChildId = array();
	}

	/**
	 * Gets an array of GeonameHierarchy objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related GeonameHierarchysRelatedByChildId from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GeonameHierarchy[]
	 * @throws     PropelException
	 */
	public function getGeonameHierarchysRelatedByChildId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGeonameHierarchysRelatedByChildId === null) {
			if ($this->isNew()) {
			   $this->collGeonameHierarchysRelatedByChildId = array();
			} else {

				$criteria->add(GeonameHierarchyPeer::CHILD_ID, $this->geoname_id);

				GeonameHierarchyPeer::addSelectColumns($criteria);
				$this->collGeonameHierarchysRelatedByChildId = GeonameHierarchyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GeonameHierarchyPeer::CHILD_ID, $this->geoname_id);

				GeonameHierarchyPeer::addSelectColumns($criteria);
				if (!isset($this->lastGeonameHierarchyRelatedByChildIdCriteria) || !$this->lastGeonameHierarchyRelatedByChildIdCriteria->equals($criteria)) {
					$this->collGeonameHierarchysRelatedByChildId = GeonameHierarchyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGeonameHierarchyRelatedByChildIdCriteria = $criteria;
		return $this->collGeonameHierarchysRelatedByChildId;
	}

	/**
	 * Returns the number of related GeonameHierarchy objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GeonameHierarchy objects.
	 * @throws     PropelException
	 */
	public function countGeonameHierarchysRelatedByChildId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGeonameHierarchysRelatedByChildId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GeonameHierarchyPeer::CHILD_ID, $this->geoname_id);

				$count = GeonameHierarchyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GeonameHierarchyPeer::CHILD_ID, $this->geoname_id);

				if (!isset($this->lastGeonameHierarchyRelatedByChildIdCriteria) || !$this->lastGeonameHierarchyRelatedByChildIdCriteria->equals($criteria)) {
					$count = GeonameHierarchyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collGeonameHierarchysRelatedByChildId);
				}
			} else {
				$count = count($this->collGeonameHierarchysRelatedByChildId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GeonameHierarchy object to this object
	 * through the GeonameHierarchy foreign key attribute.
	 *
	 * @param      GeonameHierarchy $l GeonameHierarchy
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGeonameHierarchyRelatedByChildId(GeonameHierarchy $l)
	{
		if ($this->collGeonameHierarchysRelatedByChildId === null) {
			$this->initGeonameHierarchysRelatedByChildId();
		}
		if (!in_array($l, $this->collGeonameHierarchysRelatedByChildId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGeonameHierarchysRelatedByChildId, $l);
			$l->setGeonameCityRelatedByChildId($this);
		}
	}

	/**
	 * Clears out the collLocationUpdatesRelatedByState collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLocationUpdatesRelatedByState()
	 */
	public function clearLocationUpdatesRelatedByState()
	{
		$this->collLocationUpdatesRelatedByState = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLocationUpdatesRelatedByState collection (array).
	 *
	 * By default this just sets the collLocationUpdatesRelatedByState collection to an empty array (like clearcollLocationUpdatesRelatedByState());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLocationUpdatesRelatedByState()
	{
		$this->collLocationUpdatesRelatedByState = array();
	}

	/**
	 * Gets an array of LocationUpdate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related LocationUpdatesRelatedByState from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array LocationUpdate[]
	 * @throws     PropelException
	 */
	public function getLocationUpdatesRelatedByState($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLocationUpdatesRelatedByState === null) {
			if ($this->isNew()) {
			   $this->collLocationUpdatesRelatedByState = array();
			} else {

				$criteria->add(LocationUpdatePeer::STATE, $this->geoname_id);

				LocationUpdatePeer::addSelectColumns($criteria);
				$this->collLocationUpdatesRelatedByState = LocationUpdatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LocationUpdatePeer::STATE, $this->geoname_id);

				LocationUpdatePeer::addSelectColumns($criteria);
				if (!isset($this->lastLocationUpdateRelatedByStateCriteria) || !$this->lastLocationUpdateRelatedByStateCriteria->equals($criteria)) {
					$this->collLocationUpdatesRelatedByState = LocationUpdatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLocationUpdateRelatedByStateCriteria = $criteria;
		return $this->collLocationUpdatesRelatedByState;
	}

	/**
	 * Returns the number of related LocationUpdate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related LocationUpdate objects.
	 * @throws     PropelException
	 */
	public function countLocationUpdatesRelatedByState(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLocationUpdatesRelatedByState === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LocationUpdatePeer::STATE, $this->geoname_id);

				$count = LocationUpdatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LocationUpdatePeer::STATE, $this->geoname_id);

				if (!isset($this->lastLocationUpdateRelatedByStateCriteria) || !$this->lastLocationUpdateRelatedByStateCriteria->equals($criteria)) {
					$count = LocationUpdatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collLocationUpdatesRelatedByState);
				}
			} else {
				$count = count($this->collLocationUpdatesRelatedByState);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a LocationUpdate object to this object
	 * through the LocationUpdate foreign key attribute.
	 *
	 * @param      LocationUpdate $l LocationUpdate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLocationUpdateRelatedByState(LocationUpdate $l)
	{
		if ($this->collLocationUpdatesRelatedByState === null) {
			$this->initLocationUpdatesRelatedByState();
		}
		if (!in_array($l, $this->collLocationUpdatesRelatedByState, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLocationUpdatesRelatedByState, $l);
			$l->setGeonameCityRelatedByState($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related LocationUpdatesRelatedByState from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getLocationUpdatesRelatedByStateJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLocationUpdatesRelatedByState === null) {
			if ($this->isNew()) {
				$this->collLocationUpdatesRelatedByState = array();
			} else {

				$criteria->add(LocationUpdatePeer::STATE, $this->geoname_id);

				$this->collLocationUpdatesRelatedByState = LocationUpdatePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LocationUpdatePeer::STATE, $this->geoname_id);

			if (!isset($this->lastLocationUpdateRelatedByStateCriteria) || !$this->lastLocationUpdateRelatedByStateCriteria->equals($criteria)) {
				$this->collLocationUpdatesRelatedByState = LocationUpdatePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastLocationUpdateRelatedByStateCriteria = $criteria;

		return $this->collLocationUpdatesRelatedByState;
	}

	/**
	 * Clears out the collLocationUpdatesRelatedByCity collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLocationUpdatesRelatedByCity()
	 */
	public function clearLocationUpdatesRelatedByCity()
	{
		$this->collLocationUpdatesRelatedByCity = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLocationUpdatesRelatedByCity collection (array).
	 *
	 * By default this just sets the collLocationUpdatesRelatedByCity collection to an empty array (like clearcollLocationUpdatesRelatedByCity());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLocationUpdatesRelatedByCity()
	{
		$this->collLocationUpdatesRelatedByCity = array();
	}

	/**
	 * Gets an array of LocationUpdate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related LocationUpdatesRelatedByCity from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array LocationUpdate[]
	 * @throws     PropelException
	 */
	public function getLocationUpdatesRelatedByCity($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLocationUpdatesRelatedByCity === null) {
			if ($this->isNew()) {
			   $this->collLocationUpdatesRelatedByCity = array();
			} else {

				$criteria->add(LocationUpdatePeer::CITY, $this->geoname_id);

				LocationUpdatePeer::addSelectColumns($criteria);
				$this->collLocationUpdatesRelatedByCity = LocationUpdatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LocationUpdatePeer::CITY, $this->geoname_id);

				LocationUpdatePeer::addSelectColumns($criteria);
				if (!isset($this->lastLocationUpdateRelatedByCityCriteria) || !$this->lastLocationUpdateRelatedByCityCriteria->equals($criteria)) {
					$this->collLocationUpdatesRelatedByCity = LocationUpdatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLocationUpdateRelatedByCityCriteria = $criteria;
		return $this->collLocationUpdatesRelatedByCity;
	}

	/**
	 * Returns the number of related LocationUpdate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related LocationUpdate objects.
	 * @throws     PropelException
	 */
	public function countLocationUpdatesRelatedByCity(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLocationUpdatesRelatedByCity === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LocationUpdatePeer::CITY, $this->geoname_id);

				$count = LocationUpdatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LocationUpdatePeer::CITY, $this->geoname_id);

				if (!isset($this->lastLocationUpdateRelatedByCityCriteria) || !$this->lastLocationUpdateRelatedByCityCriteria->equals($criteria)) {
					$count = LocationUpdatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collLocationUpdatesRelatedByCity);
				}
			} else {
				$count = count($this->collLocationUpdatesRelatedByCity);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a LocationUpdate object to this object
	 * through the LocationUpdate foreign key attribute.
	 *
	 * @param      LocationUpdate $l LocationUpdate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLocationUpdateRelatedByCity(LocationUpdate $l)
	{
		if ($this->collLocationUpdatesRelatedByCity === null) {
			$this->initLocationUpdatesRelatedByCity();
		}
		if (!in_array($l, $this->collLocationUpdatesRelatedByCity, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLocationUpdatesRelatedByCity, $l);
			$l->setGeonameCityRelatedByCity($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related LocationUpdatesRelatedByCity from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getLocationUpdatesRelatedByCityJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLocationUpdatesRelatedByCity === null) {
			if ($this->isNew()) {
				$this->collLocationUpdatesRelatedByCity = array();
			} else {

				$criteria->add(LocationUpdatePeer::CITY, $this->geoname_id);

				$this->collLocationUpdatesRelatedByCity = LocationUpdatePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LocationUpdatePeer::CITY, $this->geoname_id);

			if (!isset($this->lastLocationUpdateRelatedByCityCriteria) || !$this->lastLocationUpdateRelatedByCityCriteria->equals($criteria)) {
				$this->collLocationUpdatesRelatedByCity = LocationUpdatePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastLocationUpdateRelatedByCityCriteria = $criteria;

		return $this->collLocationUpdatesRelatedByCity;
	}

	/**
	 * Clears out the collPostLocationsRelatedByState collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostLocationsRelatedByState()
	 */
	public function clearPostLocationsRelatedByState()
	{
		$this->collPostLocationsRelatedByState = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostLocationsRelatedByState collection (array).
	 *
	 * By default this just sets the collPostLocationsRelatedByState collection to an empty array (like clearcollPostLocationsRelatedByState());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostLocationsRelatedByState()
	{
		$this->collPostLocationsRelatedByState = array();
	}

	/**
	 * Gets an array of PostLocation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related PostLocationsRelatedByState from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PostLocation[]
	 * @throws     PropelException
	 */
	public function getPostLocationsRelatedByState($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostLocationsRelatedByState === null) {
			if ($this->isNew()) {
			   $this->collPostLocationsRelatedByState = array();
			} else {

				$criteria->add(PostLocationPeer::STATE, $this->geoname_id);

				PostLocationPeer::addSelectColumns($criteria);
				$this->collPostLocationsRelatedByState = PostLocationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostLocationPeer::STATE, $this->geoname_id);

				PostLocationPeer::addSelectColumns($criteria);
				if (!isset($this->lastPostLocationRelatedByStateCriteria) || !$this->lastPostLocationRelatedByStateCriteria->equals($criteria)) {
					$this->collPostLocationsRelatedByState = PostLocationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostLocationRelatedByStateCriteria = $criteria;
		return $this->collPostLocationsRelatedByState;
	}

	/**
	 * Returns the number of related PostLocation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PostLocation objects.
	 * @throws     PropelException
	 */
	public function countPostLocationsRelatedByState(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostLocationsRelatedByState === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostLocationPeer::STATE, $this->geoname_id);

				$count = PostLocationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostLocationPeer::STATE, $this->geoname_id);

				if (!isset($this->lastPostLocationRelatedByStateCriteria) || !$this->lastPostLocationRelatedByStateCriteria->equals($criteria)) {
					$count = PostLocationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPostLocationsRelatedByState);
				}
			} else {
				$count = count($this->collPostLocationsRelatedByState);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PostLocation object to this object
	 * through the PostLocation foreign key attribute.
	 *
	 * @param      PostLocation $l PostLocation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostLocationRelatedByState(PostLocation $l)
	{
		if ($this->collPostLocationsRelatedByState === null) {
			$this->initPostLocationsRelatedByState();
		}
		if (!in_array($l, $this->collPostLocationsRelatedByState, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostLocationsRelatedByState, $l);
			$l->setGeonameCityRelatedByState($this);
		}
	}

	/**
	 * Clears out the collPostLocationsRelatedByCity collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostLocationsRelatedByCity()
	 */
	public function clearPostLocationsRelatedByCity()
	{
		$this->collPostLocationsRelatedByCity = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostLocationsRelatedByCity collection (array).
	 *
	 * By default this just sets the collPostLocationsRelatedByCity collection to an empty array (like clearcollPostLocationsRelatedByCity());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostLocationsRelatedByCity()
	{
		$this->collPostLocationsRelatedByCity = array();
	}

	/**
	 * Gets an array of PostLocation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related PostLocationsRelatedByCity from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PostLocation[]
	 * @throws     PropelException
	 */
	public function getPostLocationsRelatedByCity($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostLocationsRelatedByCity === null) {
			if ($this->isNew()) {
			   $this->collPostLocationsRelatedByCity = array();
			} else {

				$criteria->add(PostLocationPeer::CITY, $this->geoname_id);

				PostLocationPeer::addSelectColumns($criteria);
				$this->collPostLocationsRelatedByCity = PostLocationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostLocationPeer::CITY, $this->geoname_id);

				PostLocationPeer::addSelectColumns($criteria);
				if (!isset($this->lastPostLocationRelatedByCityCriteria) || !$this->lastPostLocationRelatedByCityCriteria->equals($criteria)) {
					$this->collPostLocationsRelatedByCity = PostLocationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostLocationRelatedByCityCriteria = $criteria;
		return $this->collPostLocationsRelatedByCity;
	}

	/**
	 * Returns the number of related PostLocation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PostLocation objects.
	 * @throws     PropelException
	 */
	public function countPostLocationsRelatedByCity(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostLocationsRelatedByCity === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostLocationPeer::CITY, $this->geoname_id);

				$count = PostLocationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostLocationPeer::CITY, $this->geoname_id);

				if (!isset($this->lastPostLocationRelatedByCityCriteria) || !$this->lastPostLocationRelatedByCityCriteria->equals($criteria)) {
					$count = PostLocationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPostLocationsRelatedByCity);
				}
			} else {
				$count = count($this->collPostLocationsRelatedByCity);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PostLocation object to this object
	 * through the PostLocation foreign key attribute.
	 *
	 * @param      PostLocation $l PostLocation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostLocationRelatedByCity(PostLocation $l)
	{
		if ($this->collPostLocationsRelatedByCity === null) {
			$this->initPostLocationsRelatedByCity();
		}
		if (!in_array($l, $this->collPostLocationsRelatedByCity, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostLocationsRelatedByCity, $l);
			$l->setGeonameCityRelatedByCity($this);
		}
	}

	/**
	 * Clears out the collJobLocations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJobLocations()
	 */
	public function clearJobLocations()
	{
		$this->collJobLocations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJobLocations collection (array).
	 *
	 * By default this just sets the collJobLocations collection to an empty array (like clearcollJobLocations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJobLocations()
	{
		$this->collJobLocations = array();
	}

	/**
	 * Gets an array of JobLocation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related JobLocations from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array JobLocation[]
	 * @throws     PropelException
	 */
	public function getJobLocations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobLocations === null) {
			if ($this->isNew()) {
			   $this->collJobLocations = array();
			} else {

				$criteria->add(JobLocationPeer::LOCATION_ID, $this->geoname_id);

				JobLocationPeer::addSelectColumns($criteria);
				$this->collJobLocations = JobLocationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JobLocationPeer::LOCATION_ID, $this->geoname_id);

				JobLocationPeer::addSelectColumns($criteria);
				if (!isset($this->lastJobLocationCriteria) || !$this->lastJobLocationCriteria->equals($criteria)) {
					$this->collJobLocations = JobLocationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJobLocationCriteria = $criteria;
		return $this->collJobLocations;
	}

	/**
	 * Returns the number of related JobLocation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related JobLocation objects.
	 * @throws     PropelException
	 */
	public function countJobLocations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJobLocations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JobLocationPeer::LOCATION_ID, $this->geoname_id);

				$count = JobLocationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JobLocationPeer::LOCATION_ID, $this->geoname_id);

				if (!isset($this->lastJobLocationCriteria) || !$this->lastJobLocationCriteria->equals($criteria)) {
					$count = JobLocationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJobLocations);
				}
			} else {
				$count = count($this->collJobLocations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a JobLocation object to this object
	 * through the JobLocation foreign key attribute.
	 *
	 * @param      JobLocation $l JobLocation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJobLocation(JobLocation $l)
	{
		if ($this->collJobLocations === null) {
			$this->initJobLocations();
		}
		if (!in_array($l, $this->collJobLocations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJobLocations, $l);
			$l->setGeonameCity($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related JobLocations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getJobLocationsJoinJob($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobLocations === null) {
			if ($this->isNew()) {
				$this->collJobLocations = array();
			} else {

				$criteria->add(JobLocationPeer::LOCATION_ID, $this->geoname_id);

				$this->collJobLocations = JobLocationPeer::doSelectJoinJob($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobLocationPeer::LOCATION_ID, $this->geoname_id);

			if (!isset($this->lastJobLocationCriteria) || !$this->lastJobLocationCriteria->equals($criteria)) {
				$this->collJobLocations = JobLocationPeer::doSelectJoinJob($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobLocationCriteria = $criteria;

		return $this->collJobLocations;
	}

	/**
	 * Clears out the collMarketingPackagePrices collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMarketingPackagePrices()
	 */
	public function clearMarketingPackagePrices()
	{
		$this->collMarketingPackagePrices = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMarketingPackagePrices collection (array).
	 *
	 * By default this just sets the collMarketingPackagePrices collection to an empty array (like clearcollMarketingPackagePrices());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMarketingPackagePrices()
	{
		$this->collMarketingPackagePrices = array();
	}

	/**
	 * Gets an array of MarketingPackagePrice objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related MarketingPackagePrices from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MarketingPackagePrice[]
	 * @throws     PropelException
	 */
	public function getMarketingPackagePrices($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
			   $this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

				MarketingPackagePricePeer::addSelectColumns($criteria);
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

				MarketingPackagePricePeer::addSelectColumns($criteria);
				if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
					$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;
		return $this->collMarketingPackagePrices;
	}

	/**
	 * Returns the number of related MarketingPackagePrice objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MarketingPackagePrice objects.
	 * @throws     PropelException
	 */
	public function countMarketingPackagePrices(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

				$count = MarketingPackagePricePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

				if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
					$count = MarketingPackagePricePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMarketingPackagePrices);
				}
			} else {
				$count = count($this->collMarketingPackagePrices);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MarketingPackagePrice object to this object
	 * through the MarketingPackagePrice foreign key attribute.
	 *
	 * @param      MarketingPackagePrice $l MarketingPackagePrice
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMarketingPackagePrice(MarketingPackagePrice $l)
	{
		if ($this->collMarketingPackagePrices === null) {
			$this->initMarketingPackagePrices();
		}
		if (!in_array($l, $this->collMarketingPackagePrices, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMarketingPackagePrices, $l);
			$l->setGeonameCity($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related MarketingPackagePrices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getMarketingPackagePricesJoinMarketingPackage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinMarketingPackage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

			if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinMarketingPackage($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;

		return $this->collMarketingPackagePrices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related MarketingPackagePrices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getMarketingPackagePricesJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

			if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;

		return $this->collMarketingPackagePrices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related MarketingPackagePrices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getMarketingPackagePricesJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

			if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;

		return $this->collMarketingPackagePrices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related MarketingPackagePrices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getMarketingPackagePricesJoinPrivacyNodeTypeRelatedByReferenceTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinPrivacyNodeTypeRelatedByReferenceTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::TARGET_GEO_REGION_ID, $this->geoname_id);

			if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinPrivacyNodeTypeRelatedByReferenceTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;

		return $this->collMarketingPackagePrices;
	}

	/**
	 * Clears out the collPlaces collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPlaces()
	 */
	public function clearPlaces()
	{
		$this->collPlaces = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPlaces collection (array).
	 *
	 * By default this just sets the collPlaces collection to an empty array (like clearcollPlaces());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPlaces()
	{
		$this->collPlaces = array();
	}

	/**
	 * Gets an array of Place objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related Places from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Place[]
	 * @throws     PropelException
	 */
	public function getPlaces($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
			   $this->collPlaces = array();
			} else {

				$criteria->add(PlacePeer::STATE, $this->geoname_id);

				PlacePeer::addSelectColumns($criteria);
				$this->collPlaces = PlacePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PlacePeer::STATE, $this->geoname_id);

				PlacePeer::addSelectColumns($criteria);
				if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
					$this->collPlaces = PlacePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPlaceCriteria = $criteria;
		return $this->collPlaces;
	}

	/**
	 * Returns the number of related Place objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Place objects.
	 * @throws     PropelException
	 */
	public function countPlaces(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PlacePeer::STATE, $this->geoname_id);

				$count = PlacePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PlacePeer::STATE, $this->geoname_id);

				if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
					$count = PlacePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPlaces);
				}
			} else {
				$count = count($this->collPlaces);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Place object to this object
	 * through the Place foreign key attribute.
	 *
	 * @param      Place $l Place
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPlace(Place $l)
	{
		if ($this->collPlaces === null) {
			$this->initPlaces();
		}
		if (!in_array($l, $this->collPlaces, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPlaces, $l);
			$l->setGeonameCity($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related Places from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getPlacesJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
				$this->collPlaces = array();
			} else {

				$criteria->add(PlacePeer::STATE, $this->geoname_id);

				$this->collPlaces = PlacePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PlacePeer::STATE, $this->geoname_id);

			if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
				$this->collPlaces = PlacePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastPlaceCriteria = $criteria;

		return $this->collPlaces;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related Places from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getPlacesJoinPlaceType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
				$this->collPlaces = array();
			} else {

				$criteria->add(PlacePeer::STATE, $this->geoname_id);

				$this->collPlaces = PlacePeer::doSelectJoinPlaceType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PlacePeer::STATE, $this->geoname_id);

			if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
				$this->collPlaces = PlacePeer::doSelectJoinPlaceType($criteria, $con, $join_behavior);
			}
		}
		$this->lastPlaceCriteria = $criteria;

		return $this->collPlaces;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related Places from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getPlacesJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaces === null) {
			if ($this->isNew()) {
				$this->collPlaces = array();
			} else {

				$criteria->add(PlacePeer::STATE, $this->geoname_id);

				$this->collPlaces = PlacePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PlacePeer::STATE, $this->geoname_id);

			if (!isset($this->lastPlaceCriteria) || !$this->lastPlaceCriteria->equals($criteria)) {
				$this->collPlaces = PlacePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastPlaceCriteria = $criteria;

		return $this->collPlaces;
	}

	/**
	 * Clears out the collEvents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEvents()
	 */
	public function clearEvents()
	{
		$this->collEvents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEvents collection (array).
	 *
	 * By default this just sets the collEvents collection to an empty array (like clearcollEvents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEvents()
	{
		$this->collEvents = array();
	}

	/**
	 * Gets an array of Event objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related Events from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Event[]
	 * @throws     PropelException
	 */
	public function getEvents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEvents === null) {
			if ($this->isNew()) {
			   $this->collEvents = array();
			} else {

				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				EventPeer::addSelectColumns($criteria);
				$this->collEvents = EventPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				EventPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
					$this->collEvents = EventPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventCriteria = $criteria;
		return $this->collEvents;
	}

	/**
	 * Returns the number of related Event objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Event objects.
	 * @throws     PropelException
	 */
	public function countEvents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEvents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				$count = EventPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
					$count = EventPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEvents);
				}
			} else {
				$count = count($this->collEvents);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Event object to this object
	 * through the Event foreign key attribute.
	 *
	 * @param      Event $l Event
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEvent(Event $l)
	{
		if ($this->collEvents === null) {
			$this->initEvents();
		}
		if (!in_array($l, $this->collEvents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEvents, $l);
			$l->setGeonameCity($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related Events from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getEventsJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEvents === null) {
			if ($this->isNew()) {
				$this->collEvents = array();
			} else {

				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				$this->collEvents = EventPeer::doSelectJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

			if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
				$this->collEvents = EventPeer::doSelectJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventCriteria = $criteria;

		return $this->collEvents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related Events from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getEventsJoinPrivacyNodeTypeRelatedByOrganiserTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEvents === null) {
			if ($this->isNew()) {
				$this->collEvents = array();
			} else {

				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				$this->collEvents = EventPeer::doSelectJoinPrivacyNodeTypeRelatedByOrganiserTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

			if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
				$this->collEvents = EventPeer::doSelectJoinPrivacyNodeTypeRelatedByOrganiserTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventCriteria = $criteria;

		return $this->collEvents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related Events from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getEventsJoinEventType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEvents === null) {
			if ($this->isNew()) {
				$this->collEvents = array();
			} else {

				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				$this->collEvents = EventPeer::doSelectJoinEventType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

			if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
				$this->collEvents = EventPeer::doSelectJoinEventType($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventCriteria = $criteria;

		return $this->collEvents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related Events from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getEventsJoinTimeScheme($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEvents === null) {
			if ($this->isNew()) {
				$this->collEvents = array();
			} else {

				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				$this->collEvents = EventPeer::doSelectJoinTimeScheme($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

			if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
				$this->collEvents = EventPeer::doSelectJoinTimeScheme($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventCriteria = $criteria;

		return $this->collEvents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related Events from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getEventsJoinPlace($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEvents === null) {
			if ($this->isNew()) {
				$this->collEvents = array();
			} else {

				$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

				$this->collEvents = EventPeer::doSelectJoinPlace($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::LOCATION_STATE, $this->geoname_id);

			if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
				$this->collEvents = EventPeer::doSelectJoinPlace($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventCriteria = $criteria;

		return $this->collEvents;
	}

	/**
	 * Clears out the collTradeExpertAreas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTradeExpertAreas()
	 */
	public function clearTradeExpertAreas()
	{
		$this->collTradeExpertAreas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTradeExpertAreas collection (array).
	 *
	 * By default this just sets the collTradeExpertAreas collection to an empty array (like clearcollTradeExpertAreas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTradeExpertAreas()
	{
		$this->collTradeExpertAreas = array();
	}

	/**
	 * Gets an array of TradeExpertArea objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this GeonameCity has previously been saved, it will retrieve
	 * related TradeExpertAreas from storage. If this GeonameCity is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TradeExpertArea[]
	 * @throws     PropelException
	 */
	public function getTradeExpertAreas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTradeExpertAreas === null) {
			if ($this->isNew()) {
			   $this->collTradeExpertAreas = array();
			} else {

				$criteria->add(TradeExpertAreaPeer::STATE, $this->geoname_id);

				TradeExpertAreaPeer::addSelectColumns($criteria);
				$this->collTradeExpertAreas = TradeExpertAreaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TradeExpertAreaPeer::STATE, $this->geoname_id);

				TradeExpertAreaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTradeExpertAreaCriteria) || !$this->lastTradeExpertAreaCriteria->equals($criteria)) {
					$this->collTradeExpertAreas = TradeExpertAreaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTradeExpertAreaCriteria = $criteria;
		return $this->collTradeExpertAreas;
	}

	/**
	 * Returns the number of related TradeExpertArea objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TradeExpertArea objects.
	 * @throws     PropelException
	 */
	public function countTradeExpertAreas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTradeExpertAreas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TradeExpertAreaPeer::STATE, $this->geoname_id);

				$count = TradeExpertAreaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TradeExpertAreaPeer::STATE, $this->geoname_id);

				if (!isset($this->lastTradeExpertAreaCriteria) || !$this->lastTradeExpertAreaCriteria->equals($criteria)) {
					$count = TradeExpertAreaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTradeExpertAreas);
				}
			} else {
				$count = count($this->collTradeExpertAreas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TradeExpertArea object to this object
	 * through the TradeExpertArea foreign key attribute.
	 *
	 * @param      TradeExpertArea $l TradeExpertArea
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTradeExpertArea(TradeExpertArea $l)
	{
		if ($this->collTradeExpertAreas === null) {
			$this->initTradeExpertAreas();
		}
		if (!in_array($l, $this->collTradeExpertAreas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTradeExpertAreas, $l);
			$l->setGeonameCity($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this GeonameCity is new, it will return
	 * an empty collection; or if this GeonameCity has previously
	 * been saved, it will retrieve related TradeExpertAreas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in GeonameCity.
	 */
	public function getTradeExpertAreasJoinTradeExpert($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(GeonameCityPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTradeExpertAreas === null) {
			if ($this->isNew()) {
				$this->collTradeExpertAreas = array();
			} else {

				$criteria->add(TradeExpertAreaPeer::STATE, $this->geoname_id);

				$this->collTradeExpertAreas = TradeExpertAreaPeer::doSelectJoinTradeExpert($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TradeExpertAreaPeer::STATE, $this->geoname_id);

			if (!isset($this->lastTradeExpertAreaCriteria) || !$this->lastTradeExpertAreaCriteria->equals($criteria)) {
				$this->collTradeExpertAreas = TradeExpertAreaPeer::doSelectJoinTradeExpert($criteria, $con, $join_behavior);
			}
		}
		$this->lastTradeExpertAreaCriteria = $criteria;

		return $this->collTradeExpertAreas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collContactAddresss) {
				foreach ((array) $this->collContactAddresss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserProfiles) {
				foreach ((array) $this->collUserProfiles as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->singleGeonameCountry) {
				$this->singleGeonameCountry->clearAllReferences($deep);
			}
			if ($this->collGeonameHierarchysRelatedByParentId) {
				foreach ((array) $this->collGeonameHierarchysRelatedByParentId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGeonameHierarchysRelatedByChildId) {
				foreach ((array) $this->collGeonameHierarchysRelatedByChildId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLocationUpdatesRelatedByState) {
				foreach ((array) $this->collLocationUpdatesRelatedByState as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLocationUpdatesRelatedByCity) {
				foreach ((array) $this->collLocationUpdatesRelatedByCity as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPostLocationsRelatedByState) {
				foreach ((array) $this->collPostLocationsRelatedByState as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPostLocationsRelatedByCity) {
				foreach ((array) $this->collPostLocationsRelatedByCity as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJobLocations) {
				foreach ((array) $this->collJobLocations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMarketingPackagePrices) {
				foreach ((array) $this->collMarketingPackagePrices as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPlaces) {
				foreach ((array) $this->collPlaces as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEvents) {
				foreach ((array) $this->collEvents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTradeExpertAreas) {
				foreach ((array) $this->collTradeExpertAreas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collContactAddresss = null;
		$this->collUserProfiles = null;
		$this->singleGeonameCountry = null;
		$this->collGeonameHierarchysRelatedByParentId = null;
		$this->collGeonameHierarchysRelatedByChildId = null;
		$this->collLocationUpdatesRelatedByState = null;
		$this->collLocationUpdatesRelatedByCity = null;
		$this->collPostLocationsRelatedByState = null;
		$this->collPostLocationsRelatedByCity = null;
		$this->collJobLocations = null;
		$this->collMarketingPackagePrices = null;
		$this->collPlaces = null;
		$this->collEvents = null;
		$this->collTradeExpertAreas = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseGeonameCity:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseGeonameCity::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseGeonameCity
