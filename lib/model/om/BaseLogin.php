<?php

/**
 * Base class that represents a row from the 'EMT_LOGIN' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/10/12 16:10:10
 *
 * @package    lib.model.om
 */
abstract class BaseLogin extends BaseObject  implements Persistent {


  const PEER = 'LoginPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        LoginPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the guid field.
	 * Note: this column has a database default value of: 'sys_guid()'
	 * @var        string
	 */
	protected $guid;

	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the sha1_password field.
	 * @var        string
	 */
	protected $sha1_password;

	/**
	 * The value for the salt field.
	 * @var        string
	 */
	protected $salt;

	/**
	 * The value for the role_id field.
	 * @var        int
	 */
	protected $role_id;

	/**
	 * The value for the reminder_question field.
	 * @var        string
	 */
	protected $reminder_question;

	/**
	 * The value for the reminder_answer field.
	 * @var        string
	 */
	protected $reminder_answer;

	/**
	 * The value for the startup field.
	 * @var        int
	 */
	protected $startup;

	/**
	 * The value for the remember_code field.
	 * @var        string
	 */
	protected $remember_code;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the email_log field.
	 * Note: this column has a database default value of: 'a:0:{}'
	 * @var        string
	 */
	protected $email_log;

	/**
	 * @var        Role
	 */
	protected $aRole;

	/**
	 * @var        array User[] Collection to store aggregation of User objects.
	 */
	protected $collUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsers.
	 */
	private $lastUserCriteria = null;

	/**
	 * @var        array RoleAssignment[] Collection to store aggregation of RoleAssignment objects.
	 */
	protected $collRoleAssignments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRoleAssignments.
	 */
	private $lastRoleAssignmentCriteria = null;

	/**
	 * @var        array Blocklist[] Collection to store aggregation of Blocklist objects.
	 */
	protected $collBlocklists;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBlocklists.
	 */
	private $lastBlocklistCriteria = null;

	/**
	 * @var        array CompanyLogin[] Collection to store aggregation of CompanyLogin objects.
	 */
	protected $collCompanyLogins;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanyLogins.
	 */
	private $lastCompanyLoginCriteria = null;

	/**
	 * @var        array PasswordResetRequest[] Collection to store aggregation of PasswordResetRequest objects.
	 */
	protected $collPasswordResetRequests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPasswordResetRequests.
	 */
	private $lastPasswordResetRequestCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseLogin object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->guid = 'sys_guid()';
		$this->email_log = 'a:0:{}';
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [guid] column value.
	 * 
	 * @return     string
	 */
	public function getGuid()
	{
		return $this->guid;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [sha1_password] column value.
	 * 
	 * @return     string
	 */
	public function getSha1Password()
	{
		return $this->sha1_password;
	}

	/**
	 * Get the [salt] column value.
	 * 
	 * @return     string
	 */
	public function getSalt()
	{
		return $this->salt;
	}

	/**
	 * Get the [role_id] column value.
	 * 
	 * @return     int
	 */
	public function getRoleId()
	{
		return $this->role_id;
	}

	/**
	 * Get the [reminder_question] column value.
	 * 
	 * @return     string
	 */
	public function getReminderQuestion()
	{
		return $this->reminder_question;
	}

	/**
	 * Get the [reminder_answer] column value.
	 * 
	 * @return     string
	 */
	public function getReminderAnswer()
	{
		return $this->reminder_answer;
	}

	/**
	 * Get the [startup] column value.
	 * 
	 * @return     int
	 */
	public function getStartup()
	{
		return $this->startup;
	}

	/**
	 * Get the [remember_code] column value.
	 * 
	 * @return     string
	 */
	public function getRememberCode()
	{
		return $this->remember_code;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [email_log] column value.
	 * 
	 * @return     string
	 */
	public function getEmailLog()
	{
		return $this->email_log;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = LoginPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [guid] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setGuid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->guid !== $v || $v === 'sys_guid()') {
			$this->guid = $v;
			$this->modifiedColumns[] = LoginPeer::GUID;
		}

		return $this;
	} // setGuid()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = LoginPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = LoginPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [sha1_password] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setSha1Password($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sha1_password !== $v) {
			$this->sha1_password = $v;
			$this->modifiedColumns[] = LoginPeer::SHA1_PASSWORD;
		}

		return $this;
	} // setSha1Password()

	/**
	 * Set the value of [salt] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setSalt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salt !== $v) {
			$this->salt = $v;
			$this->modifiedColumns[] = LoginPeer::SALT;
		}

		return $this;
	} // setSalt()

	/**
	 * Set the value of [role_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setRoleId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->role_id !== $v) {
			$this->role_id = $v;
			$this->modifiedColumns[] = LoginPeer::ROLE_ID;
		}

		if ($this->aRole !== null && $this->aRole->getId() !== $v) {
			$this->aRole = null;
		}

		return $this;
	} // setRoleId()

	/**
	 * Set the value of [reminder_question] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setReminderQuestion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reminder_question !== $v) {
			$this->reminder_question = $v;
			$this->modifiedColumns[] = LoginPeer::REMINDER_QUESTION;
		}

		return $this;
	} // setReminderQuestion()

	/**
	 * Set the value of [reminder_answer] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setReminderAnswer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reminder_answer !== $v) {
			$this->reminder_answer = $v;
			$this->modifiedColumns[] = LoginPeer::REMINDER_ANSWER;
		}

		return $this;
	} // setReminderAnswer()

	/**
	 * Set the value of [startup] column.
	 * 
	 * @param      int $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setStartup($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->startup !== $v) {
			$this->startup = $v;
			$this->modifiedColumns[] = LoginPeer::STARTUP;
		}

		return $this;
	} // setStartup()

	/**
	 * Set the value of [remember_code] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setRememberCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->remember_code !== $v) {
			$this->remember_code = $v;
			$this->modifiedColumns[] = LoginPeer::REMEMBER_CODE;
		}

		return $this;
	} // setRememberCode()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Login The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LoginPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Login The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LoginPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [email_log] column.
	 * 
	 * @param      string $v new value
	 * @return     Login The current object (for fluent API support)
	 */
	public function setEmailLog($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email_log !== $v || $v === 'a:0:{}') {
			$this->email_log = $v;
			$this->modifiedColumns[] = LoginPeer::EMAIL_LOG;
		}

		return $this;
	} // setEmailLog()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(LoginPeer::GUID,LoginPeer::EMAIL_LOG))) {
				return false;
			}

			if ($this->guid !== 'sys_guid()') {
				return false;
			}

			if ($this->email_log !== 'a:0:{}') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->guid = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->username = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->email = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->sha1_password = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->salt = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->role_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->reminder_question = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->reminder_answer = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->startup = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->remember_code = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->created_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->updated_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->email_log = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 14; // 14 = LoginPeer::NUM_COLUMNS - LoginPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Login object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aRole !== null && $this->role_id !== $this->aRole->getId()) {
			$this->aRole = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LoginPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = LoginPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aRole = null;
			$this->collUsers = null;
			$this->lastUserCriteria = null;

			$this->collRoleAssignments = null;
			$this->lastRoleAssignmentCriteria = null;

			$this->collBlocklists = null;
			$this->lastBlocklistCriteria = null;

			$this->collCompanyLogins = null;
			$this->lastCompanyLoginCriteria = null;

			$this->collPasswordResetRequests = null;
			$this->lastPasswordResetRequestCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseLogin:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LoginPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			LoginPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseLogin:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseLogin:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(LoginPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(LoginPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LoginPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseLogin:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			LoginPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRole !== null) {
				if ($this->aRole->isModified() || ($this->aRole->getCulture() && $this->aRole->getCurrentRoleI18n()->isModified()) || $this->aRole->isNew()) {
					$affectedRows += $this->aRole->save($con);
				}
				$this->setRole($this->aRole);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = LoginPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = LoginPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += LoginPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collUsers !== null) {
				foreach ($this->collUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRoleAssignments !== null) {
				foreach ($this->collRoleAssignments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBlocklists !== null) {
				foreach ($this->collBlocklists as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanyLogins !== null) {
				foreach ($this->collCompanyLogins as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPasswordResetRequests !== null) {
				foreach ($this->collPasswordResetRequests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRole !== null) {
				if (!$this->aRole->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRole->getValidationFailures());
				}
			}


			if (($retval = LoginPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collUsers !== null) {
					foreach ($this->collUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRoleAssignments !== null) {
					foreach ($this->collRoleAssignments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBlocklists !== null) {
					foreach ($this->collBlocklists as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanyLogins !== null) {
					foreach ($this->collCompanyLogins as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPasswordResetRequests !== null) {
					foreach ($this->collPasswordResetRequests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LoginPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getGuid();
				break;
			case 2:
				return $this->getUsername();
				break;
			case 3:
				return $this->getEmail();
				break;
			case 4:
				return $this->getSha1Password();
				break;
			case 5:
				return $this->getSalt();
				break;
			case 6:
				return $this->getRoleId();
				break;
			case 7:
				return $this->getReminderQuestion();
				break;
			case 8:
				return $this->getReminderAnswer();
				break;
			case 9:
				return $this->getStartup();
				break;
			case 10:
				return $this->getRememberCode();
				break;
			case 11:
				return $this->getCreatedAt();
				break;
			case 12:
				return $this->getUpdatedAt();
				break;
			case 13:
				return $this->getEmailLog();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = LoginPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getGuid(),
			$keys[2] => $this->getUsername(),
			$keys[3] => $this->getEmail(),
			$keys[4] => $this->getSha1Password(),
			$keys[5] => $this->getSalt(),
			$keys[6] => $this->getRoleId(),
			$keys[7] => $this->getReminderQuestion(),
			$keys[8] => $this->getReminderAnswer(),
			$keys[9] => $this->getStartup(),
			$keys[10] => $this->getRememberCode(),
			$keys[11] => $this->getCreatedAt(),
			$keys[12] => $this->getUpdatedAt(),
			$keys[13] => $this->getEmailLog(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LoginPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setGuid($value);
				break;
			case 2:
				$this->setUsername($value);
				break;
			case 3:
				$this->setEmail($value);
				break;
			case 4:
				$this->setSha1Password($value);
				break;
			case 5:
				$this->setSalt($value);
				break;
			case 6:
				$this->setRoleId($value);
				break;
			case 7:
				$this->setReminderQuestion($value);
				break;
			case 8:
				$this->setReminderAnswer($value);
				break;
			case 9:
				$this->setStartup($value);
				break;
			case 10:
				$this->setRememberCode($value);
				break;
			case 11:
				$this->setCreatedAt($value);
				break;
			case 12:
				$this->setUpdatedAt($value);
				break;
			case 13:
				$this->setEmailLog($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = LoginPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setGuid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setUsername($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEmail($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSha1Password($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setSalt($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setRoleId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setReminderQuestion($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setReminderAnswer($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setStartup($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setRememberCode($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCreatedAt($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUpdatedAt($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setEmailLog($arr[$keys[13]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(LoginPeer::DATABASE_NAME);

		if ($this->isColumnModified(LoginPeer::ID)) $criteria->add(LoginPeer::ID, $this->id);
		if ($this->isColumnModified(LoginPeer::GUID)) $criteria->add(LoginPeer::GUID, $this->guid);
		if ($this->isColumnModified(LoginPeer::USERNAME)) $criteria->add(LoginPeer::USERNAME, $this->username);
		if ($this->isColumnModified(LoginPeer::EMAIL)) $criteria->add(LoginPeer::EMAIL, $this->email);
		if ($this->isColumnModified(LoginPeer::SHA1_PASSWORD)) $criteria->add(LoginPeer::SHA1_PASSWORD, $this->sha1_password);
		if ($this->isColumnModified(LoginPeer::SALT)) $criteria->add(LoginPeer::SALT, $this->salt);
		if ($this->isColumnModified(LoginPeer::ROLE_ID)) $criteria->add(LoginPeer::ROLE_ID, $this->role_id);
		if ($this->isColumnModified(LoginPeer::REMINDER_QUESTION)) $criteria->add(LoginPeer::REMINDER_QUESTION, $this->reminder_question);
		if ($this->isColumnModified(LoginPeer::REMINDER_ANSWER)) $criteria->add(LoginPeer::REMINDER_ANSWER, $this->reminder_answer);
		if ($this->isColumnModified(LoginPeer::STARTUP)) $criteria->add(LoginPeer::STARTUP, $this->startup);
		if ($this->isColumnModified(LoginPeer::REMEMBER_CODE)) $criteria->add(LoginPeer::REMEMBER_CODE, $this->remember_code);
		if ($this->isColumnModified(LoginPeer::CREATED_AT)) $criteria->add(LoginPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(LoginPeer::UPDATED_AT)) $criteria->add(LoginPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(LoginPeer::EMAIL_LOG)) $criteria->add(LoginPeer::EMAIL_LOG, $this->email_log);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(LoginPeer::DATABASE_NAME);

		$criteria->add(LoginPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Login (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setGuid($this->guid);

		$copyObj->setUsername($this->username);

		$copyObj->setEmail($this->email);

		$copyObj->setSha1Password($this->sha1_password);

		$copyObj->setSalt($this->salt);

		$copyObj->setRoleId($this->role_id);

		$copyObj->setReminderQuestion($this->reminder_question);

		$copyObj->setReminderAnswer($this->reminder_answer);

		$copyObj->setStartup($this->startup);

		$copyObj->setRememberCode($this->remember_code);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setEmailLog($this->email_log);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRoleAssignments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRoleAssignment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBlocklists() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBlocklist($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanyLogins() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanyLogin($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPasswordResetRequests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPasswordResetRequest($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Login Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     LoginPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new LoginPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Role object.
	 *
	 * @param      Role $v
	 * @return     Login The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRole(Role $v = null)
	{
		if ($v === null) {
			$this->setRoleId(NULL);
		} else {
			$this->setRoleId($v->getId());
		}

		$this->aRole = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Role object, it will not be re-added.
		if ($v !== null) {
			$v->addLogin($this);
		}

		return $this;
	}


	/**
	 * Get the associated Role object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Role The associated Role object.
	 * @throws     PropelException
	 */
	public function getRole(PropelPDO $con = null)
	{
		if ($this->aRole === null && ($this->role_id !== null)) {
			$c = new Criteria(RolePeer::DATABASE_NAME);
			$c->add(RolePeer::ID, $this->role_id);
			$this->aRole = RolePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aRole->addLogins($this);
			 */
		}
		return $this->aRole;
	}

	/**
	 * Clears out the collUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsers()
	 */
	public function clearUsers()
	{
		$this->collUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsers collection (array).
	 *
	 * By default this just sets the collUsers collection to an empty array (like clearcollUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsers()
	{
		$this->collUsers = array();
	}

	/**
	 * Gets an array of User objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Login has previously been saved, it will retrieve
	 * related Users from storage. If this Login is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array User[]
	 * @throws     PropelException
	 */
	public function getUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsers === null) {
			if ($this->isNew()) {
			   $this->collUsers = array();
			} else {

				$criteria->add(UserPeer::LOGIN_ID, $this->id);

				UserPeer::addSelectColumns($criteria);
				$this->collUsers = UserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserPeer::LOGIN_ID, $this->id);

				UserPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserCriteria) || !$this->lastUserCriteria->equals($criteria)) {
					$this->collUsers = UserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserCriteria = $criteria;
		return $this->collUsers;
	}

	/**
	 * Returns the number of related User objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related User objects.
	 * @throws     PropelException
	 */
	public function countUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserPeer::LOGIN_ID, $this->id);

				$count = UserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserPeer::LOGIN_ID, $this->id);

				if (!isset($this->lastUserCriteria) || !$this->lastUserCriteria->equals($criteria)) {
					$count = UserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUsers);
				}
			} else {
				$count = count($this->collUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a User object to this object
	 * through the User foreign key attribute.
	 *
	 * @param      User $l User
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUser(User $l)
	{
		if ($this->collUsers === null) {
			$this->initUsers();
		}
		if (!in_array($l, $this->collUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsers, $l);
			$l->setLogin($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Login is new, it will return
	 * an empty collection; or if this Login has previously
	 * been saved, it will retrieve related Users from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Login.
	 */
	public function getUsersJoinUserProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsers === null) {
			if ($this->isNew()) {
				$this->collUsers = array();
			} else {

				$criteria->add(UserPeer::LOGIN_ID, $this->id);

				$this->collUsers = UserPeer::doSelectJoinUserProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserPeer::LOGIN_ID, $this->id);

			if (!isset($this->lastUserCriteria) || !$this->lastUserCriteria->equals($criteria)) {
				$this->collUsers = UserPeer::doSelectJoinUserProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserCriteria = $criteria;

		return $this->collUsers;
	}

	/**
	 * Clears out the collRoleAssignments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRoleAssignments()
	 */
	public function clearRoleAssignments()
	{
		$this->collRoleAssignments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRoleAssignments collection (array).
	 *
	 * By default this just sets the collRoleAssignments collection to an empty array (like clearcollRoleAssignments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRoleAssignments()
	{
		$this->collRoleAssignments = array();
	}

	/**
	 * Gets an array of RoleAssignment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Login has previously been saved, it will retrieve
	 * related RoleAssignments from storage. If this Login is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RoleAssignment[]
	 * @throws     PropelException
	 */
	public function getRoleAssignments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleAssignments === null) {
			if ($this->isNew()) {
			   $this->collRoleAssignments = array();
			} else {

				$criteria->add(RoleAssignmentPeer::LOGIN_ID, $this->id);

				RoleAssignmentPeer::addSelectColumns($criteria);
				$this->collRoleAssignments = RoleAssignmentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RoleAssignmentPeer::LOGIN_ID, $this->id);

				RoleAssignmentPeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleAssignmentCriteria) || !$this->lastRoleAssignmentCriteria->equals($criteria)) {
					$this->collRoleAssignments = RoleAssignmentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleAssignmentCriteria = $criteria;
		return $this->collRoleAssignments;
	}

	/**
	 * Returns the number of related RoleAssignment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RoleAssignment objects.
	 * @throws     PropelException
	 */
	public function countRoleAssignments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRoleAssignments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RoleAssignmentPeer::LOGIN_ID, $this->id);

				$count = RoleAssignmentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RoleAssignmentPeer::LOGIN_ID, $this->id);

				if (!isset($this->lastRoleAssignmentCriteria) || !$this->lastRoleAssignmentCriteria->equals($criteria)) {
					$count = RoleAssignmentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRoleAssignments);
				}
			} else {
				$count = count($this->collRoleAssignments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RoleAssignment object to this object
	 * through the RoleAssignment foreign key attribute.
	 *
	 * @param      RoleAssignment $l RoleAssignment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoleAssignment(RoleAssignment $l)
	{
		if ($this->collRoleAssignments === null) {
			$this->initRoleAssignments();
		}
		if (!in_array($l, $this->collRoleAssignments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRoleAssignments, $l);
			$l->setLogin($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Login is new, it will return
	 * an empty collection; or if this Login has previously
	 * been saved, it will retrieve related RoleAssignments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Login.
	 */
	public function getRoleAssignmentsJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleAssignments === null) {
			if ($this->isNew()) {
				$this->collRoleAssignments = array();
			} else {

				$criteria->add(RoleAssignmentPeer::LOGIN_ID, $this->id);

				$this->collRoleAssignments = RoleAssignmentPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RoleAssignmentPeer::LOGIN_ID, $this->id);

			if (!isset($this->lastRoleAssignmentCriteria) || !$this->lastRoleAssignmentCriteria->equals($criteria)) {
				$this->collRoleAssignments = RoleAssignmentPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleAssignmentCriteria = $criteria;

		return $this->collRoleAssignments;
	}

	/**
	 * Clears out the collBlocklists collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBlocklists()
	 */
	public function clearBlocklists()
	{
		$this->collBlocklists = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBlocklists collection (array).
	 *
	 * By default this just sets the collBlocklists collection to an empty array (like clearcollBlocklists());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBlocklists()
	{
		$this->collBlocklists = array();
	}

	/**
	 * Gets an array of Blocklist objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Login has previously been saved, it will retrieve
	 * related Blocklists from storage. If this Login is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Blocklist[]
	 * @throws     PropelException
	 */
	public function getBlocklists($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBlocklists === null) {
			if ($this->isNew()) {
			   $this->collBlocklists = array();
			} else {

				$criteria->add(BlocklistPeer::LOGIN_ID, $this->id);

				BlocklistPeer::addSelectColumns($criteria);
				$this->collBlocklists = BlocklistPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BlocklistPeer::LOGIN_ID, $this->id);

				BlocklistPeer::addSelectColumns($criteria);
				if (!isset($this->lastBlocklistCriteria) || !$this->lastBlocklistCriteria->equals($criteria)) {
					$this->collBlocklists = BlocklistPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBlocklistCriteria = $criteria;
		return $this->collBlocklists;
	}

	/**
	 * Returns the number of related Blocklist objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Blocklist objects.
	 * @throws     PropelException
	 */
	public function countBlocklists(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBlocklists === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BlocklistPeer::LOGIN_ID, $this->id);

				$count = BlocklistPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BlocklistPeer::LOGIN_ID, $this->id);

				if (!isset($this->lastBlocklistCriteria) || !$this->lastBlocklistCriteria->equals($criteria)) {
					$count = BlocklistPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collBlocklists);
				}
			} else {
				$count = count($this->collBlocklists);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Blocklist object to this object
	 * through the Blocklist foreign key attribute.
	 *
	 * @param      Blocklist $l Blocklist
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBlocklist(Blocklist $l)
	{
		if ($this->collBlocklists === null) {
			$this->initBlocklists();
		}
		if (!in_array($l, $this->collBlocklists, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBlocklists, $l);
			$l->setLogin($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Login is new, it will return
	 * an empty collection; or if this Login has previously
	 * been saved, it will retrieve related Blocklists from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Login.
	 */
	public function getBlocklistsJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBlocklists === null) {
			if ($this->isNew()) {
				$this->collBlocklists = array();
			} else {

				$criteria->add(BlocklistPeer::LOGIN_ID, $this->id);

				$this->collBlocklists = BlocklistPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BlocklistPeer::LOGIN_ID, $this->id);

			if (!isset($this->lastBlocklistCriteria) || !$this->lastBlocklistCriteria->equals($criteria)) {
				$this->collBlocklists = BlocklistPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastBlocklistCriteria = $criteria;

		return $this->collBlocklists;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Login is new, it will return
	 * an empty collection; or if this Login has previously
	 * been saved, it will retrieve related Blocklists from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Login.
	 */
	public function getBlocklistsJoinBlockReason($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBlocklists === null) {
			if ($this->isNew()) {
				$this->collBlocklists = array();
			} else {

				$criteria->add(BlocklistPeer::LOGIN_ID, $this->id);

				$this->collBlocklists = BlocklistPeer::doSelectJoinBlockReason($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BlocklistPeer::LOGIN_ID, $this->id);

			if (!isset($this->lastBlocklistCriteria) || !$this->lastBlocklistCriteria->equals($criteria)) {
				$this->collBlocklists = BlocklistPeer::doSelectJoinBlockReason($criteria, $con, $join_behavior);
			}
		}
		$this->lastBlocklistCriteria = $criteria;

		return $this->collBlocklists;
	}

	/**
	 * Clears out the collCompanyLogins collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanyLogins()
	 */
	public function clearCompanyLogins()
	{
		$this->collCompanyLogins = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanyLogins collection (array).
	 *
	 * By default this just sets the collCompanyLogins collection to an empty array (like clearcollCompanyLogins());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanyLogins()
	{
		$this->collCompanyLogins = array();
	}

	/**
	 * Gets an array of CompanyLogin objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Login has previously been saved, it will retrieve
	 * related CompanyLogins from storage. If this Login is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompanyLogin[]
	 * @throws     PropelException
	 */
	public function getCompanyLogins($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
			   $this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::LOGIN_ID, $this->id);

				CompanyLoginPeer::addSelectColumns($criteria);
				$this->collCompanyLogins = CompanyLoginPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyLoginPeer::LOGIN_ID, $this->id);

				CompanyLoginPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
					$this->collCompanyLogins = CompanyLoginPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;
		return $this->collCompanyLogins;
	}

	/**
	 * Returns the number of related CompanyLogin objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompanyLogin objects.
	 * @throws     PropelException
	 */
	public function countCompanyLogins(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyLoginPeer::LOGIN_ID, $this->id);

				$count = CompanyLoginPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyLoginPeer::LOGIN_ID, $this->id);

				if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
					$count = CompanyLoginPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanyLogins);
				}
			} else {
				$count = count($this->collCompanyLogins);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompanyLogin object to this object
	 * through the CompanyLogin foreign key attribute.
	 *
	 * @param      CompanyLogin $l CompanyLogin
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanyLogin(CompanyLogin $l)
	{
		if ($this->collCompanyLogins === null) {
			$this->initCompanyLogins();
		}
		if (!in_array($l, $this->collCompanyLogins, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanyLogins, $l);
			$l->setLogin($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Login is new, it will return
	 * an empty collection; or if this Login has previously
	 * been saved, it will retrieve related CompanyLogins from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Login.
	 */
	public function getCompanyLoginsJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::LOGIN_ID, $this->id);

				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyLoginPeer::LOGIN_ID, $this->id);

			if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;

		return $this->collCompanyLogins;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Login is new, it will return
	 * an empty collection; or if this Login has previously
	 * been saved, it will retrieve related CompanyLogins from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Login.
	 */
	public function getCompanyLoginsJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::LOGIN_ID, $this->id);

				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyLoginPeer::LOGIN_ID, $this->id);

			if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;

		return $this->collCompanyLogins;
	}

	/**
	 * Clears out the collPasswordResetRequests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPasswordResetRequests()
	 */
	public function clearPasswordResetRequests()
	{
		$this->collPasswordResetRequests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPasswordResetRequests collection (array).
	 *
	 * By default this just sets the collPasswordResetRequests collection to an empty array (like clearcollPasswordResetRequests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPasswordResetRequests()
	{
		$this->collPasswordResetRequests = array();
	}

	/**
	 * Gets an array of PasswordResetRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Login has previously been saved, it will retrieve
	 * related PasswordResetRequests from storage. If this Login is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PasswordResetRequest[]
	 * @throws     PropelException
	 */
	public function getPasswordResetRequests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPasswordResetRequests === null) {
			if ($this->isNew()) {
			   $this->collPasswordResetRequests = array();
			} else {

				$criteria->add(PasswordResetRequestPeer::LOGIN_ID, $this->id);

				PasswordResetRequestPeer::addSelectColumns($criteria);
				$this->collPasswordResetRequests = PasswordResetRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PasswordResetRequestPeer::LOGIN_ID, $this->id);

				PasswordResetRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastPasswordResetRequestCriteria) || !$this->lastPasswordResetRequestCriteria->equals($criteria)) {
					$this->collPasswordResetRequests = PasswordResetRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPasswordResetRequestCriteria = $criteria;
		return $this->collPasswordResetRequests;
	}

	/**
	 * Returns the number of related PasswordResetRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PasswordResetRequest objects.
	 * @throws     PropelException
	 */
	public function countPasswordResetRequests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(LoginPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPasswordResetRequests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PasswordResetRequestPeer::LOGIN_ID, $this->id);

				$count = PasswordResetRequestPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PasswordResetRequestPeer::LOGIN_ID, $this->id);

				if (!isset($this->lastPasswordResetRequestCriteria) || !$this->lastPasswordResetRequestCriteria->equals($criteria)) {
					$count = PasswordResetRequestPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPasswordResetRequests);
				}
			} else {
				$count = count($this->collPasswordResetRequests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PasswordResetRequest object to this object
	 * through the PasswordResetRequest foreign key attribute.
	 *
	 * @param      PasswordResetRequest $l PasswordResetRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPasswordResetRequest(PasswordResetRequest $l)
	{
		if ($this->collPasswordResetRequests === null) {
			$this->initPasswordResetRequests();
		}
		if (!in_array($l, $this->collPasswordResetRequests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPasswordResetRequests, $l);
			$l->setLogin($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collUsers) {
				foreach ((array) $this->collUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRoleAssignments) {
				foreach ((array) $this->collRoleAssignments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBlocklists) {
				foreach ((array) $this->collBlocklists as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanyLogins) {
				foreach ((array) $this->collCompanyLogins as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPasswordResetRequests) {
				foreach ((array) $this->collPasswordResetRequests as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collUsers = null;
		$this->collRoleAssignments = null;
		$this->collBlocklists = null;
		$this->collCompanyLogins = null;
		$this->collPasswordResetRequests = null;
			$this->aRole = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseLogin:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseLogin::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseLogin
