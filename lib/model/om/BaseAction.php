<?php

/**
 * Base class that represents a row from the 'EMT_ACTION' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/10/12 16:10:23
 *
 * @package    lib.model.om
 */
abstract class BaseAction extends BaseObject  implements Persistent {


  const PEER = 'ActionPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ActionPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the constant field.
	 * @var        string
	 */
	protected $constant;

	/**
	 * The value for the active field.
	 * @var        boolean
	 */
	protected $active;

	/**
	 * The value for the displayable field.
	 * @var        boolean
	 */
	protected $displayable;

	/**
	 * The value for the commentable field.
	 * @var        boolean
	 */
	protected $commentable;

	/**
	 * The value for the detail_partial field.
	 * @var        string
	 */
	protected $detail_partial;

	/**
	 * The value for the privacy_controlled field.
	 * @var        boolean
	 */
	protected $privacy_controlled;

	/**
	 * @var        array PrivacyPreference[] Collection to store aggregation of PrivacyPreference objects.
	 */
	protected $collPrivacyPreferences;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPrivacyPreferences.
	 */
	private $lastPrivacyPreferenceCriteria = null;

	/**
	 * @var        array ActionI18n[] Collection to store aggregation of ActionI18n objects.
	 */
	protected $collActionI18ns;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActionI18ns.
	 */
	private $lastActionI18nCriteria = null;

	/**
	 * @var        array NotificationPref[] Collection to store aggregation of NotificationPref objects.
	 */
	protected $collNotificationPrefs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotificationPrefs.
	 */
	private $lastNotificationPrefCriteria = null;

	/**
	 * @var        array ErrorLog[] Collection to store aggregation of ErrorLog objects.
	 */
	protected $collErrorLogs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collErrorLogs.
	 */
	private $lastErrorLogCriteria = null;

	/**
	 * @var        array ActionCase[] Collection to store aggregation of ActionCase objects.
	 */
	protected $collActionCases;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActionCases.
	 */
	private $lastActionCaseCriteria = null;

	/**
	 * @var        array Task[] Collection to store aggregation of Task objects.
	 */
	protected $collTasks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTasks.
	 */
	private $lastTaskCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

  /**
   * The value for the culture field.
   * @var string
   */
  protected $culture;

	/**
	 * Initializes internal state of BaseAction object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [constant] column value.
	 * 
	 * @return     string
	 */
	public function getConstant()
	{
		return $this->constant;
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     boolean
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Get the [displayable] column value.
	 * 
	 * @return     boolean
	 */
	public function getDisplayable()
	{
		return $this->displayable;
	}

	/**
	 * Get the [commentable] column value.
	 * 
	 * @return     boolean
	 */
	public function getCommentable()
	{
		return $this->commentable;
	}

	/**
	 * Get the [detail_partial] column value.
	 * 
	 * @return     string
	 */
	public function getDetailPartial()
	{
		return $this->detail_partial;
	}

	/**
	 * Get the [privacy_controlled] column value.
	 * 
	 * @return     boolean
	 */
	public function getPrivacyControlled()
	{
		return $this->privacy_controlled;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Action The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ActionPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [constant] column.
	 * 
	 * @param      string $v new value
	 * @return     Action The current object (for fluent API support)
	 */
	public function setConstant($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->constant !== $v) {
			$this->constant = $v;
			$this->modifiedColumns[] = ActionPeer::CONSTANT;
		}

		return $this;
	} // setConstant()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Action The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->active !== $v) {
			$this->active = $v;
			$this->modifiedColumns[] = ActionPeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Set the value of [displayable] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Action The current object (for fluent API support)
	 */
	public function setDisplayable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->displayable !== $v) {
			$this->displayable = $v;
			$this->modifiedColumns[] = ActionPeer::DISPLAYABLE;
		}

		return $this;
	} // setDisplayable()

	/**
	 * Set the value of [commentable] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Action The current object (for fluent API support)
	 */
	public function setCommentable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->commentable !== $v) {
			$this->commentable = $v;
			$this->modifiedColumns[] = ActionPeer::COMMENTABLE;
		}

		return $this;
	} // setCommentable()

	/**
	 * Set the value of [detail_partial] column.
	 * 
	 * @param      string $v new value
	 * @return     Action The current object (for fluent API support)
	 */
	public function setDetailPartial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->detail_partial !== $v) {
			$this->detail_partial = $v;
			$this->modifiedColumns[] = ActionPeer::DETAIL_PARTIAL;
		}

		return $this;
	} // setDetailPartial()

	/**
	 * Set the value of [privacy_controlled] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Action The current object (for fluent API support)
	 */
	public function setPrivacyControlled($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->privacy_controlled !== $v) {
			$this->privacy_controlled = $v;
			$this->modifiedColumns[] = ActionPeer::PRIVACY_CONTROLLED;
		}

		return $this;
	} // setPrivacyControlled()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->constant = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->active = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->displayable = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->commentable = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
			$this->detail_partial = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->privacy_controlled = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 7; // 7 = ActionPeer::NUM_COLUMNS - ActionPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Action object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ActionPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collPrivacyPreferences = null;
			$this->lastPrivacyPreferenceCriteria = null;

			$this->collActionI18ns = null;
			$this->lastActionI18nCriteria = null;

			$this->collNotificationPrefs = null;
			$this->lastNotificationPrefCriteria = null;

			$this->collErrorLogs = null;
			$this->lastErrorLogCriteria = null;

			$this->collActionCases = null;
			$this->lastActionCaseCriteria = null;

			$this->collTasks = null;
			$this->lastTaskCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAction:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ActionPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseAction:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAction:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseAction:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ActionPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ActionPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ActionPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ActionPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collPrivacyPreferences !== null) {
				foreach ($this->collPrivacyPreferences as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collActionI18ns !== null) {
				foreach ($this->collActionI18ns as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotificationPrefs !== null) {
				foreach ($this->collNotificationPrefs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collErrorLogs !== null) {
				foreach ($this->collErrorLogs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collActionCases !== null) {
				foreach ($this->collActionCases as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTasks !== null) {
				foreach ($this->collTasks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ActionPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collPrivacyPreferences !== null) {
					foreach ($this->collPrivacyPreferences as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collActionI18ns !== null) {
					foreach ($this->collActionI18ns as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotificationPrefs !== null) {
					foreach ($this->collNotificationPrefs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collErrorLogs !== null) {
					foreach ($this->collErrorLogs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collActionCases !== null) {
					foreach ($this->collActionCases as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTasks !== null) {
					foreach ($this->collTasks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ActionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getConstant();
				break;
			case 2:
				return $this->getActive();
				break;
			case 3:
				return $this->getDisplayable();
				break;
			case 4:
				return $this->getCommentable();
				break;
			case 5:
				return $this->getDetailPartial();
				break;
			case 6:
				return $this->getPrivacyControlled();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ActionPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getConstant(),
			$keys[2] => $this->getActive(),
			$keys[3] => $this->getDisplayable(),
			$keys[4] => $this->getCommentable(),
			$keys[5] => $this->getDetailPartial(),
			$keys[6] => $this->getPrivacyControlled(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ActionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setConstant($value);
				break;
			case 2:
				$this->setActive($value);
				break;
			case 3:
				$this->setDisplayable($value);
				break;
			case 4:
				$this->setCommentable($value);
				break;
			case 5:
				$this->setDetailPartial($value);
				break;
			case 6:
				$this->setPrivacyControlled($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ActionPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setConstant($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setActive($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDisplayable($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCommentable($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDetailPartial($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPrivacyControlled($arr[$keys[6]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ActionPeer::DATABASE_NAME);

		if ($this->isColumnModified(ActionPeer::ID)) $criteria->add(ActionPeer::ID, $this->id);
		if ($this->isColumnModified(ActionPeer::CONSTANT)) $criteria->add(ActionPeer::CONSTANT, $this->constant);
		if ($this->isColumnModified(ActionPeer::ACTIVE)) $criteria->add(ActionPeer::ACTIVE, $this->active);
		if ($this->isColumnModified(ActionPeer::DISPLAYABLE)) $criteria->add(ActionPeer::DISPLAYABLE, $this->displayable);
		if ($this->isColumnModified(ActionPeer::COMMENTABLE)) $criteria->add(ActionPeer::COMMENTABLE, $this->commentable);
		if ($this->isColumnModified(ActionPeer::DETAIL_PARTIAL)) $criteria->add(ActionPeer::DETAIL_PARTIAL, $this->detail_partial);
		if ($this->isColumnModified(ActionPeer::PRIVACY_CONTROLLED)) $criteria->add(ActionPeer::PRIVACY_CONTROLLED, $this->privacy_controlled);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ActionPeer::DATABASE_NAME);

		$criteria->add(ActionPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Action (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setConstant($this->constant);

		$copyObj->setActive($this->active);

		$copyObj->setDisplayable($this->displayable);

		$copyObj->setCommentable($this->commentable);

		$copyObj->setDetailPartial($this->detail_partial);

		$copyObj->setPrivacyControlled($this->privacy_controlled);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getPrivacyPreferences() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPrivacyPreference($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getActionI18ns() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActionI18n($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotificationPrefs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotificationPref($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getErrorLogs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addErrorLog($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getActionCases() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActionCase($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTasks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTask($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Action Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ActionPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ActionPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collPrivacyPreferences collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPrivacyPreferences()
	 */
	public function clearPrivacyPreferences()
	{
		$this->collPrivacyPreferences = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPrivacyPreferences collection (array).
	 *
	 * By default this just sets the collPrivacyPreferences collection to an empty array (like clearcollPrivacyPreferences());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPrivacyPreferences()
	{
		$this->collPrivacyPreferences = array();
	}

	/**
	 * Gets an array of PrivacyPreference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Action has previously been saved, it will retrieve
	 * related PrivacyPreferences from storage. If this Action is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PrivacyPreference[]
	 * @throws     PropelException
	 */
	public function getPrivacyPreferences($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferences === null) {
			if ($this->isNew()) {
			   $this->collPrivacyPreferences = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastPrivacyPreferenceCriteria) || !$this->lastPrivacyPreferenceCriteria->equals($criteria)) {
					$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPrivacyPreferenceCriteria = $criteria;
		return $this->collPrivacyPreferences;
	}

	/**
	 * Returns the number of related PrivacyPreference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PrivacyPreference objects.
	 * @throws     PropelException
	 */
	public function countPrivacyPreferences(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPrivacyPreferences === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

				$count = PrivacyPreferencePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

				if (!isset($this->lastPrivacyPreferenceCriteria) || !$this->lastPrivacyPreferenceCriteria->equals($criteria)) {
					$count = PrivacyPreferencePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPrivacyPreferences);
				}
			} else {
				$count = count($this->collPrivacyPreferences);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PrivacyPreference object to this object
	 * through the PrivacyPreference foreign key attribute.
	 *
	 * @param      PrivacyPreference $l PrivacyPreference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPrivacyPreference(PrivacyPreference $l)
	{
		if ($this->collPrivacyPreferences === null) {
			$this->initPrivacyPreferences();
		}
		if (!in_array($l, $this->collPrivacyPreferences, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPrivacyPreferences, $l);
			$l->setAction($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related PrivacyPreferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getPrivacyPreferencesJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferences === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferences = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceCriteria) || !$this->lastPrivacyPreferenceCriteria->equals($criteria)) {
				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceCriteria = $criteria;

		return $this->collPrivacyPreferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related PrivacyPreferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getPrivacyPreferencesJoinRoleRelatedByRoleOnSubject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferences === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferences = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnSubject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceCriteria) || !$this->lastPrivacyPreferenceCriteria->equals($criteria)) {
				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnSubject($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceCriteria = $criteria;

		return $this->collPrivacyPreferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related PrivacyPreferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getPrivacyPreferencesJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferences === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferences = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceCriteria) || !$this->lastPrivacyPreferenceCriteria->equals($criteria)) {
				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceCriteria = $criteria;

		return $this->collPrivacyPreferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related PrivacyPreferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getPrivacyPreferencesJoinRoleRelatedByRoleOnObject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferences === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferences = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnObject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ACTION_ID, $this->id);

			if (!isset($this->lastPrivacyPreferenceCriteria) || !$this->lastPrivacyPreferenceCriteria->equals($criteria)) {
				$this->collPrivacyPreferences = PrivacyPreferencePeer::doSelectJoinRoleRelatedByRoleOnObject($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceCriteria = $criteria;

		return $this->collPrivacyPreferences;
	}

	/**
	 * Clears out the collActionI18ns collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActionI18ns()
	 */
	public function clearActionI18ns()
	{
		$this->collActionI18ns = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActionI18ns collection (array).
	 *
	 * By default this just sets the collActionI18ns collection to an empty array (like clearcollActionI18ns());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActionI18ns()
	{
		$this->collActionI18ns = array();
	}

	/**
	 * Gets an array of ActionI18n objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Action has previously been saved, it will retrieve
	 * related ActionI18ns from storage. If this Action is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ActionI18n[]
	 * @throws     PropelException
	 */
	public function getActionI18ns($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionI18ns === null) {
			if ($this->isNew()) {
			   $this->collActionI18ns = array();
			} else {

				$criteria->add(ActionI18nPeer::ID, $this->id);

				ActionI18nPeer::addSelectColumns($criteria);
				$this->collActionI18ns = ActionI18nPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActionI18nPeer::ID, $this->id);

				ActionI18nPeer::addSelectColumns($criteria);
				if (!isset($this->lastActionI18nCriteria) || !$this->lastActionI18nCriteria->equals($criteria)) {
					$this->collActionI18ns = ActionI18nPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActionI18nCriteria = $criteria;
		return $this->collActionI18ns;
	}

	/**
	 * Returns the number of related ActionI18n objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ActionI18n objects.
	 * @throws     PropelException
	 */
	public function countActionI18ns(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActionI18ns === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActionI18nPeer::ID, $this->id);

				$count = ActionI18nPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActionI18nPeer::ID, $this->id);

				if (!isset($this->lastActionI18nCriteria) || !$this->lastActionI18nCriteria->equals($criteria)) {
					$count = ActionI18nPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collActionI18ns);
				}
			} else {
				$count = count($this->collActionI18ns);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ActionI18n object to this object
	 * through the ActionI18n foreign key attribute.
	 *
	 * @param      ActionI18n $l ActionI18n
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActionI18n(ActionI18n $l)
	{
		if ($this->collActionI18ns === null) {
			$this->initActionI18ns();
		}
		if (!in_array($l, $this->collActionI18ns, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActionI18ns, $l);
			$l->setAction($this);
		}
	}

	/**
	 * Clears out the collNotificationPrefs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotificationPrefs()
	 */
	public function clearNotificationPrefs()
	{
		$this->collNotificationPrefs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotificationPrefs collection (array).
	 *
	 * By default this just sets the collNotificationPrefs collection to an empty array (like clearcollNotificationPrefs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotificationPrefs()
	{
		$this->collNotificationPrefs = array();
	}

	/**
	 * Gets an array of NotificationPref objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Action has previously been saved, it will retrieve
	 * related NotificationPrefs from storage. If this Action is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotificationPref[]
	 * @throws     PropelException
	 */
	public function getNotificationPrefs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotificationPrefs === null) {
			if ($this->isNew()) {
			   $this->collNotificationPrefs = array();
			} else {

				$criteria->add(NotificationPrefPeer::ACTION_ID, $this->id);

				NotificationPrefPeer::addSelectColumns($criteria);
				$this->collNotificationPrefs = NotificationPrefPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotificationPrefPeer::ACTION_ID, $this->id);

				NotificationPrefPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotificationPrefCriteria) || !$this->lastNotificationPrefCriteria->equals($criteria)) {
					$this->collNotificationPrefs = NotificationPrefPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotificationPrefCriteria = $criteria;
		return $this->collNotificationPrefs;
	}

	/**
	 * Returns the number of related NotificationPref objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotificationPref objects.
	 * @throws     PropelException
	 */
	public function countNotificationPrefs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotificationPrefs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotificationPrefPeer::ACTION_ID, $this->id);

				$count = NotificationPrefPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotificationPrefPeer::ACTION_ID, $this->id);

				if (!isset($this->lastNotificationPrefCriteria) || !$this->lastNotificationPrefCriteria->equals($criteria)) {
					$count = NotificationPrefPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotificationPrefs);
				}
			} else {
				$count = count($this->collNotificationPrefs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotificationPref object to this object
	 * through the NotificationPref foreign key attribute.
	 *
	 * @param      NotificationPref $l NotificationPref
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotificationPref(NotificationPref $l)
	{
		if ($this->collNotificationPrefs === null) {
			$this->initNotificationPrefs();
		}
		if (!in_array($l, $this->collNotificationPrefs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotificationPrefs, $l);
			$l->setAction($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related NotificationPrefs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getNotificationPrefsJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotificationPrefs === null) {
			if ($this->isNew()) {
				$this->collNotificationPrefs = array();
			} else {

				$criteria->add(NotificationPrefPeer::ACTION_ID, $this->id);

				$this->collNotificationPrefs = NotificationPrefPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotificationPrefPeer::ACTION_ID, $this->id);

			if (!isset($this->lastNotificationPrefCriteria) || !$this->lastNotificationPrefCriteria->equals($criteria)) {
				$this->collNotificationPrefs = NotificationPrefPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotificationPrefCriteria = $criteria;

		return $this->collNotificationPrefs;
	}

	/**
	 * Clears out the collErrorLogs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addErrorLogs()
	 */
	public function clearErrorLogs()
	{
		$this->collErrorLogs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collErrorLogs collection (array).
	 *
	 * By default this just sets the collErrorLogs collection to an empty array (like clearcollErrorLogs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initErrorLogs()
	{
		$this->collErrorLogs = array();
	}

	/**
	 * Gets an array of ErrorLog objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Action has previously been saved, it will retrieve
	 * related ErrorLogs from storage. If this Action is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ErrorLog[]
	 * @throws     PropelException
	 */
	public function getErrorLogs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collErrorLogs === null) {
			if ($this->isNew()) {
			   $this->collErrorLogs = array();
			} else {

				$criteria->add(ErrorLogPeer::ACTION_ID, $this->id);

				ErrorLogPeer::addSelectColumns($criteria);
				$this->collErrorLogs = ErrorLogPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ErrorLogPeer::ACTION_ID, $this->id);

				ErrorLogPeer::addSelectColumns($criteria);
				if (!isset($this->lastErrorLogCriteria) || !$this->lastErrorLogCriteria->equals($criteria)) {
					$this->collErrorLogs = ErrorLogPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastErrorLogCriteria = $criteria;
		return $this->collErrorLogs;
	}

	/**
	 * Returns the number of related ErrorLog objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ErrorLog objects.
	 * @throws     PropelException
	 */
	public function countErrorLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collErrorLogs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ErrorLogPeer::ACTION_ID, $this->id);

				$count = ErrorLogPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ErrorLogPeer::ACTION_ID, $this->id);

				if (!isset($this->lastErrorLogCriteria) || !$this->lastErrorLogCriteria->equals($criteria)) {
					$count = ErrorLogPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collErrorLogs);
				}
			} else {
				$count = count($this->collErrorLogs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ErrorLog object to this object
	 * through the ErrorLog foreign key attribute.
	 *
	 * @param      ErrorLog $l ErrorLog
	 * @return     void
	 * @throws     PropelException
	 */
	public function addErrorLog(ErrorLog $l)
	{
		if ($this->collErrorLogs === null) {
			$this->initErrorLogs();
		}
		if (!in_array($l, $this->collErrorLogs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collErrorLogs, $l);
			$l->setAction($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related ErrorLogs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getErrorLogsJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collErrorLogs === null) {
			if ($this->isNew()) {
				$this->collErrorLogs = array();
			} else {

				$criteria->add(ErrorLogPeer::ACTION_ID, $this->id);

				$this->collErrorLogs = ErrorLogPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ErrorLogPeer::ACTION_ID, $this->id);

			if (!isset($this->lastErrorLogCriteria) || !$this->lastErrorLogCriteria->equals($criteria)) {
				$this->collErrorLogs = ErrorLogPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastErrorLogCriteria = $criteria;

		return $this->collErrorLogs;
	}

	/**
	 * Clears out the collActionCases collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActionCases()
	 */
	public function clearActionCases()
	{
		$this->collActionCases = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActionCases collection (array).
	 *
	 * By default this just sets the collActionCases collection to an empty array (like clearcollActionCases());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActionCases()
	{
		$this->collActionCases = array();
	}

	/**
	 * Gets an array of ActionCase objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Action has previously been saved, it will retrieve
	 * related ActionCases from storage. If this Action is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ActionCase[]
	 * @throws     PropelException
	 */
	public function getActionCases($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionCases === null) {
			if ($this->isNew()) {
			   $this->collActionCases = array();
			} else {

				$criteria->add(ActionCasePeer::ACTION_ID, $this->id);

				ActionCasePeer::addSelectColumns($criteria);
				$this->collActionCases = ActionCasePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActionCasePeer::ACTION_ID, $this->id);

				ActionCasePeer::addSelectColumns($criteria);
				if (!isset($this->lastActionCaseCriteria) || !$this->lastActionCaseCriteria->equals($criteria)) {
					$this->collActionCases = ActionCasePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActionCaseCriteria = $criteria;
		return $this->collActionCases;
	}

	/**
	 * Returns the number of related ActionCase objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ActionCase objects.
	 * @throws     PropelException
	 */
	public function countActionCases(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActionCases === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActionCasePeer::ACTION_ID, $this->id);

				$count = ActionCasePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActionCasePeer::ACTION_ID, $this->id);

				if (!isset($this->lastActionCaseCriteria) || !$this->lastActionCaseCriteria->equals($criteria)) {
					$count = ActionCasePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collActionCases);
				}
			} else {
				$count = count($this->collActionCases);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ActionCase object to this object
	 * through the ActionCase foreign key attribute.
	 *
	 * @param      ActionCase $l ActionCase
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActionCase(ActionCase $l)
	{
		if ($this->collActionCases === null) {
			$this->initActionCases();
		}
		if (!in_array($l, $this->collActionCases, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActionCases, $l);
			$l->setAction($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related ActionCases from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getActionCasesJoinPrivacyNodeTypeRelatedByIssuerTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionCases === null) {
			if ($this->isNew()) {
				$this->collActionCases = array();
			} else {

				$criteria->add(ActionCasePeer::ACTION_ID, $this->id);

				$this->collActionCases = ActionCasePeer::doSelectJoinPrivacyNodeTypeRelatedByIssuerTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActionCasePeer::ACTION_ID, $this->id);

			if (!isset($this->lastActionCaseCriteria) || !$this->lastActionCaseCriteria->equals($criteria)) {
				$this->collActionCases = ActionCasePeer::doSelectJoinPrivacyNodeTypeRelatedByIssuerTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastActionCaseCriteria = $criteria;

		return $this->collActionCases;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related ActionCases from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getActionCasesJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionCases === null) {
			if ($this->isNew()) {
				$this->collActionCases = array();
			} else {

				$criteria->add(ActionCasePeer::ACTION_ID, $this->id);

				$this->collActionCases = ActionCasePeer::doSelectJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActionCasePeer::ACTION_ID, $this->id);

			if (!isset($this->lastActionCaseCriteria) || !$this->lastActionCaseCriteria->equals($criteria)) {
				$this->collActionCases = ActionCasePeer::doSelectJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastActionCaseCriteria = $criteria;

		return $this->collActionCases;
	}

	/**
	 * Clears out the collTasks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTasks()
	 */
	public function clearTasks()
	{
		$this->collTasks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTasks collection (array).
	 *
	 * By default this just sets the collTasks collection to an empty array (like clearcollTasks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTasks()
	{
		$this->collTasks = array();
	}

	/**
	 * Gets an array of Task objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Action has previously been saved, it will retrieve
	 * related Tasks from storage. If this Action is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Task[]
	 * @throws     PropelException
	 */
	public function getTasks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasks === null) {
			if ($this->isNew()) {
			   $this->collTasks = array();
			} else {

				$criteria->add(TaskPeer::ACTION_ID, $this->id);

				TaskPeer::addSelectColumns($criteria);
				$this->collTasks = TaskPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TaskPeer::ACTION_ID, $this->id);

				TaskPeer::addSelectColumns($criteria);
				if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
					$this->collTasks = TaskPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTaskCriteria = $criteria;
		return $this->collTasks;
	}

	/**
	 * Returns the number of related Task objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Task objects.
	 * @throws     PropelException
	 */
	public function countTasks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTasks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TaskPeer::ACTION_ID, $this->id);

				$count = TaskPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TaskPeer::ACTION_ID, $this->id);

				if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
					$count = TaskPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTasks);
				}
			} else {
				$count = count($this->collTasks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Task object to this object
	 * through the Task foreign key attribute.
	 *
	 * @param      Task $l Task
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTask(Task $l)
	{
		if ($this->collTasks === null) {
			$this->initTasks();
		}
		if (!in_array($l, $this->collTasks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTasks, $l);
			$l->setAction($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related Tasks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getTasksJoinPrivacyNodeTypeRelatedByStaffTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasks === null) {
			if ($this->isNew()) {
				$this->collTasks = array();
			} else {

				$criteria->add(TaskPeer::ACTION_ID, $this->id);

				$this->collTasks = TaskPeer::doSelectJoinPrivacyNodeTypeRelatedByStaffTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::ACTION_ID, $this->id);

			if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
				$this->collTasks = TaskPeer::doSelectJoinPrivacyNodeTypeRelatedByStaffTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskCriteria = $criteria;

		return $this->collTasks;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related Tasks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getTasksJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasks === null) {
			if ($this->isNew()) {
				$this->collTasks = array();
			} else {

				$criteria->add(TaskPeer::ACTION_ID, $this->id);

				$this->collTasks = TaskPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::ACTION_ID, $this->id);

			if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
				$this->collTasks = TaskPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskCriteria = $criteria;

		return $this->collTasks;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Action is new, it will return
	 * an empty collection; or if this Action has previously
	 * been saved, it will retrieve related Tasks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Action.
	 */
	public function getTasksJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasks === null) {
			if ($this->isNew()) {
				$this->collTasks = array();
			} else {

				$criteria->add(TaskPeer::ACTION_ID, $this->id);

				$this->collTasks = TaskPeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::ACTION_ID, $this->id);

			if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
				$this->collTasks = TaskPeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskCriteria = $criteria;

		return $this->collTasks;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collPrivacyPreferences) {
				foreach ((array) $this->collPrivacyPreferences as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collActionI18ns) {
				foreach ((array) $this->collActionI18ns as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotificationPrefs) {
				foreach ((array) $this->collNotificationPrefs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collErrorLogs) {
				foreach ((array) $this->collErrorLogs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collActionCases) {
				foreach ((array) $this->collActionCases as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTasks) {
				foreach ((array) $this->collTasks as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collPrivacyPreferences = null;
		$this->collActionI18ns = null;
		$this->collNotificationPrefs = null;
		$this->collErrorLogs = null;
		$this->collActionCases = null;
		$this->collTasks = null;
	}


  /**
   * Returns the culture.
   *
   * @return string The culture
   */
  public function getCulture()
  {
    return $this->culture;
  }

  /**
   * Sets the culture.
   *
   * @param string $culture The culture to set
   *
   * @return void
   */
  public function setCulture($culture)
  {
    $this->culture = $culture;
  }

  public function getName($culture = null)
  {
    return $this->getCurrentActionI18n($culture)->getName();
  }

  public function setName($value, $culture = null)
  {
    $this->getCurrentActionI18n($culture)->setName($value);
  }

  public function getLogSentence($culture = null)
  {
    return $this->getCurrentActionI18n($culture)->getLogSentence();
  }

  public function setLogSentence($value, $culture = null)
  {
    $this->getCurrentActionI18n($culture)->setLogSentence($value);
  }

  protected $current_i18n = array();

  public function getCurrentActionI18n($culture = null)
  {
    if (is_null($culture))
    {
      $culture = is_null($this->culture) ? sfPropel::getDefaultCulture() : $this->culture;
    }

    if (!isset($this->current_i18n[$culture]))
    {
      $obj = ActionI18nPeer::retrieveByPK($this->getId(), $culture);
      if ($obj)
      {
        $this->setActionI18nForCulture($obj, $culture);
      }
      else
      {
        $this->setActionI18nForCulture(new ActionI18n(), $culture);
        $this->current_i18n[$culture]->setCulture($culture);
      }
    }

    return $this->current_i18n[$culture];
  }

  public function setActionI18nForCulture($object, $culture)
  {
    $this->current_i18n[$culture] = $object;
    $this->addActionI18n($object);
  }


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseAction:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseAction::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseAction
