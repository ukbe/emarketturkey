<?php

/**
 * Base class that represents a row from the 'EMT_RESUME' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/10/12 16:10:18
 *
 * @package    lib.model.om
 */
abstract class BaseResume extends BaseObject  implements Persistent {


  const PEER = 'ResumePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ResumePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the contact_id field.
	 * @var        int
	 */
	protected $contact_id;

	/**
	 * The value for the job_position_id field.
	 * @var        int
	 */
	protected $job_position_id;

	/**
	 * The value for the job_grade_id field.
	 * @var        int
	 */
	protected $job_grade_id;

	/**
	 * The value for the active field.
	 * @var        boolean
	 */
	protected $active;

	/**
	 * The value for the smokes field.
	 * @var        boolean
	 */
	protected $smokes;

	/**
	 * The value for the drivers_license field.
	 * @var        int
	 */
	protected $drivers_license;

	/**
	 * The value for the desired_salary field.
	 * @var        string
	 */
	protected $desired_salary;

	/**
	 * The value for the salary_currency field.
	 * @var        string
	 */
	protected $salary_currency;

	/**
	 * The value for the willing_to_travel field.
	 * @var        int
	 */
	protected $willing_to_travel;

	/**
	 * The value for the willing_to_relocate field.
	 * @var        boolean
	 */
	protected $willing_to_relocate;

	/**
	 * The value for the willing_to_telecommute field.
	 * @var        boolean
	 */
	protected $willing_to_telecommute;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the objective field.
	 * @var        string
	 */
	protected $objective;

	/**
	 * The value for the military_service_status field.
	 * @var        int
	 */
	protected $military_service_status;

	/**
	 * @var        User
	 */
	protected $aUser;

	/**
	 * @var        Contact
	 */
	protected $aContact;

	/**
	 * @var        JobPosition
	 */
	protected $aJobPosition;

	/**
	 * @var        JobGrade
	 */
	protected $aJobGrade;

	/**
	 * @var        array ResumeCourse[] Collection to store aggregation of ResumeCourse objects.
	 */
	protected $collResumeCourses;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeCourses.
	 */
	private $lastResumeCourseCriteria = null;

	/**
	 * @var        array ResumeLanguage[] Collection to store aggregation of ResumeLanguage objects.
	 */
	protected $collResumeLanguages;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeLanguages.
	 */
	private $lastResumeLanguageCriteria = null;

	/**
	 * @var        array ResumeSchool[] Collection to store aggregation of ResumeSchool objects.
	 */
	protected $collResumeSchools;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeSchools.
	 */
	private $lastResumeSchoolCriteria = null;

	/**
	 * @var        array ResumeWork[] Collection to store aggregation of ResumeWork objects.
	 */
	protected $collResumeWorks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeWorks.
	 */
	private $lastResumeWorkCriteria = null;

	/**
	 * @var        array ResumeSkill[] Collection to store aggregation of ResumeSkill objects.
	 */
	protected $collResumeSkills;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeSkills.
	 */
	private $lastResumeSkillCriteria = null;

	/**
	 * @var        array ResumePublication[] Collection to store aggregation of ResumePublication objects.
	 */
	protected $collResumePublications;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumePublications.
	 */
	private $lastResumePublicationCriteria = null;

	/**
	 * @var        array ResumeAward[] Collection to store aggregation of ResumeAward objects.
	 */
	protected $collResumeAwards;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeAwards.
	 */
	private $lastResumeAwardCriteria = null;

	/**
	 * @var        array ResumeReference[] Collection to store aggregation of ResumeReference objects.
	 */
	protected $collResumeReferences;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeReferences.
	 */
	private $lastResumeReferenceCriteria = null;

	/**
	 * @var        array ResumeOrganisation[] Collection to store aggregation of ResumeOrganisation objects.
	 */
	protected $collResumeOrganisations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeOrganisations.
	 */
	private $lastResumeOrganisationCriteria = null;

	/**
	 * @var        array ClassifiedResume[] Collection to store aggregation of ClassifiedResume objects.
	 */
	protected $collClassifiedResumes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collClassifiedResumes.
	 */
	private $lastClassifiedResumeCriteria = null;

	/**
	 * @var        array DatabaseCV[] Collection to store aggregation of DatabaseCV objects.
	 */
	protected $collDatabaseCVs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDatabaseCVs.
	 */
	private $lastDatabaseCVCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseResume object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [contact_id] column value.
	 * 
	 * @return     int
	 */
	public function getContactId()
	{
		return $this->contact_id;
	}

	/**
	 * Get the [job_position_id] column value.
	 * 
	 * @return     int
	 */
	public function getJobPositionId()
	{
		return $this->job_position_id;
	}

	/**
	 * Get the [job_grade_id] column value.
	 * 
	 * @return     int
	 */
	public function getJobGradeId()
	{
		return $this->job_grade_id;
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     boolean
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Get the [smokes] column value.
	 * 
	 * @return     boolean
	 */
	public function getSmokes()
	{
		return $this->smokes;
	}

	/**
	 * Get the [drivers_license] column value.
	 * 
	 * @return     int
	 */
	public function getDriversLicense()
	{
		return $this->drivers_license;
	}

	/**
	 * Get the [desired_salary] column value.
	 * 
	 * @return     string
	 */
	public function getDesiredSalary()
	{
		return $this->desired_salary;
	}

	/**
	 * Get the [salary_currency] column value.
	 * 
	 * @return     string
	 */
	public function getSalaryCurrency()
	{
		return $this->salary_currency;
	}

	/**
	 * Get the [willing_to_travel] column value.
	 * 
	 * @return     int
	 */
	public function getWillingToTravel()
	{
		return $this->willing_to_travel;
	}

	/**
	 * Get the [willing_to_relocate] column value.
	 * 
	 * @return     boolean
	 */
	public function getWillingToRelocate()
	{
		return $this->willing_to_relocate;
	}

	/**
	 * Get the [willing_to_telecommute] column value.
	 * 
	 * @return     boolean
	 */
	public function getWillingToTelecommute()
	{
		return $this->willing_to_telecommute;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [objective] column value.
	 * 
	 * @return     string
	 */
	public function getObjective()
	{
		return $this->objective;
	}

	/**
	 * Get the [military_service_status] column value.
	 * 
	 * @return     int
	 */
	public function getMilitaryServiceStatus()
	{
		return $this->military_service_status;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ResumePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = ResumePeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = ResumePeer::USER_ID;
		}

		if ($this->aUser !== null && $this->aUser->getId() !== $v) {
			$this->aUser = null;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [contact_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setContactId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->contact_id !== $v) {
			$this->contact_id = $v;
			$this->modifiedColumns[] = ResumePeer::CONTACT_ID;
		}

		if ($this->aContact !== null && $this->aContact->getId() !== $v) {
			$this->aContact = null;
		}

		return $this;
	} // setContactId()

	/**
	 * Set the value of [job_position_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setJobPositionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->job_position_id !== $v) {
			$this->job_position_id = $v;
			$this->modifiedColumns[] = ResumePeer::JOB_POSITION_ID;
		}

		if ($this->aJobPosition !== null && $this->aJobPosition->getId() !== $v) {
			$this->aJobPosition = null;
		}

		return $this;
	} // setJobPositionId()

	/**
	 * Set the value of [job_grade_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setJobGradeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->job_grade_id !== $v) {
			$this->job_grade_id = $v;
			$this->modifiedColumns[] = ResumePeer::JOB_GRADE_ID;
		}

		if ($this->aJobGrade !== null && $this->aJobGrade->getId() !== $v) {
			$this->aJobGrade = null;
		}

		return $this;
	} // setJobGradeId()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->active !== $v) {
			$this->active = $v;
			$this->modifiedColumns[] = ResumePeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Set the value of [smokes] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setSmokes($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->smokes !== $v) {
			$this->smokes = $v;
			$this->modifiedColumns[] = ResumePeer::SMOKES;
		}

		return $this;
	} // setSmokes()

	/**
	 * Set the value of [drivers_license] column.
	 * 
	 * @param      int $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setDriversLicense($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->drivers_license !== $v) {
			$this->drivers_license = $v;
			$this->modifiedColumns[] = ResumePeer::DRIVERS_LICENSE;
		}

		return $this;
	} // setDriversLicense()

	/**
	 * Set the value of [desired_salary] column.
	 * 
	 * @param      string $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setDesiredSalary($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->desired_salary !== $v) {
			$this->desired_salary = $v;
			$this->modifiedColumns[] = ResumePeer::DESIRED_SALARY;
		}

		return $this;
	} // setDesiredSalary()

	/**
	 * Set the value of [salary_currency] column.
	 * 
	 * @param      string $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setSalaryCurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salary_currency !== $v) {
			$this->salary_currency = $v;
			$this->modifiedColumns[] = ResumePeer::SALARY_CURRENCY;
		}

		return $this;
	} // setSalaryCurrency()

	/**
	 * Set the value of [willing_to_travel] column.
	 * 
	 * @param      int $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setWillingToTravel($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->willing_to_travel !== $v) {
			$this->willing_to_travel = $v;
			$this->modifiedColumns[] = ResumePeer::WILLING_TO_TRAVEL;
		}

		return $this;
	} // setWillingToTravel()

	/**
	 * Set the value of [willing_to_relocate] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setWillingToRelocate($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->willing_to_relocate !== $v) {
			$this->willing_to_relocate = $v;
			$this->modifiedColumns[] = ResumePeer::WILLING_TO_RELOCATE;
		}

		return $this;
	} // setWillingToRelocate()

	/**
	 * Set the value of [willing_to_telecommute] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setWillingToTelecommute($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->willing_to_telecommute !== $v) {
			$this->willing_to_telecommute = $v;
			$this->modifiedColumns[] = ResumePeer::WILLING_TO_TELECOMMUTE;
		}

		return $this;
	} // setWillingToTelecommute()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ResumePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ResumePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [objective] column.
	 * 
	 * @param      string $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setObjective($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->objective !== $v) {
			$this->objective = $v;
			$this->modifiedColumns[] = ResumePeer::OBJECTIVE;
		}

		return $this;
	} // setObjective()

	/**
	 * Set the value of [military_service_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Resume The current object (for fluent API support)
	 */
	public function setMilitaryServiceStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->military_service_status !== $v) {
			$this->military_service_status = $v;
			$this->modifiedColumns[] = ResumePeer::MILITARY_SERVICE_STATUS;
		}

		return $this;
	} // setMilitaryServiceStatus()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->title = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->user_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->contact_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->job_position_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->job_grade_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->active = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
			$this->smokes = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->drivers_license = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->desired_salary = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->salary_currency = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->willing_to_travel = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->willing_to_relocate = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
			$this->willing_to_telecommute = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->created_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->updated_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->objective = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->military_service_status = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 18; // 18 = ResumePeer::NUM_COLUMNS - ResumePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Resume object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aUser !== null && $this->user_id !== $this->aUser->getId()) {
			$this->aUser = null;
		}
		if ($this->aContact !== null && $this->contact_id !== $this->aContact->getId()) {
			$this->aContact = null;
		}
		if ($this->aJobPosition !== null && $this->job_position_id !== $this->aJobPosition->getId()) {
			$this->aJobPosition = null;
		}
		if ($this->aJobGrade !== null && $this->job_grade_id !== $this->aJobGrade->getId()) {
			$this->aJobGrade = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ResumePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ResumePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aUser = null;
			$this->aContact = null;
			$this->aJobPosition = null;
			$this->aJobGrade = null;
			$this->collResumeCourses = null;
			$this->lastResumeCourseCriteria = null;

			$this->collResumeLanguages = null;
			$this->lastResumeLanguageCriteria = null;

			$this->collResumeSchools = null;
			$this->lastResumeSchoolCriteria = null;

			$this->collResumeWorks = null;
			$this->lastResumeWorkCriteria = null;

			$this->collResumeSkills = null;
			$this->lastResumeSkillCriteria = null;

			$this->collResumePublications = null;
			$this->lastResumePublicationCriteria = null;

			$this->collResumeAwards = null;
			$this->lastResumeAwardCriteria = null;

			$this->collResumeReferences = null;
			$this->lastResumeReferenceCriteria = null;

			$this->collResumeOrganisations = null;
			$this->lastResumeOrganisationCriteria = null;

			$this->collClassifiedResumes = null;
			$this->lastClassifiedResumeCriteria = null;

			$this->collDatabaseCVs = null;
			$this->lastDatabaseCVCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseResume:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ResumePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ResumePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseResume:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseResume:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(ResumePeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(ResumePeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ResumePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseResume:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ResumePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUser !== null) {
				if ($this->aUser->isModified() || $this->aUser->isNew()) {
					$affectedRows += $this->aUser->save($con);
				}
				$this->setUser($this->aUser);
			}

			if ($this->aContact !== null) {
				if ($this->aContact->isModified() || $this->aContact->isNew()) {
					$affectedRows += $this->aContact->save($con);
				}
				$this->setContact($this->aContact);
			}

			if ($this->aJobPosition !== null) {
				if ($this->aJobPosition->isModified() || ($this->aJobPosition->getCulture() && $this->aJobPosition->getCurrentJobPositionI18n()->isModified()) || $this->aJobPosition->isNew()) {
					$affectedRows += $this->aJobPosition->save($con);
				}
				$this->setJobPosition($this->aJobPosition);
			}

			if ($this->aJobGrade !== null) {
				if ($this->aJobGrade->isModified() || ($this->aJobGrade->getCulture() && $this->aJobGrade->getCurrentJobGradeI18n()->isModified()) || $this->aJobGrade->isNew()) {
					$affectedRows += $this->aJobGrade->save($con);
				}
				$this->setJobGrade($this->aJobGrade);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ResumePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ResumePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ResumePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collResumeCourses !== null) {
				foreach ($this->collResumeCourses as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeLanguages !== null) {
				foreach ($this->collResumeLanguages as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeSchools !== null) {
				foreach ($this->collResumeSchools as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeWorks !== null) {
				foreach ($this->collResumeWorks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeSkills !== null) {
				foreach ($this->collResumeSkills as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumePublications !== null) {
				foreach ($this->collResumePublications as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeAwards !== null) {
				foreach ($this->collResumeAwards as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeReferences !== null) {
				foreach ($this->collResumeReferences as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeOrganisations !== null) {
				foreach ($this->collResumeOrganisations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collClassifiedResumes !== null) {
				foreach ($this->collClassifiedResumes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDatabaseCVs !== null) {
				foreach ($this->collDatabaseCVs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUser !== null) {
				if (!$this->aUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUser->getValidationFailures());
				}
			}

			if ($this->aContact !== null) {
				if (!$this->aContact->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aContact->getValidationFailures());
				}
			}

			if ($this->aJobPosition !== null) {
				if (!$this->aJobPosition->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJobPosition->getValidationFailures());
				}
			}

			if ($this->aJobGrade !== null) {
				if (!$this->aJobGrade->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJobGrade->getValidationFailures());
				}
			}


			if (($retval = ResumePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collResumeCourses !== null) {
					foreach ($this->collResumeCourses as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeLanguages !== null) {
					foreach ($this->collResumeLanguages as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeSchools !== null) {
					foreach ($this->collResumeSchools as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeWorks !== null) {
					foreach ($this->collResumeWorks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeSkills !== null) {
					foreach ($this->collResumeSkills as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumePublications !== null) {
					foreach ($this->collResumePublications as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeAwards !== null) {
					foreach ($this->collResumeAwards as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeReferences !== null) {
					foreach ($this->collResumeReferences as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeOrganisations !== null) {
					foreach ($this->collResumeOrganisations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collClassifiedResumes !== null) {
					foreach ($this->collClassifiedResumes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDatabaseCVs !== null) {
					foreach ($this->collDatabaseCVs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ResumePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getTitle();
				break;
			case 2:
				return $this->getUserId();
				break;
			case 3:
				return $this->getContactId();
				break;
			case 4:
				return $this->getJobPositionId();
				break;
			case 5:
				return $this->getJobGradeId();
				break;
			case 6:
				return $this->getActive();
				break;
			case 7:
				return $this->getSmokes();
				break;
			case 8:
				return $this->getDriversLicense();
				break;
			case 9:
				return $this->getDesiredSalary();
				break;
			case 10:
				return $this->getSalaryCurrency();
				break;
			case 11:
				return $this->getWillingToTravel();
				break;
			case 12:
				return $this->getWillingToRelocate();
				break;
			case 13:
				return $this->getWillingToTelecommute();
				break;
			case 14:
				return $this->getCreatedAt();
				break;
			case 15:
				return $this->getUpdatedAt();
				break;
			case 16:
				return $this->getObjective();
				break;
			case 17:
				return $this->getMilitaryServiceStatus();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ResumePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getTitle(),
			$keys[2] => $this->getUserId(),
			$keys[3] => $this->getContactId(),
			$keys[4] => $this->getJobPositionId(),
			$keys[5] => $this->getJobGradeId(),
			$keys[6] => $this->getActive(),
			$keys[7] => $this->getSmokes(),
			$keys[8] => $this->getDriversLicense(),
			$keys[9] => $this->getDesiredSalary(),
			$keys[10] => $this->getSalaryCurrency(),
			$keys[11] => $this->getWillingToTravel(),
			$keys[12] => $this->getWillingToRelocate(),
			$keys[13] => $this->getWillingToTelecommute(),
			$keys[14] => $this->getCreatedAt(),
			$keys[15] => $this->getUpdatedAt(),
			$keys[16] => $this->getObjective(),
			$keys[17] => $this->getMilitaryServiceStatus(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ResumePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setTitle($value);
				break;
			case 2:
				$this->setUserId($value);
				break;
			case 3:
				$this->setContactId($value);
				break;
			case 4:
				$this->setJobPositionId($value);
				break;
			case 5:
				$this->setJobGradeId($value);
				break;
			case 6:
				$this->setActive($value);
				break;
			case 7:
				$this->setSmokes($value);
				break;
			case 8:
				$this->setDriversLicense($value);
				break;
			case 9:
				$this->setDesiredSalary($value);
				break;
			case 10:
				$this->setSalaryCurrency($value);
				break;
			case 11:
				$this->setWillingToTravel($value);
				break;
			case 12:
				$this->setWillingToRelocate($value);
				break;
			case 13:
				$this->setWillingToTelecommute($value);
				break;
			case 14:
				$this->setCreatedAt($value);
				break;
			case 15:
				$this->setUpdatedAt($value);
				break;
			case 16:
				$this->setObjective($value);
				break;
			case 17:
				$this->setMilitaryServiceStatus($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ResumePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTitle($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setUserId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setContactId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setJobPositionId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setJobGradeId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setActive($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setSmokes($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDriversLicense($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDesiredSalary($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setSalaryCurrency($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setWillingToTravel($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setWillingToRelocate($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setWillingToTelecommute($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCreatedAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setUpdatedAt($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setObjective($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMilitaryServiceStatus($arr[$keys[17]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ResumePeer::DATABASE_NAME);

		if ($this->isColumnModified(ResumePeer::ID)) $criteria->add(ResumePeer::ID, $this->id);
		if ($this->isColumnModified(ResumePeer::TITLE)) $criteria->add(ResumePeer::TITLE, $this->title);
		if ($this->isColumnModified(ResumePeer::USER_ID)) $criteria->add(ResumePeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(ResumePeer::CONTACT_ID)) $criteria->add(ResumePeer::CONTACT_ID, $this->contact_id);
		if ($this->isColumnModified(ResumePeer::JOB_POSITION_ID)) $criteria->add(ResumePeer::JOB_POSITION_ID, $this->job_position_id);
		if ($this->isColumnModified(ResumePeer::JOB_GRADE_ID)) $criteria->add(ResumePeer::JOB_GRADE_ID, $this->job_grade_id);
		if ($this->isColumnModified(ResumePeer::ACTIVE)) $criteria->add(ResumePeer::ACTIVE, $this->active);
		if ($this->isColumnModified(ResumePeer::SMOKES)) $criteria->add(ResumePeer::SMOKES, $this->smokes);
		if ($this->isColumnModified(ResumePeer::DRIVERS_LICENSE)) $criteria->add(ResumePeer::DRIVERS_LICENSE, $this->drivers_license);
		if ($this->isColumnModified(ResumePeer::DESIRED_SALARY)) $criteria->add(ResumePeer::DESIRED_SALARY, $this->desired_salary);
		if ($this->isColumnModified(ResumePeer::SALARY_CURRENCY)) $criteria->add(ResumePeer::SALARY_CURRENCY, $this->salary_currency);
		if ($this->isColumnModified(ResumePeer::WILLING_TO_TRAVEL)) $criteria->add(ResumePeer::WILLING_TO_TRAVEL, $this->willing_to_travel);
		if ($this->isColumnModified(ResumePeer::WILLING_TO_RELOCATE)) $criteria->add(ResumePeer::WILLING_TO_RELOCATE, $this->willing_to_relocate);
		if ($this->isColumnModified(ResumePeer::WILLING_TO_TELECOMMUTE)) $criteria->add(ResumePeer::WILLING_TO_TELECOMMUTE, $this->willing_to_telecommute);
		if ($this->isColumnModified(ResumePeer::CREATED_AT)) $criteria->add(ResumePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ResumePeer::UPDATED_AT)) $criteria->add(ResumePeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(ResumePeer::OBJECTIVE)) $criteria->add(ResumePeer::OBJECTIVE, $this->objective);
		if ($this->isColumnModified(ResumePeer::MILITARY_SERVICE_STATUS)) $criteria->add(ResumePeer::MILITARY_SERVICE_STATUS, $this->military_service_status);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ResumePeer::DATABASE_NAME);

		$criteria->add(ResumePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Resume (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTitle($this->title);

		$copyObj->setUserId($this->user_id);

		$copyObj->setContactId($this->contact_id);

		$copyObj->setJobPositionId($this->job_position_id);

		$copyObj->setJobGradeId($this->job_grade_id);

		$copyObj->setActive($this->active);

		$copyObj->setSmokes($this->smokes);

		$copyObj->setDriversLicense($this->drivers_license);

		$copyObj->setDesiredSalary($this->desired_salary);

		$copyObj->setSalaryCurrency($this->salary_currency);

		$copyObj->setWillingToTravel($this->willing_to_travel);

		$copyObj->setWillingToRelocate($this->willing_to_relocate);

		$copyObj->setWillingToTelecommute($this->willing_to_telecommute);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setObjective($this->objective);

		$copyObj->setMilitaryServiceStatus($this->military_service_status);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getResumeCourses() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeCourse($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeLanguages() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeLanguage($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeSchools() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeSchool($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeWorks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeWork($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeSkills() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeSkill($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumePublications() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumePublication($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeAwards() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeAward($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeReferences() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeReference($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeOrganisations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeOrganisation($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getClassifiedResumes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addClassifiedResume($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDatabaseCVs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDatabaseCV($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Resume Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ResumePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ResumePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a User object.
	 *
	 * @param      User $v
	 * @return     Resume The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUser(User $v = null)
	{
		if ($v === null) {
			$this->setUserId(NULL);
		} else {
			$this->setUserId($v->getId());
		}

		$this->aUser = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the User object, it will not be re-added.
		if ($v !== null) {
			$v->addResume($this);
		}

		return $this;
	}


	/**
	 * Get the associated User object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     User The associated User object.
	 * @throws     PropelException
	 */
	public function getUser(PropelPDO $con = null)
	{
		if ($this->aUser === null && ($this->user_id !== null)) {
			$c = new Criteria(UserPeer::DATABASE_NAME);
			$c->add(UserPeer::ID, $this->user_id);
			$this->aUser = UserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUser->addResumes($this);
			 */
		}
		return $this->aUser;
	}

	/**
	 * Declares an association between this object and a Contact object.
	 *
	 * @param      Contact $v
	 * @return     Resume The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setContact(Contact $v = null)
	{
		if ($v === null) {
			$this->setContactId(NULL);
		} else {
			$this->setContactId($v->getId());
		}

		$this->aContact = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Contact object, it will not be re-added.
		if ($v !== null) {
			$v->addResume($this);
		}

		return $this;
	}


	/**
	 * Get the associated Contact object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Contact The associated Contact object.
	 * @throws     PropelException
	 */
	public function getContact(PropelPDO $con = null)
	{
		if ($this->aContact === null && ($this->contact_id !== null)) {
			$c = new Criteria(ContactPeer::DATABASE_NAME);
			$c->add(ContactPeer::ID, $this->contact_id);
			$this->aContact = ContactPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aContact->addResumes($this);
			 */
		}
		return $this->aContact;
	}

	/**
	 * Declares an association between this object and a JobPosition object.
	 *
	 * @param      JobPosition $v
	 * @return     Resume The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJobPosition(JobPosition $v = null)
	{
		if ($v === null) {
			$this->setJobPositionId(NULL);
		} else {
			$this->setJobPositionId($v->getId());
		}

		$this->aJobPosition = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the JobPosition object, it will not be re-added.
		if ($v !== null) {
			$v->addResume($this);
		}

		return $this;
	}


	/**
	 * Get the associated JobPosition object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     JobPosition The associated JobPosition object.
	 * @throws     PropelException
	 */
	public function getJobPosition(PropelPDO $con = null)
	{
		if ($this->aJobPosition === null && ($this->job_position_id !== null)) {
			$c = new Criteria(JobPositionPeer::DATABASE_NAME);
			$c->add(JobPositionPeer::ID, $this->job_position_id);
			$this->aJobPosition = JobPositionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJobPosition->addResumes($this);
			 */
		}
		return $this->aJobPosition;
	}

	/**
	 * Declares an association between this object and a JobGrade object.
	 *
	 * @param      JobGrade $v
	 * @return     Resume The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJobGrade(JobGrade $v = null)
	{
		if ($v === null) {
			$this->setJobGradeId(NULL);
		} else {
			$this->setJobGradeId($v->getId());
		}

		$this->aJobGrade = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the JobGrade object, it will not be re-added.
		if ($v !== null) {
			$v->addResume($this);
		}

		return $this;
	}


	/**
	 * Get the associated JobGrade object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     JobGrade The associated JobGrade object.
	 * @throws     PropelException
	 */
	public function getJobGrade(PropelPDO $con = null)
	{
		if ($this->aJobGrade === null && ($this->job_grade_id !== null)) {
			$c = new Criteria(JobGradePeer::DATABASE_NAME);
			$c->add(JobGradePeer::ID, $this->job_grade_id);
			$this->aJobGrade = JobGradePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJobGrade->addResumes($this);
			 */
		}
		return $this->aJobGrade;
	}

	/**
	 * Clears out the collResumeCourses collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeCourses()
	 */
	public function clearResumeCourses()
	{
		$this->collResumeCourses = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeCourses collection (array).
	 *
	 * By default this just sets the collResumeCourses collection to an empty array (like clearcollResumeCourses());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeCourses()
	{
		$this->collResumeCourses = array();
	}

	/**
	 * Gets an array of ResumeCourse objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumeCourses from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeCourse[]
	 * @throws     PropelException
	 */
	public function getResumeCourses($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeCourses === null) {
			if ($this->isNew()) {
			   $this->collResumeCourses = array();
			} else {

				$criteria->add(ResumeCoursePeer::RESUME_ID, $this->id);

				ResumeCoursePeer::addSelectColumns($criteria);
				$this->collResumeCourses = ResumeCoursePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeCoursePeer::RESUME_ID, $this->id);

				ResumeCoursePeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeCourseCriteria) || !$this->lastResumeCourseCriteria->equals($criteria)) {
					$this->collResumeCourses = ResumeCoursePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeCourseCriteria = $criteria;
		return $this->collResumeCourses;
	}

	/**
	 * Returns the number of related ResumeCourse objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeCourse objects.
	 * @throws     PropelException
	 */
	public function countResumeCourses(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeCourses === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeCoursePeer::RESUME_ID, $this->id);

				$count = ResumeCoursePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeCoursePeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumeCourseCriteria) || !$this->lastResumeCourseCriteria->equals($criteria)) {
					$count = ResumeCoursePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeCourses);
				}
			} else {
				$count = count($this->collResumeCourses);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeCourse object to this object
	 * through the ResumeCourse foreign key attribute.
	 *
	 * @param      ResumeCourse $l ResumeCourse
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeCourse(ResumeCourse $l)
	{
		if ($this->collResumeCourses === null) {
			$this->initResumeCourses();
		}
		if (!in_array($l, $this->collResumeCourses, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeCourses, $l);
			$l->setResume($this);
		}
	}

	/**
	 * Clears out the collResumeLanguages collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeLanguages()
	 */
	public function clearResumeLanguages()
	{
		$this->collResumeLanguages = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeLanguages collection (array).
	 *
	 * By default this just sets the collResumeLanguages collection to an empty array (like clearcollResumeLanguages());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeLanguages()
	{
		$this->collResumeLanguages = array();
	}

	/**
	 * Gets an array of ResumeLanguage objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumeLanguages from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeLanguage[]
	 * @throws     PropelException
	 */
	public function getResumeLanguages($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeLanguages === null) {
			if ($this->isNew()) {
			   $this->collResumeLanguages = array();
			} else {

				$criteria->add(ResumeLanguagePeer::RESUME_ID, $this->id);

				ResumeLanguagePeer::addSelectColumns($criteria);
				$this->collResumeLanguages = ResumeLanguagePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeLanguagePeer::RESUME_ID, $this->id);

				ResumeLanguagePeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeLanguageCriteria) || !$this->lastResumeLanguageCriteria->equals($criteria)) {
					$this->collResumeLanguages = ResumeLanguagePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeLanguageCriteria = $criteria;
		return $this->collResumeLanguages;
	}

	/**
	 * Returns the number of related ResumeLanguage objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeLanguage objects.
	 * @throws     PropelException
	 */
	public function countResumeLanguages(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeLanguages === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeLanguagePeer::RESUME_ID, $this->id);

				$count = ResumeLanguagePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeLanguagePeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumeLanguageCriteria) || !$this->lastResumeLanguageCriteria->equals($criteria)) {
					$count = ResumeLanguagePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeLanguages);
				}
			} else {
				$count = count($this->collResumeLanguages);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeLanguage object to this object
	 * through the ResumeLanguage foreign key attribute.
	 *
	 * @param      ResumeLanguage $l ResumeLanguage
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeLanguage(ResumeLanguage $l)
	{
		if ($this->collResumeLanguages === null) {
			$this->initResumeLanguages();
		}
		if (!in_array($l, $this->collResumeLanguages, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeLanguages, $l);
			$l->setResume($this);
		}
	}

	/**
	 * Clears out the collResumeSchools collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeSchools()
	 */
	public function clearResumeSchools()
	{
		$this->collResumeSchools = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeSchools collection (array).
	 *
	 * By default this just sets the collResumeSchools collection to an empty array (like clearcollResumeSchools());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeSchools()
	{
		$this->collResumeSchools = array();
	}

	/**
	 * Gets an array of ResumeSchool objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumeSchools from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeSchool[]
	 * @throws     PropelException
	 */
	public function getResumeSchools($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeSchools === null) {
			if ($this->isNew()) {
			   $this->collResumeSchools = array();
			} else {

				$criteria->add(ResumeSchoolPeer::RESUME_ID, $this->id);

				ResumeSchoolPeer::addSelectColumns($criteria);
				$this->collResumeSchools = ResumeSchoolPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeSchoolPeer::RESUME_ID, $this->id);

				ResumeSchoolPeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeSchoolCriteria) || !$this->lastResumeSchoolCriteria->equals($criteria)) {
					$this->collResumeSchools = ResumeSchoolPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeSchoolCriteria = $criteria;
		return $this->collResumeSchools;
	}

	/**
	 * Returns the number of related ResumeSchool objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeSchool objects.
	 * @throws     PropelException
	 */
	public function countResumeSchools(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeSchools === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeSchoolPeer::RESUME_ID, $this->id);

				$count = ResumeSchoolPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeSchoolPeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumeSchoolCriteria) || !$this->lastResumeSchoolCriteria->equals($criteria)) {
					$count = ResumeSchoolPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeSchools);
				}
			} else {
				$count = count($this->collResumeSchools);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeSchool object to this object
	 * through the ResumeSchool foreign key attribute.
	 *
	 * @param      ResumeSchool $l ResumeSchool
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeSchool(ResumeSchool $l)
	{
		if ($this->collResumeSchools === null) {
			$this->initResumeSchools();
		}
		if (!in_array($l, $this->collResumeSchools, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeSchools, $l);
			$l->setResume($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related ResumeSchools from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getResumeSchoolsJoinResumeSchoolDegree($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeSchools === null) {
			if ($this->isNew()) {
				$this->collResumeSchools = array();
			} else {

				$criteria->add(ResumeSchoolPeer::RESUME_ID, $this->id);

				$this->collResumeSchools = ResumeSchoolPeer::doSelectJoinResumeSchoolDegree($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeSchoolPeer::RESUME_ID, $this->id);

			if (!isset($this->lastResumeSchoolCriteria) || !$this->lastResumeSchoolCriteria->equals($criteria)) {
				$this->collResumeSchools = ResumeSchoolPeer::doSelectJoinResumeSchoolDegree($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeSchoolCriteria = $criteria;

		return $this->collResumeSchools;
	}

	/**
	 * Clears out the collResumeWorks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeWorks()
	 */
	public function clearResumeWorks()
	{
		$this->collResumeWorks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeWorks collection (array).
	 *
	 * By default this just sets the collResumeWorks collection to an empty array (like clearcollResumeWorks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeWorks()
	{
		$this->collResumeWorks = array();
	}

	/**
	 * Gets an array of ResumeWork objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumeWorks from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeWork[]
	 * @throws     PropelException
	 */
	public function getResumeWorks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeWorks === null) {
			if ($this->isNew()) {
			   $this->collResumeWorks = array();
			} else {

				$criteria->add(ResumeWorkPeer::RESUME_ID, $this->id);

				ResumeWorkPeer::addSelectColumns($criteria);
				$this->collResumeWorks = ResumeWorkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeWorkPeer::RESUME_ID, $this->id);

				ResumeWorkPeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeWorkCriteria) || !$this->lastResumeWorkCriteria->equals($criteria)) {
					$this->collResumeWorks = ResumeWorkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeWorkCriteria = $criteria;
		return $this->collResumeWorks;
	}

	/**
	 * Returns the number of related ResumeWork objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeWork objects.
	 * @throws     PropelException
	 */
	public function countResumeWorks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeWorks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeWorkPeer::RESUME_ID, $this->id);

				$count = ResumeWorkPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeWorkPeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumeWorkCriteria) || !$this->lastResumeWorkCriteria->equals($criteria)) {
					$count = ResumeWorkPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeWorks);
				}
			} else {
				$count = count($this->collResumeWorks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeWork object to this object
	 * through the ResumeWork foreign key attribute.
	 *
	 * @param      ResumeWork $l ResumeWork
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeWork(ResumeWork $l)
	{
		if ($this->collResumeWorks === null) {
			$this->initResumeWorks();
		}
		if (!in_array($l, $this->collResumeWorks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeWorks, $l);
			$l->setResume($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related ResumeWorks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getResumeWorksJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeWorks === null) {
			if ($this->isNew()) {
				$this->collResumeWorks = array();
			} else {

				$criteria->add(ResumeWorkPeer::RESUME_ID, $this->id);

				$this->collResumeWorks = ResumeWorkPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeWorkPeer::RESUME_ID, $this->id);

			if (!isset($this->lastResumeWorkCriteria) || !$this->lastResumeWorkCriteria->equals($criteria)) {
				$this->collResumeWorks = ResumeWorkPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeWorkCriteria = $criteria;

		return $this->collResumeWorks;
	}

	/**
	 * Clears out the collResumeSkills collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeSkills()
	 */
	public function clearResumeSkills()
	{
		$this->collResumeSkills = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeSkills collection (array).
	 *
	 * By default this just sets the collResumeSkills collection to an empty array (like clearcollResumeSkills());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeSkills()
	{
		$this->collResumeSkills = array();
	}

	/**
	 * Gets an array of ResumeSkill objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumeSkills from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeSkill[]
	 * @throws     PropelException
	 */
	public function getResumeSkills($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeSkills === null) {
			if ($this->isNew()) {
			   $this->collResumeSkills = array();
			} else {

				$criteria->add(ResumeSkillPeer::RESUME_ID, $this->id);

				ResumeSkillPeer::addSelectColumns($criteria);
				$this->collResumeSkills = ResumeSkillPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeSkillPeer::RESUME_ID, $this->id);

				ResumeSkillPeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeSkillCriteria) || !$this->lastResumeSkillCriteria->equals($criteria)) {
					$this->collResumeSkills = ResumeSkillPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeSkillCriteria = $criteria;
		return $this->collResumeSkills;
	}

	/**
	 * Returns the number of related ResumeSkill objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeSkill objects.
	 * @throws     PropelException
	 */
	public function countResumeSkills(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeSkills === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeSkillPeer::RESUME_ID, $this->id);

				$count = ResumeSkillPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeSkillPeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumeSkillCriteria) || !$this->lastResumeSkillCriteria->equals($criteria)) {
					$count = ResumeSkillPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeSkills);
				}
			} else {
				$count = count($this->collResumeSkills);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeSkill object to this object
	 * through the ResumeSkill foreign key attribute.
	 *
	 * @param      ResumeSkill $l ResumeSkill
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeSkill(ResumeSkill $l)
	{
		if ($this->collResumeSkills === null) {
			$this->initResumeSkills();
		}
		if (!in_array($l, $this->collResumeSkills, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeSkills, $l);
			$l->setResume($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related ResumeSkills from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getResumeSkillsJoinSkillInventoryItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeSkills === null) {
			if ($this->isNew()) {
				$this->collResumeSkills = array();
			} else {

				$criteria->add(ResumeSkillPeer::RESUME_ID, $this->id);

				$this->collResumeSkills = ResumeSkillPeer::doSelectJoinSkillInventoryItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeSkillPeer::RESUME_ID, $this->id);

			if (!isset($this->lastResumeSkillCriteria) || !$this->lastResumeSkillCriteria->equals($criteria)) {
				$this->collResumeSkills = ResumeSkillPeer::doSelectJoinSkillInventoryItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeSkillCriteria = $criteria;

		return $this->collResumeSkills;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related ResumeSkills from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getResumeSkillsJoinProficiency($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeSkills === null) {
			if ($this->isNew()) {
				$this->collResumeSkills = array();
			} else {

				$criteria->add(ResumeSkillPeer::RESUME_ID, $this->id);

				$this->collResumeSkills = ResumeSkillPeer::doSelectJoinProficiency($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeSkillPeer::RESUME_ID, $this->id);

			if (!isset($this->lastResumeSkillCriteria) || !$this->lastResumeSkillCriteria->equals($criteria)) {
				$this->collResumeSkills = ResumeSkillPeer::doSelectJoinProficiency($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeSkillCriteria = $criteria;

		return $this->collResumeSkills;
	}

	/**
	 * Clears out the collResumePublications collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumePublications()
	 */
	public function clearResumePublications()
	{
		$this->collResumePublications = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumePublications collection (array).
	 *
	 * By default this just sets the collResumePublications collection to an empty array (like clearcollResumePublications());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumePublications()
	{
		$this->collResumePublications = array();
	}

	/**
	 * Gets an array of ResumePublication objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumePublications from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumePublication[]
	 * @throws     PropelException
	 */
	public function getResumePublications($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumePublications === null) {
			if ($this->isNew()) {
			   $this->collResumePublications = array();
			} else {

				$criteria->add(ResumePublicationPeer::RESUME_ID, $this->id);

				ResumePublicationPeer::addSelectColumns($criteria);
				$this->collResumePublications = ResumePublicationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumePublicationPeer::RESUME_ID, $this->id);

				ResumePublicationPeer::addSelectColumns($criteria);
				if (!isset($this->lastResumePublicationCriteria) || !$this->lastResumePublicationCriteria->equals($criteria)) {
					$this->collResumePublications = ResumePublicationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumePublicationCriteria = $criteria;
		return $this->collResumePublications;
	}

	/**
	 * Returns the number of related ResumePublication objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumePublication objects.
	 * @throws     PropelException
	 */
	public function countResumePublications(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumePublications === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumePublicationPeer::RESUME_ID, $this->id);

				$count = ResumePublicationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumePublicationPeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumePublicationCriteria) || !$this->lastResumePublicationCriteria->equals($criteria)) {
					$count = ResumePublicationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumePublications);
				}
			} else {
				$count = count($this->collResumePublications);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumePublication object to this object
	 * through the ResumePublication foreign key attribute.
	 *
	 * @param      ResumePublication $l ResumePublication
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumePublication(ResumePublication $l)
	{
		if ($this->collResumePublications === null) {
			$this->initResumePublications();
		}
		if (!in_array($l, $this->collResumePublications, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumePublications, $l);
			$l->setResume($this);
		}
	}

	/**
	 * Clears out the collResumeAwards collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeAwards()
	 */
	public function clearResumeAwards()
	{
		$this->collResumeAwards = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeAwards collection (array).
	 *
	 * By default this just sets the collResumeAwards collection to an empty array (like clearcollResumeAwards());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeAwards()
	{
		$this->collResumeAwards = array();
	}

	/**
	 * Gets an array of ResumeAward objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumeAwards from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeAward[]
	 * @throws     PropelException
	 */
	public function getResumeAwards($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeAwards === null) {
			if ($this->isNew()) {
			   $this->collResumeAwards = array();
			} else {

				$criteria->add(ResumeAwardPeer::RESUME_ID, $this->id);

				ResumeAwardPeer::addSelectColumns($criteria);
				$this->collResumeAwards = ResumeAwardPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeAwardPeer::RESUME_ID, $this->id);

				ResumeAwardPeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeAwardCriteria) || !$this->lastResumeAwardCriteria->equals($criteria)) {
					$this->collResumeAwards = ResumeAwardPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeAwardCriteria = $criteria;
		return $this->collResumeAwards;
	}

	/**
	 * Returns the number of related ResumeAward objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeAward objects.
	 * @throws     PropelException
	 */
	public function countResumeAwards(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeAwards === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeAwardPeer::RESUME_ID, $this->id);

				$count = ResumeAwardPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeAwardPeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumeAwardCriteria) || !$this->lastResumeAwardCriteria->equals($criteria)) {
					$count = ResumeAwardPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeAwards);
				}
			} else {
				$count = count($this->collResumeAwards);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeAward object to this object
	 * through the ResumeAward foreign key attribute.
	 *
	 * @param      ResumeAward $l ResumeAward
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeAward(ResumeAward $l)
	{
		if ($this->collResumeAwards === null) {
			$this->initResumeAwards();
		}
		if (!in_array($l, $this->collResumeAwards, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeAwards, $l);
			$l->setResume($this);
		}
	}

	/**
	 * Clears out the collResumeReferences collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeReferences()
	 */
	public function clearResumeReferences()
	{
		$this->collResumeReferences = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeReferences collection (array).
	 *
	 * By default this just sets the collResumeReferences collection to an empty array (like clearcollResumeReferences());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeReferences()
	{
		$this->collResumeReferences = array();
	}

	/**
	 * Gets an array of ResumeReference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumeReferences from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeReference[]
	 * @throws     PropelException
	 */
	public function getResumeReferences($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
			   $this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

				ResumeReferencePeer::addSelectColumns($criteria);
				$this->collResumeReferences = ResumeReferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

				ResumeReferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
					$this->collResumeReferences = ResumeReferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;
		return $this->collResumeReferences;
	}

	/**
	 * Returns the number of related ResumeReference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeReference objects.
	 * @throws     PropelException
	 */
	public function countResumeReferences(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

				$count = ResumeReferencePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
					$count = ResumeReferencePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeReferences);
				}
			} else {
				$count = count($this->collResumeReferences);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeReference object to this object
	 * through the ResumeReference foreign key attribute.
	 *
	 * @param      ResumeReference $l ResumeReference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeReference(ResumeReference $l)
	{
		if ($this->collResumeReferences === null) {
			$this->initResumeReferences();
		}
		if (!in_array($l, $this->collResumeReferences, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeReferences, $l);
			$l->setResume($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getResumeReferencesJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getResumeReferencesJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getResumeReferencesJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::RESUME_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}

	/**
	 * Clears out the collResumeOrganisations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeOrganisations()
	 */
	public function clearResumeOrganisations()
	{
		$this->collResumeOrganisations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeOrganisations collection (array).
	 *
	 * By default this just sets the collResumeOrganisations collection to an empty array (like clearcollResumeOrganisations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeOrganisations()
	{
		$this->collResumeOrganisations = array();
	}

	/**
	 * Gets an array of ResumeOrganisation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ResumeOrganisations from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeOrganisation[]
	 * @throws     PropelException
	 */
	public function getResumeOrganisations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeOrganisations === null) {
			if ($this->isNew()) {
			   $this->collResumeOrganisations = array();
			} else {

				$criteria->add(ResumeOrganisationPeer::RESUME_ID, $this->id);

				ResumeOrganisationPeer::addSelectColumns($criteria);
				$this->collResumeOrganisations = ResumeOrganisationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeOrganisationPeer::RESUME_ID, $this->id);

				ResumeOrganisationPeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeOrganisationCriteria) || !$this->lastResumeOrganisationCriteria->equals($criteria)) {
					$this->collResumeOrganisations = ResumeOrganisationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeOrganisationCriteria = $criteria;
		return $this->collResumeOrganisations;
	}

	/**
	 * Returns the number of related ResumeOrganisation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeOrganisation objects.
	 * @throws     PropelException
	 */
	public function countResumeOrganisations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeOrganisations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeOrganisationPeer::RESUME_ID, $this->id);

				$count = ResumeOrganisationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeOrganisationPeer::RESUME_ID, $this->id);

				if (!isset($this->lastResumeOrganisationCriteria) || !$this->lastResumeOrganisationCriteria->equals($criteria)) {
					$count = ResumeOrganisationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeOrganisations);
				}
			} else {
				$count = count($this->collResumeOrganisations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeOrganisation object to this object
	 * through the ResumeOrganisation foreign key attribute.
	 *
	 * @param      ResumeOrganisation $l ResumeOrganisation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeOrganisation(ResumeOrganisation $l)
	{
		if ($this->collResumeOrganisations === null) {
			$this->initResumeOrganisations();
		}
		if (!in_array($l, $this->collResumeOrganisations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeOrganisations, $l);
			$l->setResume($this);
		}
	}

	/**
	 * Clears out the collClassifiedResumes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addClassifiedResumes()
	 */
	public function clearClassifiedResumes()
	{
		$this->collClassifiedResumes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collClassifiedResumes collection (array).
	 *
	 * By default this just sets the collClassifiedResumes collection to an empty array (like clearcollClassifiedResumes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initClassifiedResumes()
	{
		$this->collClassifiedResumes = array();
	}

	/**
	 * Gets an array of ClassifiedResume objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related ClassifiedResumes from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ClassifiedResume[]
	 * @throws     PropelException
	 */
	public function getClassifiedResumes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClassifiedResumes === null) {
			if ($this->isNew()) {
			   $this->collClassifiedResumes = array();
			} else {

				$criteria->add(ClassifiedResumePeer::RESUME_ID, $this->id);

				ClassifiedResumePeer::addSelectColumns($criteria);
				$this->collClassifiedResumes = ClassifiedResumePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ClassifiedResumePeer::RESUME_ID, $this->id);

				ClassifiedResumePeer::addSelectColumns($criteria);
				if (!isset($this->lastClassifiedResumeCriteria) || !$this->lastClassifiedResumeCriteria->equals($criteria)) {
					$this->collClassifiedResumes = ClassifiedResumePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastClassifiedResumeCriteria = $criteria;
		return $this->collClassifiedResumes;
	}

	/**
	 * Returns the number of related ClassifiedResume objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ClassifiedResume objects.
	 * @throws     PropelException
	 */
	public function countClassifiedResumes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collClassifiedResumes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ClassifiedResumePeer::RESUME_ID, $this->id);

				$count = ClassifiedResumePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ClassifiedResumePeer::RESUME_ID, $this->id);

				if (!isset($this->lastClassifiedResumeCriteria) || !$this->lastClassifiedResumeCriteria->equals($criteria)) {
					$count = ClassifiedResumePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collClassifiedResumes);
				}
			} else {
				$count = count($this->collClassifiedResumes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ClassifiedResume object to this object
	 * through the ClassifiedResume foreign key attribute.
	 *
	 * @param      ClassifiedResume $l ClassifiedResume
	 * @return     void
	 * @throws     PropelException
	 */
	public function addClassifiedResume(ClassifiedResume $l)
	{
		if ($this->collClassifiedResumes === null) {
			$this->initClassifiedResumes();
		}
		if (!in_array($l, $this->collClassifiedResumes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collClassifiedResumes, $l);
			$l->setResume($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related ClassifiedResumes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getClassifiedResumesJoinResumeFolder($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClassifiedResumes === null) {
			if ($this->isNew()) {
				$this->collClassifiedResumes = array();
			} else {

				$criteria->add(ClassifiedResumePeer::RESUME_ID, $this->id);

				$this->collClassifiedResumes = ClassifiedResumePeer::doSelectJoinResumeFolder($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClassifiedResumePeer::RESUME_ID, $this->id);

			if (!isset($this->lastClassifiedResumeCriteria) || !$this->lastClassifiedResumeCriteria->equals($criteria)) {
				$this->collClassifiedResumes = ClassifiedResumePeer::doSelectJoinResumeFolder($criteria, $con, $join_behavior);
			}
		}
		$this->lastClassifiedResumeCriteria = $criteria;

		return $this->collClassifiedResumes;
	}

	/**
	 * Clears out the collDatabaseCVs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDatabaseCVs()
	 */
	public function clearDatabaseCVs()
	{
		$this->collDatabaseCVs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDatabaseCVs collection (array).
	 *
	 * By default this just sets the collDatabaseCVs collection to an empty array (like clearcollDatabaseCVs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDatabaseCVs()
	{
		$this->collDatabaseCVs = array();
	}

	/**
	 * Gets an array of DatabaseCV objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Resume has previously been saved, it will retrieve
	 * related DatabaseCVs from storage. If this Resume is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DatabaseCV[]
	 * @throws     PropelException
	 */
	public function getDatabaseCVs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatabaseCVs === null) {
			if ($this->isNew()) {
			   $this->collDatabaseCVs = array();
			} else {

				$criteria->add(DatabaseCVPeer::RESUME_ID, $this->id);

				DatabaseCVPeer::addSelectColumns($criteria);
				$this->collDatabaseCVs = DatabaseCVPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DatabaseCVPeer::RESUME_ID, $this->id);

				DatabaseCVPeer::addSelectColumns($criteria);
				if (!isset($this->lastDatabaseCVCriteria) || !$this->lastDatabaseCVCriteria->equals($criteria)) {
					$this->collDatabaseCVs = DatabaseCVPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDatabaseCVCriteria = $criteria;
		return $this->collDatabaseCVs;
	}

	/**
	 * Returns the number of related DatabaseCV objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DatabaseCV objects.
	 * @throws     PropelException
	 */
	public function countDatabaseCVs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDatabaseCVs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DatabaseCVPeer::RESUME_ID, $this->id);

				$count = DatabaseCVPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DatabaseCVPeer::RESUME_ID, $this->id);

				if (!isset($this->lastDatabaseCVCriteria) || !$this->lastDatabaseCVCriteria->equals($criteria)) {
					$count = DatabaseCVPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collDatabaseCVs);
				}
			} else {
				$count = count($this->collDatabaseCVs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DatabaseCV object to this object
	 * through the DatabaseCV foreign key attribute.
	 *
	 * @param      DatabaseCV $l DatabaseCV
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDatabaseCV(DatabaseCV $l)
	{
		if ($this->collDatabaseCVs === null) {
			$this->initDatabaseCVs();
		}
		if (!in_array($l, $this->collDatabaseCVs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDatabaseCVs, $l);
			$l->setResume($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related DatabaseCVs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getDatabaseCVsJoinHRProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatabaseCVs === null) {
			if ($this->isNew()) {
				$this->collDatabaseCVs = array();
			} else {

				$criteria->add(DatabaseCVPeer::RESUME_ID, $this->id);

				$this->collDatabaseCVs = DatabaseCVPeer::doSelectJoinHRProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatabaseCVPeer::RESUME_ID, $this->id);

			if (!isset($this->lastDatabaseCVCriteria) || !$this->lastDatabaseCVCriteria->equals($criteria)) {
				$this->collDatabaseCVs = DatabaseCVPeer::doSelectJoinHRProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatabaseCVCriteria = $criteria;

		return $this->collDatabaseCVs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Resume is new, it will return
	 * an empty collection; or if this Resume has previously
	 * been saved, it will retrieve related DatabaseCVs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Resume.
	 */
	public function getDatabaseCVsJoinPurchaseItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ResumePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatabaseCVs === null) {
			if ($this->isNew()) {
				$this->collDatabaseCVs = array();
			} else {

				$criteria->add(DatabaseCVPeer::RESUME_ID, $this->id);

				$this->collDatabaseCVs = DatabaseCVPeer::doSelectJoinPurchaseItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatabaseCVPeer::RESUME_ID, $this->id);

			if (!isset($this->lastDatabaseCVCriteria) || !$this->lastDatabaseCVCriteria->equals($criteria)) {
				$this->collDatabaseCVs = DatabaseCVPeer::doSelectJoinPurchaseItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatabaseCVCriteria = $criteria;

		return $this->collDatabaseCVs;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collResumeCourses) {
				foreach ((array) $this->collResumeCourses as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeLanguages) {
				foreach ((array) $this->collResumeLanguages as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeSchools) {
				foreach ((array) $this->collResumeSchools as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeWorks) {
				foreach ((array) $this->collResumeWorks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeSkills) {
				foreach ((array) $this->collResumeSkills as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumePublications) {
				foreach ((array) $this->collResumePublications as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeAwards) {
				foreach ((array) $this->collResumeAwards as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeReferences) {
				foreach ((array) $this->collResumeReferences as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeOrganisations) {
				foreach ((array) $this->collResumeOrganisations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collClassifiedResumes) {
				foreach ((array) $this->collClassifiedResumes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDatabaseCVs) {
				foreach ((array) $this->collDatabaseCVs as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collResumeCourses = null;
		$this->collResumeLanguages = null;
		$this->collResumeSchools = null;
		$this->collResumeWorks = null;
		$this->collResumeSkills = null;
		$this->collResumePublications = null;
		$this->collResumeAwards = null;
		$this->collResumeReferences = null;
		$this->collResumeOrganisations = null;
		$this->collClassifiedResumes = null;
		$this->collDatabaseCVs = null;
			$this->aUser = null;
			$this->aContact = null;
			$this->aJobPosition = null;
			$this->aJobGrade = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseResume:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseResume::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseResume
