<?php

/**
 * Base static class for performing query and update operations on the 'EMT_PRODUCT' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 03/07/12 22:24:29
 *
 * @package    lib.model.om
 */
abstract class BaseProductPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'EMT_PRODUCT';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Product';

	/** The total number of columns. */
	const NUM_COLUMNS = 25;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'EMT_PRODUCT.ID';

	/** the column name for the CATEGORY_ID field */
	const CATEGORY_ID = 'EMT_PRODUCT.CATEGORY_ID';

	/** the column name for the COMPANY_ID field */
	const COMPANY_ID = 'EMT_PRODUCT.COMPANY_ID';

	/** the column name for the MODEL_NO field */
	const MODEL_NO = 'EMT_PRODUCT.MODEL_NO';

	/** the column name for the ACTIVE field */
	const ACTIVE = 'EMT_PRODUCT.ACTIVE';

	/** the column name for the CREATED_AT field */
	const CREATED_AT = 'EMT_PRODUCT.CREATED_AT';

	/** the column name for the UPDATED_AT field */
	const UPDATED_AT = 'EMT_PRODUCT.UPDATED_AT';

	/** the column name for the PAYMENT_TERMS field */
	const PAYMENT_TERMS = 'EMT_PRODUCT.PAYMENT_TERMS';

	/** the column name for the GROUP_ID field */
	const GROUP_ID = 'EMT_PRODUCT.GROUP_ID';

	/** the column name for the ORIGIN field */
	const ORIGIN = 'EMT_PRODUCT.ORIGIN';

	/** the column name for the KEYWORD field */
	const KEYWORD = 'EMT_PRODUCT.KEYWORD';

	/** the column name for the BRAND_NAME field */
	const BRAND_NAME = 'EMT_PRODUCT.BRAND_NAME';

	/** the column name for the MIN_ORDER_QUANTITY field */
	const MIN_ORDER_QUANTITY = 'EMT_PRODUCT.MIN_ORDER_QUANTITY';

	/** the column name for the QUANTITY_UNIT field */
	const QUANTITY_UNIT = 'EMT_PRODUCT.QUANTITY_UNIT';

	/** the column name for the PRICE_START field */
	const PRICE_START = 'EMT_PRODUCT.PRICE_START';

	/** the column name for the PRICE_END field */
	const PRICE_END = 'EMT_PRODUCT.PRICE_END';

	/** the column name for the PRICE_CURRENCY field */
	const PRICE_CURRENCY = 'EMT_PRODUCT.PRICE_CURRENCY';

	/** the column name for the PRICE_UNIT field */
	const PRICE_UNIT = 'EMT_PRODUCT.PRICE_UNIT';

	/** the column name for the CAPACITY field */
	const CAPACITY = 'EMT_PRODUCT.CAPACITY';

	/** the column name for the CAPACITY_UNIT field */
	const CAPACITY_UNIT = 'EMT_PRODUCT.CAPACITY_UNIT';

	/** the column name for the CAPACITY_PERIOD_ID field */
	const CAPACITY_PERIOD_ID = 'EMT_PRODUCT.CAPACITY_PERIOD_ID';

	/** the column name for the APPROVAL_STATUS field */
	const APPROVAL_STATUS = 'EMT_PRODUCT.APPROVAL_STATUS';

	/** the column name for the BRAND_ID field */
	const BRAND_ID = 'EMT_PRODUCT.BRAND_ID';

	/** the column name for the DEFAULT_LANG field */
	const DEFAULT_LANG = 'EMT_PRODUCT.DEFAULT_LANG';

	/** the column name for the IS_TOP_PRODUCT field */
	const IS_TOP_PRODUCT = 'EMT_PRODUCT.IS_TOP_PRODUCT';

	/**
	 * An identiy map to hold any loaded instances of Product objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Product[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'CategoryId', 'CompanyId', 'ModelNo', 'Active', 'CreatedAt', 'UpdatedAt', 'PaymentTerms', 'GroupId', 'Origin', 'Keyword', 'BrandName', 'MinOrderQuantity', 'QuantityUnit', 'PriceStart', 'PriceEnd', 'PriceCurrency', 'PriceUnit', 'Capacity', 'CapacityUnit', 'CapacityPeriodId', 'ApprovalStatus', 'BrandId', 'DefaultLang', 'IsTopProduct', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'categoryId', 'companyId', 'modelNo', 'active', 'createdAt', 'updatedAt', 'paymentTerms', 'groupId', 'origin', 'keyword', 'brandName', 'minOrderQuantity', 'quantityUnit', 'priceStart', 'priceEnd', 'priceCurrency', 'priceUnit', 'capacity', 'capacityUnit', 'capacityPeriodId', 'approvalStatus', 'brandId', 'defaultLang', 'isTopProduct', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::CATEGORY_ID, self::COMPANY_ID, self::MODEL_NO, self::ACTIVE, self::CREATED_AT, self::UPDATED_AT, self::PAYMENT_TERMS, self::GROUP_ID, self::ORIGIN, self::KEYWORD, self::BRAND_NAME, self::MIN_ORDER_QUANTITY, self::QUANTITY_UNIT, self::PRICE_START, self::PRICE_END, self::PRICE_CURRENCY, self::PRICE_UNIT, self::CAPACITY, self::CAPACITY_UNIT, self::CAPACITY_PERIOD_ID, self::APPROVAL_STATUS, self::BRAND_ID, self::DEFAULT_LANG, self::IS_TOP_PRODUCT, ),
		BasePeer::TYPE_FIELDNAME => array ('ID', 'CATEGORY_ID', 'COMPANY_ID', 'MODEL_NO', 'ACTIVE', 'CREATED_AT', 'UPDATED_AT', 'PAYMENT_TERMS', 'GROUP_ID', 'ORIGIN', 'KEYWORD', 'BRAND_NAME', 'MIN_ORDER_QUANTITY', 'QUANTITY_UNIT', 'PRICE_START', 'PRICE_END', 'PRICE_CURRENCY', 'PRICE_UNIT', 'CAPACITY', 'CAPACITY_UNIT', 'CAPACITY_PERIOD_ID', 'APPROVAL_STATUS', 'BRAND_ID', 'DEFAULT_LANG', 'IS_TOP_PRODUCT', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'CategoryId' => 1, 'CompanyId' => 2, 'ModelNo' => 3, 'Active' => 4, 'CreatedAt' => 5, 'UpdatedAt' => 6, 'PaymentTerms' => 7, 'GroupId' => 8, 'Origin' => 9, 'Keyword' => 10, 'BrandName' => 11, 'MinOrderQuantity' => 12, 'QuantityUnit' => 13, 'PriceStart' => 14, 'PriceEnd' => 15, 'PriceCurrency' => 16, 'PriceUnit' => 17, 'Capacity' => 18, 'CapacityUnit' => 19, 'CapacityPeriodId' => 20, 'ApprovalStatus' => 21, 'BrandId' => 22, 'DefaultLang' => 23, 'IsTopProduct' => 24, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'categoryId' => 1, 'companyId' => 2, 'modelNo' => 3, 'active' => 4, 'createdAt' => 5, 'updatedAt' => 6, 'paymentTerms' => 7, 'groupId' => 8, 'origin' => 9, 'keyword' => 10, 'brandName' => 11, 'minOrderQuantity' => 12, 'quantityUnit' => 13, 'priceStart' => 14, 'priceEnd' => 15, 'priceCurrency' => 16, 'priceUnit' => 17, 'capacity' => 18, 'capacityUnit' => 19, 'capacityPeriodId' => 20, 'approvalStatus' => 21, 'brandId' => 22, 'defaultLang' => 23, 'isTopProduct' => 24, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::CATEGORY_ID => 1, self::COMPANY_ID => 2, self::MODEL_NO => 3, self::ACTIVE => 4, self::CREATED_AT => 5, self::UPDATED_AT => 6, self::PAYMENT_TERMS => 7, self::GROUP_ID => 8, self::ORIGIN => 9, self::KEYWORD => 10, self::BRAND_NAME => 11, self::MIN_ORDER_QUANTITY => 12, self::QUANTITY_UNIT => 13, self::PRICE_START => 14, self::PRICE_END => 15, self::PRICE_CURRENCY => 16, self::PRICE_UNIT => 17, self::CAPACITY => 18, self::CAPACITY_UNIT => 19, self::CAPACITY_PERIOD_ID => 20, self::APPROVAL_STATUS => 21, self::BRAND_ID => 22, self::DEFAULT_LANG => 23, self::IS_TOP_PRODUCT => 24, ),
		BasePeer::TYPE_FIELDNAME => array ('ID' => 0, 'CATEGORY_ID' => 1, 'COMPANY_ID' => 2, 'MODEL_NO' => 3, 'ACTIVE' => 4, 'CREATED_AT' => 5, 'UPDATED_AT' => 6, 'PAYMENT_TERMS' => 7, 'GROUP_ID' => 8, 'ORIGIN' => 9, 'KEYWORD' => 10, 'BRAND_NAME' => 11, 'MIN_ORDER_QUANTITY' => 12, 'QUANTITY_UNIT' => 13, 'PRICE_START' => 14, 'PRICE_END' => 15, 'PRICE_CURRENCY' => 16, 'PRICE_UNIT' => 17, 'CAPACITY' => 18, 'CAPACITY_UNIT' => 19, 'CAPACITY_PERIOD_ID' => 20, 'APPROVAL_STATUS' => 21, 'BRAND_ID' => 22, 'DEFAULT_LANG' => 23, 'IS_TOP_PRODUCT' => 24, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new ProductMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. ProductPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(ProductPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(ProductPeer::ID);

		$criteria->addSelectColumn(ProductPeer::CATEGORY_ID);

		$criteria->addSelectColumn(ProductPeer::COMPANY_ID);

		$criteria->addSelectColumn(ProductPeer::MODEL_NO);

		$criteria->addSelectColumn(ProductPeer::ACTIVE);

		$criteria->addSelectColumn(ProductPeer::CREATED_AT);

		$criteria->addSelectColumn(ProductPeer::UPDATED_AT);

		$criteria->addSelectColumn(ProductPeer::PAYMENT_TERMS);

		$criteria->addSelectColumn(ProductPeer::GROUP_ID);

		$criteria->addSelectColumn(ProductPeer::ORIGIN);

		$criteria->addSelectColumn(ProductPeer::KEYWORD);

		$criteria->addSelectColumn(ProductPeer::BRAND_NAME);

		$criteria->addSelectColumn(ProductPeer::MIN_ORDER_QUANTITY);

		$criteria->addSelectColumn(ProductPeer::QUANTITY_UNIT);

		$criteria->addSelectColumn(ProductPeer::PRICE_START);

		$criteria->addSelectColumn(ProductPeer::PRICE_END);

		$criteria->addSelectColumn(ProductPeer::PRICE_CURRENCY);

		$criteria->addSelectColumn(ProductPeer::PRICE_UNIT);

		$criteria->addSelectColumn(ProductPeer::CAPACITY);

		$criteria->addSelectColumn(ProductPeer::CAPACITY_UNIT);

		$criteria->addSelectColumn(ProductPeer::CAPACITY_PERIOD_ID);

		$criteria->addSelectColumn(ProductPeer::APPROVAL_STATUS);

		$criteria->addSelectColumn(ProductPeer::BRAND_ID);

		$criteria->addSelectColumn(ProductPeer::DEFAULT_LANG);

		$criteria->addSelectColumn(ProductPeer::IS_TOP_PRODUCT);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Product
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = ProductPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return ProductPeer::populateObjects(ProductPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProductPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			ProductPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Product $value A Product object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Product $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Product object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Product) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Product object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Product Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = ProductPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = ProductPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				ProductPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related ProductCategory table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinProductCategory(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Company table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinCompany(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductGroup table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinProductGroup(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductQuantityUnitRelatedByQuantityUnit table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinProductQuantityUnitRelatedByQuantityUnit(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductQuantityUnitRelatedByPriceUnit table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinProductQuantityUnitRelatedByPriceUnit(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductQuantityUnitRelatedByCapacityUnit table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinProductQuantityUnitRelatedByCapacityUnit(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TimePeriod table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTimePeriod(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related CompanyBrand table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinCompanyBrand(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Product objects pre-filled with their ProductCategory objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinProductCategory(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseProductPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);
		ProductCategoryPeer::addSelectColumns($c);

		$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ProductCategoryPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Product) to $obj2 (ProductCategory)
				$obj2->addProduct($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with their Company objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinCompany(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);
		CompanyPeer::addSelectColumns($c);

		$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = CompanyPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = CompanyPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					CompanyPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Product) to $obj2 (Company)
				$obj2->addProduct($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with their ProductGroup objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinProductGroup(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);
		ProductGroupPeer::addSelectColumns($c);

		$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ProductGroupPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ProductGroupPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ProductGroupPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Product) to $obj2 (ProductGroup)
				$obj2->addProduct($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with their ProductQuantityUnit objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinProductQuantityUnitRelatedByQuantityUnit(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);
		ProductQuantityUnitPeer::addSelectColumns($c);

		$c->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ProductQuantityUnitPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ProductQuantityUnitPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ProductQuantityUnitPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Product) to $obj2 (ProductQuantityUnit)
				$obj2->addProductRelatedByQuantityUnit($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with their ProductQuantityUnit objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinProductQuantityUnitRelatedByPriceUnit(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);
		ProductQuantityUnitPeer::addSelectColumns($c);

		$c->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ProductQuantityUnitPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ProductQuantityUnitPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ProductQuantityUnitPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Product) to $obj2 (ProductQuantityUnit)
				$obj2->addProductRelatedByPriceUnit($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with their ProductQuantityUnit objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinProductQuantityUnitRelatedByCapacityUnit(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);
		ProductQuantityUnitPeer::addSelectColumns($c);

		$c->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ProductQuantityUnitPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ProductQuantityUnitPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ProductQuantityUnitPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Product) to $obj2 (ProductQuantityUnit)
				$obj2->addProductRelatedByCapacityUnit($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with their TimePeriod objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTimePeriod(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);
		TimePeriodPeer::addSelectColumns($c);

		$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TimePeriodPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = TimePeriodPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TimePeriodPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Product) to $obj2 (TimePeriod)
				$obj2->addProduct($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with their CompanyBrand objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinCompanyBrand(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);
		CompanyBrandPeer::addSelectColumns($c);

		$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = CompanyBrandPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = CompanyBrandPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					CompanyBrandPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Product) to $obj2 (CompanyBrand)
				$obj2->addProduct($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ProductPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Product objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseProductPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductCategoryPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ProductCategoryPeer::NUM_COLUMNS - ProductCategoryPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductGroupPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductGroupPeer::NUM_COLUMNS - ProductGroupPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		TimePeriodPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (TimePeriodPeer::NUM_COLUMNS - TimePeriodPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyBrandPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (CompanyBrandPeer::NUM_COLUMNS - CompanyBrandPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
		$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
		$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
		$c->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$c->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$c->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
		$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
		$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined ProductCategory rows

			$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ProductCategoryPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Product) to the collection in $obj2 (ProductCategory)
				$obj2->addProduct($obj1);
			} // if joined row not null

			// Add objects for joined Company rows

			$key3 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = CompanyPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = CompanyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CompanyPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (Product) to the collection in $obj3 (Company)
				$obj3->addProduct($obj1);
			} // if joined row not null

			// Add objects for joined ProductGroup rows

			$key4 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = ProductGroupPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = ProductGroupPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductGroupPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductGroup)
				$obj4->addProduct($obj1);
			} // if joined row not null

			// Add objects for joined ProductQuantityUnit rows

			$key5 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = ProductQuantityUnitPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProductQuantityUnitPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (Product) to the collection in $obj5 (ProductQuantityUnit)
				$obj5->addProductRelatedByQuantityUnit($obj1);
			} // if joined row not null

			// Add objects for joined ProductQuantityUnit rows

			$key6 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = ProductQuantityUnitPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProductQuantityUnitPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (Product) to the collection in $obj6 (ProductQuantityUnit)
				$obj6->addProductRelatedByPriceUnit($obj1);
			} // if joined row not null

			// Add objects for joined ProductQuantityUnit rows

			$key7 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = ProductQuantityUnitPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ProductQuantityUnitPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (Product) to the collection in $obj7 (ProductQuantityUnit)
				$obj7->addProductRelatedByCapacityUnit($obj1);
			} // if joined row not null

			// Add objects for joined TimePeriod rows

			$key8 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = TimePeriodPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$omClass = TimePeriodPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TimePeriodPeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (Product) to the collection in $obj8 (TimePeriod)
				$obj8->addProduct($obj1);
			} // if joined row not null

			// Add objects for joined CompanyBrand rows

			$key9 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = CompanyBrandPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$omClass = CompanyBrandPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					CompanyBrandPeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (Product) to the collection in $obj9 (CompanyBrand)
				$obj9->addProduct($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductCategory table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptProductCategory(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Company table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptCompany(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductGroup table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptProductGroup(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductQuantityUnitRelatedByQuantityUnit table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptProductQuantityUnitRelatedByQuantityUnit(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductQuantityUnitRelatedByPriceUnit table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptProductQuantityUnitRelatedByPriceUnit(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related ProductQuantityUnitRelatedByCapacityUnit table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptProductQuantityUnitRelatedByCapacityUnit(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TimePeriod table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTimePeriod(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related CompanyBrand table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptCompanyBrand(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ProductPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseProductPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Product objects pre-filled with all related objects except ProductCategory.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptProductCategory(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseProductPeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductGroupPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ProductGroupPeer::NUM_COLUMNS - ProductGroupPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		TimePeriodPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (TimePeriodPeer::NUM_COLUMNS - TimePeriodPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyBrandPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (CompanyBrandPeer::NUM_COLUMNS - CompanyBrandPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Company rows

				$key2 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = CompanyPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = CompanyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					CompanyPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Product) to the collection in $obj2 (Company)
				$obj2->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductGroup rows

				$key3 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ProductGroupPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ProductGroupPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ProductGroupPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Product) to the collection in $obj3 (ProductGroup)
				$obj3->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key4 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ProductQuantityUnitPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductQuantityUnitPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductQuantityUnit)
				$obj4->addProductRelatedByQuantityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key5 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProductQuantityUnitPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProductQuantityUnitPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Product) to the collection in $obj5 (ProductQuantityUnit)
				$obj5->addProductRelatedByPriceUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key6 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProductQuantityUnitPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProductQuantityUnitPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Product) to the collection in $obj6 (ProductQuantityUnit)
				$obj6->addProductRelatedByCapacityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined TimePeriod rows

				$key7 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TimePeriodPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = TimePeriodPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TimePeriodPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Product) to the collection in $obj7 (TimePeriod)
				$obj7->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined CompanyBrand rows

				$key8 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = CompanyBrandPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = CompanyBrandPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					CompanyBrandPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Product) to the collection in $obj8 (CompanyBrand)
				$obj8->addProduct($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with all related objects except Company.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptCompany(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductCategoryPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ProductCategoryPeer::NUM_COLUMNS - ProductCategoryPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductGroupPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ProductGroupPeer::NUM_COLUMNS - ProductGroupPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		TimePeriodPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (TimePeriodPeer::NUM_COLUMNS - TimePeriodPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyBrandPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (CompanyBrandPeer::NUM_COLUMNS - CompanyBrandPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined ProductCategory rows

				$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ProductCategoryPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Product) to the collection in $obj2 (ProductCategory)
				$obj2->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductGroup rows

				$key3 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ProductGroupPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ProductGroupPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ProductGroupPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Product) to the collection in $obj3 (ProductGroup)
				$obj3->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key4 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ProductQuantityUnitPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductQuantityUnitPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductQuantityUnit)
				$obj4->addProductRelatedByQuantityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key5 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProductQuantityUnitPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProductQuantityUnitPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Product) to the collection in $obj5 (ProductQuantityUnit)
				$obj5->addProductRelatedByPriceUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key6 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProductQuantityUnitPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProductQuantityUnitPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Product) to the collection in $obj6 (ProductQuantityUnit)
				$obj6->addProductRelatedByCapacityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined TimePeriod rows

				$key7 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TimePeriodPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = TimePeriodPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TimePeriodPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Product) to the collection in $obj7 (TimePeriod)
				$obj7->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined CompanyBrand rows

				$key8 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = CompanyBrandPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = CompanyBrandPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					CompanyBrandPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Product) to the collection in $obj8 (CompanyBrand)
				$obj8->addProduct($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with all related objects except ProductGroup.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptProductGroup(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductCategoryPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ProductCategoryPeer::NUM_COLUMNS - ProductCategoryPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		TimePeriodPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (TimePeriodPeer::NUM_COLUMNS - TimePeriodPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyBrandPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (CompanyBrandPeer::NUM_COLUMNS - CompanyBrandPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined ProductCategory rows

				$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ProductCategoryPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Product) to the collection in $obj2 (ProductCategory)
				$obj2->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined Company rows

				$key3 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CompanyPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CompanyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CompanyPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Product) to the collection in $obj3 (Company)
				$obj3->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key4 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ProductQuantityUnitPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductQuantityUnitPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductQuantityUnit)
				$obj4->addProductRelatedByQuantityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key5 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProductQuantityUnitPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProductQuantityUnitPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Product) to the collection in $obj5 (ProductQuantityUnit)
				$obj5->addProductRelatedByPriceUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key6 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProductQuantityUnitPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProductQuantityUnitPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Product) to the collection in $obj6 (ProductQuantityUnit)
				$obj6->addProductRelatedByCapacityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined TimePeriod rows

				$key7 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TimePeriodPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = TimePeriodPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TimePeriodPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Product) to the collection in $obj7 (TimePeriod)
				$obj7->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined CompanyBrand rows

				$key8 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = CompanyBrandPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = CompanyBrandPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					CompanyBrandPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Product) to the collection in $obj8 (CompanyBrand)
				$obj8->addProduct($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with all related objects except ProductQuantityUnitRelatedByQuantityUnit.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptProductQuantityUnitRelatedByQuantityUnit(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductCategoryPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ProductCategoryPeer::NUM_COLUMNS - ProductCategoryPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductGroupPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductGroupPeer::NUM_COLUMNS - ProductGroupPeer::NUM_LAZY_LOAD_COLUMNS);

		TimePeriodPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (TimePeriodPeer::NUM_COLUMNS - TimePeriodPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyBrandPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (CompanyBrandPeer::NUM_COLUMNS - CompanyBrandPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined ProductCategory rows

				$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ProductCategoryPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Product) to the collection in $obj2 (ProductCategory)
				$obj2->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined Company rows

				$key3 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CompanyPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CompanyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CompanyPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Product) to the collection in $obj3 (Company)
				$obj3->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductGroup rows

				$key4 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ProductGroupPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ProductGroupPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductGroupPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductGroup)
				$obj4->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined TimePeriod rows

				$key5 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TimePeriodPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = TimePeriodPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TimePeriodPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Product) to the collection in $obj5 (TimePeriod)
				$obj5->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined CompanyBrand rows

				$key6 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = CompanyBrandPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = CompanyBrandPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					CompanyBrandPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Product) to the collection in $obj6 (CompanyBrand)
				$obj6->addProduct($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with all related objects except ProductQuantityUnitRelatedByPriceUnit.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptProductQuantityUnitRelatedByPriceUnit(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductCategoryPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ProductCategoryPeer::NUM_COLUMNS - ProductCategoryPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductGroupPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductGroupPeer::NUM_COLUMNS - ProductGroupPeer::NUM_LAZY_LOAD_COLUMNS);

		TimePeriodPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (TimePeriodPeer::NUM_COLUMNS - TimePeriodPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyBrandPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (CompanyBrandPeer::NUM_COLUMNS - CompanyBrandPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined ProductCategory rows

				$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ProductCategoryPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Product) to the collection in $obj2 (ProductCategory)
				$obj2->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined Company rows

				$key3 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CompanyPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CompanyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CompanyPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Product) to the collection in $obj3 (Company)
				$obj3->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductGroup rows

				$key4 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ProductGroupPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ProductGroupPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductGroupPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductGroup)
				$obj4->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined TimePeriod rows

				$key5 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TimePeriodPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = TimePeriodPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TimePeriodPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Product) to the collection in $obj5 (TimePeriod)
				$obj5->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined CompanyBrand rows

				$key6 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = CompanyBrandPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = CompanyBrandPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					CompanyBrandPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Product) to the collection in $obj6 (CompanyBrand)
				$obj6->addProduct($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with all related objects except ProductQuantityUnitRelatedByCapacityUnit.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptProductQuantityUnitRelatedByCapacityUnit(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductCategoryPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ProductCategoryPeer::NUM_COLUMNS - ProductCategoryPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductGroupPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductGroupPeer::NUM_COLUMNS - ProductGroupPeer::NUM_LAZY_LOAD_COLUMNS);

		TimePeriodPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (TimePeriodPeer::NUM_COLUMNS - TimePeriodPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyBrandPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (CompanyBrandPeer::NUM_COLUMNS - CompanyBrandPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined ProductCategory rows

				$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ProductCategoryPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Product) to the collection in $obj2 (ProductCategory)
				$obj2->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined Company rows

				$key3 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CompanyPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CompanyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CompanyPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Product) to the collection in $obj3 (Company)
				$obj3->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductGroup rows

				$key4 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ProductGroupPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ProductGroupPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductGroupPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductGroup)
				$obj4->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined TimePeriod rows

				$key5 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TimePeriodPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = TimePeriodPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TimePeriodPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Product) to the collection in $obj5 (TimePeriod)
				$obj5->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined CompanyBrand rows

				$key6 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = CompanyBrandPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = CompanyBrandPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					CompanyBrandPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Product) to the collection in $obj6 (CompanyBrand)
				$obj6->addProduct($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with all related objects except TimePeriod.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTimePeriod(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductCategoryPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ProductCategoryPeer::NUM_COLUMNS - ProductCategoryPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductGroupPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductGroupPeer::NUM_COLUMNS - ProductGroupPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyBrandPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (CompanyBrandPeer::NUM_COLUMNS - CompanyBrandPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::BRAND_ID,), array(CompanyBrandPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined ProductCategory rows

				$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ProductCategoryPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Product) to the collection in $obj2 (ProductCategory)
				$obj2->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined Company rows

				$key3 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CompanyPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CompanyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CompanyPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Product) to the collection in $obj3 (Company)
				$obj3->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductGroup rows

				$key4 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ProductGroupPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ProductGroupPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductGroupPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductGroup)
				$obj4->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key5 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProductQuantityUnitPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProductQuantityUnitPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Product) to the collection in $obj5 (ProductQuantityUnit)
				$obj5->addProductRelatedByQuantityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key6 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProductQuantityUnitPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProductQuantityUnitPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Product) to the collection in $obj6 (ProductQuantityUnit)
				$obj6->addProductRelatedByPriceUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key7 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = ProductQuantityUnitPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ProductQuantityUnitPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Product) to the collection in $obj7 (ProductQuantityUnit)
				$obj7->addProductRelatedByCapacityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined CompanyBrand rows

				$key8 = CompanyBrandPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = CompanyBrandPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = CompanyBrandPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					CompanyBrandPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Product) to the collection in $obj8 (CompanyBrand)
				$obj8->addProduct($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Product objects pre-filled with all related objects except CompanyBrand.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Product objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptCompanyBrand(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ProductPeer::addSelectColumns($c);
		$startcol2 = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductCategoryPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ProductCategoryPeer::NUM_COLUMNS - ProductCategoryPeer::NUM_LAZY_LOAD_COLUMNS);

		CompanyPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductGroupPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ProductGroupPeer::NUM_COLUMNS - ProductGroupPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		ProductQuantityUnitPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (ProductQuantityUnitPeer::NUM_COLUMNS - ProductQuantityUnitPeer::NUM_LAZY_LOAD_COLUMNS);

		TimePeriodPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (TimePeriodPeer::NUM_COLUMNS - TimePeriodPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ProductPeer::CATEGORY_ID,), array(ProductCategoryPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::COMPANY_ID,), array(CompanyPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::GROUP_ID,), array(ProductGroupPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::QUANTITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::PRICE_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_UNIT,), array(ProductQuantityUnitPeer::ID,), $join_behavior);
				$c->addJoin(array(ProductPeer::CAPACITY_PERIOD_ID,), array(TimePeriodPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ProductPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ProductPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ProductPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ProductPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined ProductCategory rows

				$key2 = ProductCategoryPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ProductCategoryPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ProductCategoryPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ProductCategoryPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Product) to the collection in $obj2 (ProductCategory)
				$obj2->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined Company rows

				$key3 = CompanyPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CompanyPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CompanyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CompanyPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Product) to the collection in $obj3 (Company)
				$obj3->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductGroup rows

				$key4 = ProductGroupPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ProductGroupPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ProductGroupPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ProductGroupPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Product) to the collection in $obj4 (ProductGroup)
				$obj4->addProduct($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key5 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = ProductQuantityUnitPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					ProductQuantityUnitPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Product) to the collection in $obj5 (ProductQuantityUnit)
				$obj5->addProductRelatedByQuantityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key6 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ProductQuantityUnitPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ProductQuantityUnitPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Product) to the collection in $obj6 (ProductQuantityUnit)
				$obj6->addProductRelatedByPriceUnit($obj1);

			} // if joined row is not null

				// Add objects for joined ProductQuantityUnit rows

				$key7 = ProductQuantityUnitPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = ProductQuantityUnitPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = ProductQuantityUnitPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ProductQuantityUnitPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Product) to the collection in $obj7 (ProductQuantityUnit)
				$obj7->addProductRelatedByCapacityUnit($obj1);

			} // if joined row is not null

				// Add objects for joined TimePeriod rows

				$key8 = TimePeriodPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TimePeriodPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = TimePeriodPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TimePeriodPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Product) to the collection in $obj8 (TimePeriod)
				$obj8->addProduct($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  /**
   * Selects a collection of Product objects pre-filled with their i18n objects.
   *
   * @return array Array of Product objects.
   * @throws PropelException Any exceptions caught during processing will be
   *     rethrown wrapped into a PropelException.
   */
  public static function doSelectWithI18n(Criteria $c, $culture = null, PropelPDO $con = null)
  {
    // we're going to modify criteria, so copy it first
    $c = clone $c;
    if ($culture === null)
    {
      $culture = sfPropel::getDefaultCulture();
    }


    foreach (sfMixer::getCallables('BaseProductPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $c, $con);
    }


    // Set the correct dbName if it has not been overridden
    if ($c->getDbName() == Propel::getDefaultDB())
    {
      $c->setDbName(self::DATABASE_NAME);
    }

    ProductPeer::addSelectColumns($c);
    $startcol = (ProductPeer::NUM_COLUMNS - ProductPeer::NUM_LAZY_LOAD_COLUMNS);

    ProductI18nPeer::addSelectColumns($c);

    $c->addJoin(ProductPeer::ID, ProductI18nPeer::ID);
    $c->add(ProductI18nPeer::CULTURE, $culture);

    $stmt = BasePeer::doSelect($c, $con);
    $results = array();

    while($row = $stmt->fetch(PDO::FETCH_NUM)) {

      $omClass = ProductPeer::getOMClass();

      $cls = Propel::importClass($omClass);
      $obj1 = new $cls();
      $obj1->hydrate($row);
      $obj1->setCulture($culture);

      $omClass = ProductI18nPeer::getOMClass();

      $cls = Propel::importClass($omClass);
      $obj2 = new $cls();
      $obj2->hydrate($row, $startcol);

      $obj1->setProductI18nForCulture($obj2, $culture);
      $obj2->setProduct($obj1);

      $results[] = $obj1;
    }
    return $results;
  }


  /**
   * Returns the i18n model class name.
   *
   * @return string The i18n model class name
   */
  public static function getI18nModel()
  {
    return 'ProductI18n';
  }


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return ProductPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a Product or Criteria object.
	 *
	 * @param      mixed $values Criteria or Product object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProductPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseProductPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Product object
		}

		if ($criteria->containsKey(ProductPeer::ID) && $criteria->keyContainsValue(ProductPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.ProductPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseProductPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Product or Criteria object.
	 *
	 * @param      mixed $values Criteria or Product object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProductPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseProductPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(ProductPeer::ID);
			$selectCriteria->add(ProductPeer::ID, $criteria->remove(ProductPeer::ID), $comparison);

		} else { // $values is Product object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseProductPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseProductPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the EMT_PRODUCT table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += ProductPeer::doOnDeleteCascade(new Criteria(ProductPeer::DATABASE_NAME), $con);
			$affectedRows += BasePeer::doDeleteAll(ProductPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Product or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Product object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			ProductPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Product) {
			// invalidate the cache for this single object
			ProductPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(ProductPeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				ProductPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += ProductPeer::doOnDeleteCascade($criteria, $con);
			
				// Because this db requires some delete cascade/set null emulation, we have to
				// clear the cached instance *after* the emulation has happened (since
				// instances get re-added by the select statement contained therein).
				if ($values instanceof Criteria) {
					ProductPeer::clearInstancePool();
				} else { // it's a PK or object
					ProductPeer::removeInstanceFromPool($values);
				}
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			// invalidate objects in ProductI18nPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
			ProductI18nPeer::clearInstancePool();

			// invalidate objects in ProductAttrPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
			ProductAttrPeer::clearInstancePool();

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * This is a method for emulating ON DELETE CASCADE for DBs that don't support this
	 * feature (like MySQL or SQLite).
	 *
	 * This method is not very speedy because it must perform a query first to get
	 * the implicated records and then perform the deletes by calling those Peer classes.
	 *
	 * This method should be used within a transaction if possible.
	 *
	 * @param      Criteria $criteria
	 * @param      PropelPDO $con
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	protected static function doOnDeleteCascade(Criteria $criteria, PropelPDO $con)
	{
		// initialize var to track total num of affected rows
		$affectedRows = 0;

		// first find the objects that are implicated by the $criteria
		$objects = ProductPeer::doSelect($criteria, $con);
		foreach ($objects as $obj) {


			// delete related ProductI18n objects
			$c = new Criteria(ProductI18nPeer::DATABASE_NAME);
			
			$c->add(ProductI18nPeer::ID, $obj->getId());
			$affectedRows += ProductI18nPeer::doDelete($c, $con);

			// delete related ProductAttr objects
			$c = new Criteria(ProductAttrPeer::DATABASE_NAME);
			
			$c->add(ProductAttrPeer::PRODUCT_ID, $obj->getId());
			$affectedRows += ProductAttrPeer::doDelete($c, $con);
		}
		return $affectedRows;
	}

	/**
	 * Validates all modified columns of given Product object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Product $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Product $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(ProductPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(ProductPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(ProductPeer::DATABASE_NAME, ProductPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = ProductPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Product
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = ProductPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(ProductPeer::DATABASE_NAME);
		$criteria->add(ProductPeer::ID, $pk);

		$v = ProductPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(ProductPeer::DATABASE_NAME);
			$criteria->add(ProductPeer::ID, $pks, Criteria::IN);
			$objs = ProductPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseProductPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the ProductPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the ProductPeer class:
//
// Propel::getDatabaseMap(ProductPeer::DATABASE_NAME)->addTableBuilder(ProductPeer::TABLE_NAME, ProductPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseProductPeer::DATABASE_NAME)->addTableBuilder(BaseProductPeer::TABLE_NAME, BaseProductPeer::getMapBuilder());

