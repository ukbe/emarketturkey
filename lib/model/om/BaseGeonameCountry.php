<?php

/**
 * Base class that represents a row from the 'EXT_GEONAME_COUNTRY' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/10/12 16:10:24
 *
 * @package    lib.model.om
 */
abstract class BaseGeonameCountry extends BaseObject  implements Persistent {


  const PEER = 'GeonameCountryPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        GeonameCountryPeer
	 */
	protected static $peer;

	/**
	 * The value for the iso field.
	 * @var        string
	 */
	protected $iso;

	/**
	 * The value for the iso3 field.
	 * @var        string
	 */
	protected $iso3;

	/**
	 * The value for the iso_numeric field.
	 * @var        int
	 */
	protected $iso_numeric;

	/**
	 * The value for the fips field.
	 * @var        string
	 */
	protected $fips;

	/**
	 * The value for the country field.
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the capital field.
	 * @var        string
	 */
	protected $capital;

	/**
	 * The value for the area field.
	 * @var        int
	 */
	protected $area;

	/**
	 * The value for the population field.
	 * @var        int
	 */
	protected $population;

	/**
	 * The value for the continent field.
	 * @var        string
	 */
	protected $continent;

	/**
	 * The value for the tld field.
	 * @var        string
	 */
	protected $tld;

	/**
	 * The value for the currency_code field.
	 * @var        string
	 */
	protected $currency_code;

	/**
	 * The value for the currency_name field.
	 * @var        string
	 */
	protected $currency_name;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the postal_code_format field.
	 * @var        string
	 */
	protected $postal_code_format;

	/**
	 * The value for the postal_code_regex field.
	 * @var        string
	 */
	protected $postal_code_regex;

	/**
	 * The value for the languages field.
	 * @var        string
	 */
	protected $languages;

	/**
	 * The value for the geoname_id field.
	 * @var        int
	 */
	protected $geoname_id;

	/**
	 * The value for the neighbours field.
	 * @var        string
	 */
	protected $neighbours;

	/**
	 * The value for the equivalent_fips_code field.
	 * @var        string
	 */
	protected $equivalent_fips_code;

	/**
	 * @var        GeonameCity
	 */
	protected $aGeonameCity;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseGeonameCountry object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [iso] column value.
	 * 
	 * @return     string
	 */
	public function getIso()
	{
		return $this->iso;
	}

	/**
	 * Get the [iso3] column value.
	 * 
	 * @return     string
	 */
	public function getIso3()
	{
		return $this->iso3;
	}

	/**
	 * Get the [iso_numeric] column value.
	 * 
	 * @return     int
	 */
	public function getIsoNumeric()
	{
		return $this->iso_numeric;
	}

	/**
	 * Get the [fips] column value.
	 * 
	 * @return     string
	 */
	public function getFips()
	{
		return $this->fips;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [capital] column value.
	 * 
	 * @return     string
	 */
	public function getCapital()
	{
		return $this->capital;
	}

	/**
	 * Get the [area] column value.
	 * 
	 * @return     int
	 */
	public function getArea()
	{
		return $this->area;
	}

	/**
	 * Get the [population] column value.
	 * 
	 * @return     int
	 */
	public function getPopulation()
	{
		return $this->population;
	}

	/**
	 * Get the [continent] column value.
	 * 
	 * @return     string
	 */
	public function getContinent()
	{
		return $this->continent;
	}

	/**
	 * Get the [tld] column value.
	 * 
	 * @return     string
	 */
	public function getTld()
	{
		return $this->tld;
	}

	/**
	 * Get the [currency_code] column value.
	 * 
	 * @return     string
	 */
	public function getCurrencyCode()
	{
		return $this->currency_code;
	}

	/**
	 * Get the [currency_name] column value.
	 * 
	 * @return     string
	 */
	public function getCurrencyName()
	{
		return $this->currency_name;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [postal_code_format] column value.
	 * 
	 * @return     string
	 */
	public function getPostalCodeFormat()
	{
		return $this->postal_code_format;
	}

	/**
	 * Get the [postal_code_regex] column value.
	 * 
	 * @return     string
	 */
	public function getPostalCodeRegex()
	{
		return $this->postal_code_regex;
	}

	/**
	 * Get the [languages] column value.
	 * 
	 * @return     string
	 */
	public function getLanguages()
	{
		return $this->languages;
	}

	/**
	 * Get the [geoname_id] column value.
	 * 
	 * @return     int
	 */
	public function getGeonameId()
	{
		return $this->geoname_id;
	}

	/**
	 * Get the [neighbours] column value.
	 * 
	 * @return     string
	 */
	public function getNeighbours()
	{
		return $this->neighbours;
	}

	/**
	 * Get the [equivalent_fips_code] column value.
	 * 
	 * @return     string
	 */
	public function getEquivalentFipsCode()
	{
		return $this->equivalent_fips_code;
	}

	/**
	 * Set the value of [iso] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setIso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->iso !== $v) {
			$this->iso = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::ISO;
		}

		return $this;
	} // setIso()

	/**
	 * Set the value of [iso3] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setIso3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->iso3 !== $v) {
			$this->iso3 = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::ISO3;
		}

		return $this;
	} // setIso3()

	/**
	 * Set the value of [iso_numeric] column.
	 * 
	 * @param      int $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setIsoNumeric($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->iso_numeric !== $v) {
			$this->iso_numeric = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::ISO_NUMERIC;
		}

		return $this;
	} // setIsoNumeric()

	/**
	 * Set the value of [fips] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setFips($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fips !== $v) {
			$this->fips = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::FIPS;
		}

		return $this;
	} // setFips()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v) {
			$this->country = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Set the value of [capital] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setCapital($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->capital !== $v) {
			$this->capital = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::CAPITAL;
		}

		return $this;
	} // setCapital()

	/**
	 * Set the value of [area] column.
	 * 
	 * @param      int $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setArea($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->area !== $v) {
			$this->area = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::AREA;
		}

		return $this;
	} // setArea()

	/**
	 * Set the value of [population] column.
	 * 
	 * @param      int $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setPopulation($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->population !== $v) {
			$this->population = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::POPULATION;
		}

		return $this;
	} // setPopulation()

	/**
	 * Set the value of [continent] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setContinent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->continent !== $v) {
			$this->continent = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::CONTINENT;
		}

		return $this;
	} // setContinent()

	/**
	 * Set the value of [tld] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setTld($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tld !== $v) {
			$this->tld = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::TLD;
		}

		return $this;
	} // setTld()

	/**
	 * Set the value of [currency_code] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setCurrencyCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->currency_code !== $v) {
			$this->currency_code = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::CURRENCY_CODE;
		}

		return $this;
	} // setCurrencyCode()

	/**
	 * Set the value of [currency_name] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setCurrencyName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->currency_name !== $v) {
			$this->currency_name = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::CURRENCY_NAME;
		}

		return $this;
	} // setCurrencyName()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Set the value of [postal_code_format] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setPostalCodeFormat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->postal_code_format !== $v) {
			$this->postal_code_format = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::POSTAL_CODE_FORMAT;
		}

		return $this;
	} // setPostalCodeFormat()

	/**
	 * Set the value of [postal_code_regex] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setPostalCodeRegex($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->postal_code_regex !== $v) {
			$this->postal_code_regex = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::POSTAL_CODE_REGEX;
		}

		return $this;
	} // setPostalCodeRegex()

	/**
	 * Set the value of [languages] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setLanguages($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->languages !== $v) {
			$this->languages = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::LANGUAGES;
		}

		return $this;
	} // setLanguages()

	/**
	 * Set the value of [geoname_id] column.
	 * 
	 * @param      int $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setGeonameId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->geoname_id !== $v) {
			$this->geoname_id = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::GEONAME_ID;
		}

		if ($this->aGeonameCity !== null && $this->aGeonameCity->getGeonameId() !== $v) {
			$this->aGeonameCity = null;
		}

		return $this;
	} // setGeonameId()

	/**
	 * Set the value of [neighbours] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setNeighbours($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->neighbours !== $v) {
			$this->neighbours = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::NEIGHBOURS;
		}

		return $this;
	} // setNeighbours()

	/**
	 * Set the value of [equivalent_fips_code] column.
	 * 
	 * @param      string $v new value
	 * @return     GeonameCountry The current object (for fluent API support)
	 */
	public function setEquivalentFipsCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->equivalent_fips_code !== $v) {
			$this->equivalent_fips_code = $v;
			$this->modifiedColumns[] = GeonameCountryPeer::EQUIVALENT_FIPS_CODE;
		}

		return $this;
	} // setEquivalentFipsCode()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->iso = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->iso3 = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->iso_numeric = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->fips = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->country = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->capital = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->area = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->population = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->continent = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->tld = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->currency_code = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->currency_name = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->phone = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->postal_code_format = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->postal_code_regex = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->languages = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->geoname_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->neighbours = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->equivalent_fips_code = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 19; // 19 = GeonameCountryPeer::NUM_COLUMNS - GeonameCountryPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating GeonameCountry object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aGeonameCity !== null && $this->geoname_id !== $this->aGeonameCity->getGeonameId()) {
			$this->aGeonameCity = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GeonameCountryPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = GeonameCountryPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aGeonameCity = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseGeonameCountry:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GeonameCountryPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			GeonameCountryPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseGeonameCountry:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseGeonameCountry:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GeonameCountryPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseGeonameCountry:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			GeonameCountryPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aGeonameCity !== null) {
				if ($this->aGeonameCity->isModified() || $this->aGeonameCity->isNew()) {
					$affectedRows += $this->aGeonameCity->save($con);
				}
				$this->setGeonameCity($this->aGeonameCity);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = GeonameCountryPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += GeonameCountryPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aGeonameCity !== null) {
				if (!$this->aGeonameCity->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aGeonameCity->getValidationFailures());
				}
			}


			if (($retval = GeonameCountryPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = GeonameCountryPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIso();
				break;
			case 1:
				return $this->getIso3();
				break;
			case 2:
				return $this->getIsoNumeric();
				break;
			case 3:
				return $this->getFips();
				break;
			case 4:
				return $this->getCountry();
				break;
			case 5:
				return $this->getCapital();
				break;
			case 6:
				return $this->getArea();
				break;
			case 7:
				return $this->getPopulation();
				break;
			case 8:
				return $this->getContinent();
				break;
			case 9:
				return $this->getTld();
				break;
			case 10:
				return $this->getCurrencyCode();
				break;
			case 11:
				return $this->getCurrencyName();
				break;
			case 12:
				return $this->getPhone();
				break;
			case 13:
				return $this->getPostalCodeFormat();
				break;
			case 14:
				return $this->getPostalCodeRegex();
				break;
			case 15:
				return $this->getLanguages();
				break;
			case 16:
				return $this->getGeonameId();
				break;
			case 17:
				return $this->getNeighbours();
				break;
			case 18:
				return $this->getEquivalentFipsCode();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = GeonameCountryPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIso(),
			$keys[1] => $this->getIso3(),
			$keys[2] => $this->getIsoNumeric(),
			$keys[3] => $this->getFips(),
			$keys[4] => $this->getCountry(),
			$keys[5] => $this->getCapital(),
			$keys[6] => $this->getArea(),
			$keys[7] => $this->getPopulation(),
			$keys[8] => $this->getContinent(),
			$keys[9] => $this->getTld(),
			$keys[10] => $this->getCurrencyCode(),
			$keys[11] => $this->getCurrencyName(),
			$keys[12] => $this->getPhone(),
			$keys[13] => $this->getPostalCodeFormat(),
			$keys[14] => $this->getPostalCodeRegex(),
			$keys[15] => $this->getLanguages(),
			$keys[16] => $this->getGeonameId(),
			$keys[17] => $this->getNeighbours(),
			$keys[18] => $this->getEquivalentFipsCode(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = GeonameCountryPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIso($value);
				break;
			case 1:
				$this->setIso3($value);
				break;
			case 2:
				$this->setIsoNumeric($value);
				break;
			case 3:
				$this->setFips($value);
				break;
			case 4:
				$this->setCountry($value);
				break;
			case 5:
				$this->setCapital($value);
				break;
			case 6:
				$this->setArea($value);
				break;
			case 7:
				$this->setPopulation($value);
				break;
			case 8:
				$this->setContinent($value);
				break;
			case 9:
				$this->setTld($value);
				break;
			case 10:
				$this->setCurrencyCode($value);
				break;
			case 11:
				$this->setCurrencyName($value);
				break;
			case 12:
				$this->setPhone($value);
				break;
			case 13:
				$this->setPostalCodeFormat($value);
				break;
			case 14:
				$this->setPostalCodeRegex($value);
				break;
			case 15:
				$this->setLanguages($value);
				break;
			case 16:
				$this->setGeonameId($value);
				break;
			case 17:
				$this->setNeighbours($value);
				break;
			case 18:
				$this->setEquivalentFipsCode($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = GeonameCountryPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIso($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIso3($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIsoNumeric($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFips($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCountry($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCapital($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setArea($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPopulation($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setContinent($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTld($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCurrencyCode($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCurrencyName($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPhone($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPostalCodeFormat($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPostalCodeRegex($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setLanguages($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setGeonameId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setNeighbours($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setEquivalentFipsCode($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(GeonameCountryPeer::DATABASE_NAME);

		if ($this->isColumnModified(GeonameCountryPeer::ISO)) $criteria->add(GeonameCountryPeer::ISO, $this->iso);
		if ($this->isColumnModified(GeonameCountryPeer::ISO3)) $criteria->add(GeonameCountryPeer::ISO3, $this->iso3);
		if ($this->isColumnModified(GeonameCountryPeer::ISO_NUMERIC)) $criteria->add(GeonameCountryPeer::ISO_NUMERIC, $this->iso_numeric);
		if ($this->isColumnModified(GeonameCountryPeer::FIPS)) $criteria->add(GeonameCountryPeer::FIPS, $this->fips);
		if ($this->isColumnModified(GeonameCountryPeer::COUNTRY)) $criteria->add(GeonameCountryPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(GeonameCountryPeer::CAPITAL)) $criteria->add(GeonameCountryPeer::CAPITAL, $this->capital);
		if ($this->isColumnModified(GeonameCountryPeer::AREA)) $criteria->add(GeonameCountryPeer::AREA, $this->area);
		if ($this->isColumnModified(GeonameCountryPeer::POPULATION)) $criteria->add(GeonameCountryPeer::POPULATION, $this->population);
		if ($this->isColumnModified(GeonameCountryPeer::CONTINENT)) $criteria->add(GeonameCountryPeer::CONTINENT, $this->continent);
		if ($this->isColumnModified(GeonameCountryPeer::TLD)) $criteria->add(GeonameCountryPeer::TLD, $this->tld);
		if ($this->isColumnModified(GeonameCountryPeer::CURRENCY_CODE)) $criteria->add(GeonameCountryPeer::CURRENCY_CODE, $this->currency_code);
		if ($this->isColumnModified(GeonameCountryPeer::CURRENCY_NAME)) $criteria->add(GeonameCountryPeer::CURRENCY_NAME, $this->currency_name);
		if ($this->isColumnModified(GeonameCountryPeer::PHONE)) $criteria->add(GeonameCountryPeer::PHONE, $this->phone);
		if ($this->isColumnModified(GeonameCountryPeer::POSTAL_CODE_FORMAT)) $criteria->add(GeonameCountryPeer::POSTAL_CODE_FORMAT, $this->postal_code_format);
		if ($this->isColumnModified(GeonameCountryPeer::POSTAL_CODE_REGEX)) $criteria->add(GeonameCountryPeer::POSTAL_CODE_REGEX, $this->postal_code_regex);
		if ($this->isColumnModified(GeonameCountryPeer::LANGUAGES)) $criteria->add(GeonameCountryPeer::LANGUAGES, $this->languages);
		if ($this->isColumnModified(GeonameCountryPeer::GEONAME_ID)) $criteria->add(GeonameCountryPeer::GEONAME_ID, $this->geoname_id);
		if ($this->isColumnModified(GeonameCountryPeer::NEIGHBOURS)) $criteria->add(GeonameCountryPeer::NEIGHBOURS, $this->neighbours);
		if ($this->isColumnModified(GeonameCountryPeer::EQUIVALENT_FIPS_CODE)) $criteria->add(GeonameCountryPeer::EQUIVALENT_FIPS_CODE, $this->equivalent_fips_code);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(GeonameCountryPeer::DATABASE_NAME);

		$criteria->add(GeonameCountryPeer::GEONAME_ID, $this->geoname_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getGeonameId();
	}

	/**
	 * Generic method to set the primary key (geoname_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setGeonameId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of GeonameCountry (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIso($this->iso);

		$copyObj->setIso3($this->iso3);

		$copyObj->setIsoNumeric($this->iso_numeric);

		$copyObj->setFips($this->fips);

		$copyObj->setCountry($this->country);

		$copyObj->setCapital($this->capital);

		$copyObj->setArea($this->area);

		$copyObj->setPopulation($this->population);

		$copyObj->setContinent($this->continent);

		$copyObj->setTld($this->tld);

		$copyObj->setCurrencyCode($this->currency_code);

		$copyObj->setCurrencyName($this->currency_name);

		$copyObj->setPhone($this->phone);

		$copyObj->setPostalCodeFormat($this->postal_code_format);

		$copyObj->setPostalCodeRegex($this->postal_code_regex);

		$copyObj->setLanguages($this->languages);

		$copyObj->setGeonameId($this->geoname_id);

		$copyObj->setNeighbours($this->neighbours);

		$copyObj->setEquivalentFipsCode($this->equivalent_fips_code);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     GeonameCountry Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     GeonameCountryPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new GeonameCountryPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a GeonameCity object.
	 *
	 * @param      GeonameCity $v
	 * @return     GeonameCountry The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setGeonameCity(GeonameCity $v = null)
	{
		if ($v === null) {
			$this->setGeonameId(NULL);
		} else {
			$this->setGeonameId($v->getGeonameId());
		}

		$this->aGeonameCity = $v;

		// Add binding for other direction of this 1:1 relationship.
		if ($v !== null) {
			$v->setGeonameCountry($this);
		}

		return $this;
	}


	/**
	 * Get the associated GeonameCity object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     GeonameCity The associated GeonameCity object.
	 * @throws     PropelException
	 */
	public function getGeonameCity(PropelPDO $con = null)
	{
		if ($this->aGeonameCity === null && ($this->geoname_id !== null)) {
			$c = new Criteria(GeonameCityPeer::DATABASE_NAME);
			$c->add(GeonameCityPeer::GEONAME_ID, $this->geoname_id);
			$this->aGeonameCity = GeonameCityPeer::doSelectOne($c, $con);
			// Because this foreign key represents a one-to-one relationship, we will create a bi-directional association.
			$this->aGeonameCity->setGeonameCountry($this);
		}
		return $this->aGeonameCity;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aGeonameCity = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseGeonameCountry:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseGeonameCountry::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseGeonameCountry
