<?php

/**
 * Base class that represents a row from the 'EMT_ROLE' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 03/07/12 22:24:23
 *
 * @package    lib.model.om
 */
abstract class BaseRole extends BaseObject  implements Persistent {


  const PEER = 'RolePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RolePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the sysname field.
	 * @var        string
	 */
	protected $sysname;

	/**
	 * The value for the parent_id field.
	 * @var        int
	 */
	protected $parent_id;

	/**
	 * The value for the module field.
	 * @var        string
	 */
	protected $module;

	/**
	 * The value for the related_type_id field.
	 * @var        int
	 */
	protected $related_type_id;

	/**
	 * The value for the opposite_role_id field.
	 * @var        int
	 */
	protected $opposite_role_id;

	/**
	 * @var        Role
	 */
	protected $aRoleRelatedByParentId;

	/**
	 * @var        PrivacyNodeType
	 */
	protected $aPrivacyNodeType;

	/**
	 * @var        Role
	 */
	protected $aRoleRelatedByOppositeRoleId;

	/**
	 * @var        array Role[] Collection to store aggregation of Role objects.
	 */
	protected $collRolesRelatedByParentId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRolesRelatedByParentId.
	 */
	private $lastRoleRelatedByParentIdCriteria = null;

	/**
	 * @var        array Role[] Collection to store aggregation of Role objects.
	 */
	protected $collRolesRelatedByOppositeRoleId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRolesRelatedByOppositeRoleId.
	 */
	private $lastRoleRelatedByOppositeRoleIdCriteria = null;

	/**
	 * @var        array RoleI18n[] Collection to store aggregation of RoleI18n objects.
	 */
	protected $collRoleI18ns;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRoleI18ns.
	 */
	private $lastRoleI18nCriteria = null;

	/**
	 * @var        array RoleMatrix[] Collection to store aggregation of RoleMatrix objects.
	 */
	protected $collRoleMatrixs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRoleMatrixs.
	 */
	private $lastRoleMatrixCriteria = null;

	/**
	 * @var        array Login[] Collection to store aggregation of Login objects.
	 */
	protected $collLogins;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLogins.
	 */
	private $lastLoginCriteria = null;

	/**
	 * @var        array PrivacyPreference[] Collection to store aggregation of PrivacyPreference objects.
	 */
	protected $collPrivacyPreferencesRelatedByRoleOnSubject;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPrivacyPreferencesRelatedByRoleOnSubject.
	 */
	private $lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria = null;

	/**
	 * @var        array PrivacyPreference[] Collection to store aggregation of PrivacyPreference objects.
	 */
	protected $collPrivacyPreferencesRelatedByRoleOnObject;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPrivacyPreferencesRelatedByRoleOnObject.
	 */
	private $lastPrivacyPreferenceRelatedByRoleOnObjectCriteria = null;

	/**
	 * @var        array RoleAssignment[] Collection to store aggregation of RoleAssignment objects.
	 */
	protected $collRoleAssignments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRoleAssignments.
	 */
	private $lastRoleAssignmentCriteria = null;

	/**
	 * @var        array CompanyLogin[] Collection to store aggregation of CompanyLogin objects.
	 */
	protected $collCompanyLogins;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanyLogins.
	 */
	private $lastCompanyLoginCriteria = null;

	/**
	 * @var        array CompanyUser[] Collection to store aggregation of CompanyUser objects.
	 */
	protected $collCompanyUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanyUsers.
	 */
	private $lastCompanyUserCriteria = null;

	/**
	 * @var        array Relation[] Collection to store aggregation of Relation objects.
	 */
	protected $collRelations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelations.
	 */
	private $lastRelationCriteria = null;

	/**
	 * @var        array GroupMembership[] Collection to store aggregation of GroupMembership objects.
	 */
	protected $collGroupMemberships;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGroupMemberships.
	 */
	private $lastGroupMembershipCriteria = null;

	/**
	 * @var        array RelationUpdate[] Collection to store aggregation of RelationUpdate objects.
	 */
	protected $collRelationUpdates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelationUpdates.
	 */
	private $lastRelationUpdateCriteria = null;

	/**
	 * @var        array WallPost[] Collection to store aggregation of WallPost objects.
	 */
	protected $collWallPosts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collWallPosts.
	 */
	private $lastWallPostCriteria = null;

	/**
	 * @var        array MarketingPackagePrice[] Collection to store aggregation of MarketingPackagePrice objects.
	 */
	protected $collMarketingPackagePrices;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMarketingPackagePrices.
	 */
	private $lastMarketingPackagePriceCriteria = null;

	/**
	 * @var        array Task[] Collection to store aggregation of Task objects.
	 */
	protected $collTasks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTasks.
	 */
	private $lastTaskCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

  /**
   * The value for the culture field.
   * @var string
   */
  protected $culture;

	/**
	 * Initializes internal state of BaseRole object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [sysname] column value.
	 * 
	 * @return     string
	 */
	public function getSysname()
	{
		return $this->sysname;
	}

	/**
	 * Get the [parent_id] column value.
	 * 
	 * @return     int
	 */
	public function getParentId()
	{
		return $this->parent_id;
	}

	/**
	 * Get the [module] column value.
	 * 
	 * @return     string
	 */
	public function getModule()
	{
		return $this->module;
	}

	/**
	 * Get the [related_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getRelatedTypeId()
	{
		return $this->related_type_id;
	}

	/**
	 * Get the [opposite_role_id] column value.
	 * 
	 * @return     int
	 */
	public function getOppositeRoleId()
	{
		return $this->opposite_role_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Role The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RolePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [sysname] column.
	 * 
	 * @param      string $v new value
	 * @return     Role The current object (for fluent API support)
	 */
	public function setSysname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sysname !== $v) {
			$this->sysname = $v;
			$this->modifiedColumns[] = RolePeer::SYSNAME;
		}

		return $this;
	} // setSysname()

	/**
	 * Set the value of [parent_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Role The current object (for fluent API support)
	 */
	public function setParentId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->parent_id !== $v) {
			$this->parent_id = $v;
			$this->modifiedColumns[] = RolePeer::PARENT_ID;
		}

		if ($this->aRoleRelatedByParentId !== null && $this->aRoleRelatedByParentId->getId() !== $v) {
			$this->aRoleRelatedByParentId = null;
		}

		return $this;
	} // setParentId()

	/**
	 * Set the value of [module] column.
	 * 
	 * @param      string $v new value
	 * @return     Role The current object (for fluent API support)
	 */
	public function setModule($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->module !== $v) {
			$this->module = $v;
			$this->modifiedColumns[] = RolePeer::MODULE;
		}

		return $this;
	} // setModule()

	/**
	 * Set the value of [related_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Role The current object (for fluent API support)
	 */
	public function setRelatedTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->related_type_id !== $v) {
			$this->related_type_id = $v;
			$this->modifiedColumns[] = RolePeer::RELATED_TYPE_ID;
		}

		if ($this->aPrivacyNodeType !== null && $this->aPrivacyNodeType->getId() !== $v) {
			$this->aPrivacyNodeType = null;
		}

		return $this;
	} // setRelatedTypeId()

	/**
	 * Set the value of [opposite_role_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Role The current object (for fluent API support)
	 */
	public function setOppositeRoleId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->opposite_role_id !== $v) {
			$this->opposite_role_id = $v;
			$this->modifiedColumns[] = RolePeer::OPPOSITE_ROLE_ID;
		}

		if ($this->aRoleRelatedByOppositeRoleId !== null && $this->aRoleRelatedByOppositeRoleId->getId() !== $v) {
			$this->aRoleRelatedByOppositeRoleId = null;
		}

		return $this;
	} // setOppositeRoleId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->sysname = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->parent_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->module = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->related_type_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->opposite_role_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 6; // 6 = RolePeer::NUM_COLUMNS - RolePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Role object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aRoleRelatedByParentId !== null && $this->parent_id !== $this->aRoleRelatedByParentId->getId()) {
			$this->aRoleRelatedByParentId = null;
		}
		if ($this->aPrivacyNodeType !== null && $this->related_type_id !== $this->aPrivacyNodeType->getId()) {
			$this->aPrivacyNodeType = null;
		}
		if ($this->aRoleRelatedByOppositeRoleId !== null && $this->opposite_role_id !== $this->aRoleRelatedByOppositeRoleId->getId()) {
			$this->aRoleRelatedByOppositeRoleId = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RolePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RolePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aRoleRelatedByParentId = null;
			$this->aPrivacyNodeType = null;
			$this->aRoleRelatedByOppositeRoleId = null;
			$this->collRolesRelatedByParentId = null;
			$this->lastRoleRelatedByParentIdCriteria = null;

			$this->collRolesRelatedByOppositeRoleId = null;
			$this->lastRoleRelatedByOppositeRoleIdCriteria = null;

			$this->collRoleI18ns = null;
			$this->lastRoleI18nCriteria = null;

			$this->collRoleMatrixs = null;
			$this->lastRoleMatrixCriteria = null;

			$this->collLogins = null;
			$this->lastLoginCriteria = null;

			$this->collPrivacyPreferencesRelatedByRoleOnSubject = null;
			$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria = null;

			$this->collPrivacyPreferencesRelatedByRoleOnObject = null;
			$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria = null;

			$this->collRoleAssignments = null;
			$this->lastRoleAssignmentCriteria = null;

			$this->collCompanyLogins = null;
			$this->lastCompanyLoginCriteria = null;

			$this->collCompanyUsers = null;
			$this->lastCompanyUserCriteria = null;

			$this->collRelations = null;
			$this->lastRelationCriteria = null;

			$this->collGroupMemberships = null;
			$this->lastGroupMembershipCriteria = null;

			$this->collRelationUpdates = null;
			$this->lastRelationUpdateCriteria = null;

			$this->collWallPosts = null;
			$this->lastWallPostCriteria = null;

			$this->collMarketingPackagePrices = null;
			$this->lastMarketingPackagePriceCriteria = null;

			$this->collTasks = null;
			$this->lastTaskCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRole:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RolePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RolePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRole:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRole:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RolePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRole:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RolePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRoleRelatedByParentId !== null) {
				if ($this->aRoleRelatedByParentId->isModified() || ($this->aRoleRelatedByParentId->getCulture() && $this->aRoleRelatedByParentId->getCurrentRoleI18n()->isModified()) || $this->aRoleRelatedByParentId->isNew()) {
					$affectedRows += $this->aRoleRelatedByParentId->save($con);
				}
				$this->setRoleRelatedByParentId($this->aRoleRelatedByParentId);
			}

			if ($this->aPrivacyNodeType !== null) {
				if ($this->aPrivacyNodeType->isModified() || ($this->aPrivacyNodeType->getCulture() && $this->aPrivacyNodeType->getCurrentPrivacyNodeTypeI18n()->isModified()) || $this->aPrivacyNodeType->isNew()) {
					$affectedRows += $this->aPrivacyNodeType->save($con);
				}
				$this->setPrivacyNodeType($this->aPrivacyNodeType);
			}

			if ($this->aRoleRelatedByOppositeRoleId !== null) {
				if ($this->aRoleRelatedByOppositeRoleId->isModified() || ($this->aRoleRelatedByOppositeRoleId->getCulture() && $this->aRoleRelatedByOppositeRoleId->getCurrentRoleI18n()->isModified()) || $this->aRoleRelatedByOppositeRoleId->isNew()) {
					$affectedRows += $this->aRoleRelatedByOppositeRoleId->save($con);
				}
				$this->setRoleRelatedByOppositeRoleId($this->aRoleRelatedByOppositeRoleId);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RolePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RolePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RolePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collRolesRelatedByParentId !== null) {
				foreach ($this->collRolesRelatedByParentId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRolesRelatedByOppositeRoleId !== null) {
				foreach ($this->collRolesRelatedByOppositeRoleId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRoleI18ns !== null) {
				foreach ($this->collRoleI18ns as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRoleMatrixs !== null) {
				foreach ($this->collRoleMatrixs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLogins !== null) {
				foreach ($this->collLogins as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPrivacyPreferencesRelatedByRoleOnSubject !== null) {
				foreach ($this->collPrivacyPreferencesRelatedByRoleOnSubject as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPrivacyPreferencesRelatedByRoleOnObject !== null) {
				foreach ($this->collPrivacyPreferencesRelatedByRoleOnObject as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRoleAssignments !== null) {
				foreach ($this->collRoleAssignments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanyLogins !== null) {
				foreach ($this->collCompanyLogins as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanyUsers !== null) {
				foreach ($this->collCompanyUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRelations !== null) {
				foreach ($this->collRelations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGroupMemberships !== null) {
				foreach ($this->collGroupMemberships as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRelationUpdates !== null) {
				foreach ($this->collRelationUpdates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collWallPosts !== null) {
				foreach ($this->collWallPosts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMarketingPackagePrices !== null) {
				foreach ($this->collMarketingPackagePrices as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTasks !== null) {
				foreach ($this->collTasks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRoleRelatedByParentId !== null) {
				if (!$this->aRoleRelatedByParentId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRoleRelatedByParentId->getValidationFailures());
				}
			}

			if ($this->aPrivacyNodeType !== null) {
				if (!$this->aPrivacyNodeType->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPrivacyNodeType->getValidationFailures());
				}
			}

			if ($this->aRoleRelatedByOppositeRoleId !== null) {
				if (!$this->aRoleRelatedByOppositeRoleId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRoleRelatedByOppositeRoleId->getValidationFailures());
				}
			}


			if (($retval = RolePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collRolesRelatedByParentId !== null) {
					foreach ($this->collRolesRelatedByParentId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRolesRelatedByOppositeRoleId !== null) {
					foreach ($this->collRolesRelatedByOppositeRoleId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRoleI18ns !== null) {
					foreach ($this->collRoleI18ns as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRoleMatrixs !== null) {
					foreach ($this->collRoleMatrixs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLogins !== null) {
					foreach ($this->collLogins as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPrivacyPreferencesRelatedByRoleOnSubject !== null) {
					foreach ($this->collPrivacyPreferencesRelatedByRoleOnSubject as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPrivacyPreferencesRelatedByRoleOnObject !== null) {
					foreach ($this->collPrivacyPreferencesRelatedByRoleOnObject as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRoleAssignments !== null) {
					foreach ($this->collRoleAssignments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanyLogins !== null) {
					foreach ($this->collCompanyLogins as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanyUsers !== null) {
					foreach ($this->collCompanyUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRelations !== null) {
					foreach ($this->collRelations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGroupMemberships !== null) {
					foreach ($this->collGroupMemberships as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRelationUpdates !== null) {
					foreach ($this->collRelationUpdates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collWallPosts !== null) {
					foreach ($this->collWallPosts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMarketingPackagePrices !== null) {
					foreach ($this->collMarketingPackagePrices as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTasks !== null) {
					foreach ($this->collTasks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RolePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getSysname();
				break;
			case 2:
				return $this->getParentId();
				break;
			case 3:
				return $this->getModule();
				break;
			case 4:
				return $this->getRelatedTypeId();
				break;
			case 5:
				return $this->getOppositeRoleId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RolePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getSysname(),
			$keys[2] => $this->getParentId(),
			$keys[3] => $this->getModule(),
			$keys[4] => $this->getRelatedTypeId(),
			$keys[5] => $this->getOppositeRoleId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RolePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setSysname($value);
				break;
			case 2:
				$this->setParentId($value);
				break;
			case 3:
				$this->setModule($value);
				break;
			case 4:
				$this->setRelatedTypeId($value);
				break;
			case 5:
				$this->setOppositeRoleId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RolePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSysname($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setParentId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setModule($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setRelatedTypeId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setOppositeRoleId($arr[$keys[5]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RolePeer::DATABASE_NAME);

		if ($this->isColumnModified(RolePeer::ID)) $criteria->add(RolePeer::ID, $this->id);
		if ($this->isColumnModified(RolePeer::SYSNAME)) $criteria->add(RolePeer::SYSNAME, $this->sysname);
		if ($this->isColumnModified(RolePeer::PARENT_ID)) $criteria->add(RolePeer::PARENT_ID, $this->parent_id);
		if ($this->isColumnModified(RolePeer::MODULE)) $criteria->add(RolePeer::MODULE, $this->module);
		if ($this->isColumnModified(RolePeer::RELATED_TYPE_ID)) $criteria->add(RolePeer::RELATED_TYPE_ID, $this->related_type_id);
		if ($this->isColumnModified(RolePeer::OPPOSITE_ROLE_ID)) $criteria->add(RolePeer::OPPOSITE_ROLE_ID, $this->opposite_role_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RolePeer::DATABASE_NAME);

		$criteria->add(RolePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Role (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSysname($this->sysname);

		$copyObj->setParentId($this->parent_id);

		$copyObj->setModule($this->module);

		$copyObj->setRelatedTypeId($this->related_type_id);

		$copyObj->setOppositeRoleId($this->opposite_role_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getRolesRelatedByParentId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRoleRelatedByParentId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRolesRelatedByOppositeRoleId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRoleRelatedByOppositeRoleId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRoleI18ns() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRoleI18n($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRoleMatrixs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRoleMatrix($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLogins() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLogin($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPrivacyPreferencesRelatedByRoleOnSubject() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPrivacyPreferenceRelatedByRoleOnSubject($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPrivacyPreferencesRelatedByRoleOnObject() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPrivacyPreferenceRelatedByRoleOnObject($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRoleAssignments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRoleAssignment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanyLogins() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanyLogin($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanyUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanyUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRelations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelation($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGroupMemberships() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGroupMembership($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRelationUpdates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelationUpdate($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getWallPosts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addWallPost($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMarketingPackagePrices() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMarketingPackagePrice($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTasks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTask($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Role Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RolePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RolePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Role object.
	 *
	 * @param      Role $v
	 * @return     Role The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRoleRelatedByParentId(Role $v = null)
	{
		if ($v === null) {
			$this->setParentId(NULL);
		} else {
			$this->setParentId($v->getId());
		}

		$this->aRoleRelatedByParentId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Role object, it will not be re-added.
		if ($v !== null) {
			$v->addRoleRelatedByParentId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Role object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Role The associated Role object.
	 * @throws     PropelException
	 */
	public function getRoleRelatedByParentId(PropelPDO $con = null)
	{
		if ($this->aRoleRelatedByParentId === null && ($this->parent_id !== null)) {
			$c = new Criteria(RolePeer::DATABASE_NAME);
			$c->add(RolePeer::ID, $this->parent_id);
			$this->aRoleRelatedByParentId = RolePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aRoleRelatedByParentId->addRolesRelatedByParentId($this);
			 */
		}
		return $this->aRoleRelatedByParentId;
	}

	/**
	 * Declares an association between this object and a PrivacyNodeType object.
	 *
	 * @param      PrivacyNodeType $v
	 * @return     Role The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPrivacyNodeType(PrivacyNodeType $v = null)
	{
		if ($v === null) {
			$this->setRelatedTypeId(NULL);
		} else {
			$this->setRelatedTypeId($v->getId());
		}

		$this->aPrivacyNodeType = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the PrivacyNodeType object, it will not be re-added.
		if ($v !== null) {
			$v->addRole($this);
		}

		return $this;
	}


	/**
	 * Get the associated PrivacyNodeType object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     PrivacyNodeType The associated PrivacyNodeType object.
	 * @throws     PropelException
	 */
	public function getPrivacyNodeType(PropelPDO $con = null)
	{
		if ($this->aPrivacyNodeType === null && ($this->related_type_id !== null)) {
			$c = new Criteria(PrivacyNodeTypePeer::DATABASE_NAME);
			$c->add(PrivacyNodeTypePeer::ID, $this->related_type_id);
			$this->aPrivacyNodeType = PrivacyNodeTypePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPrivacyNodeType->addRoles($this);
			 */
		}
		return $this->aPrivacyNodeType;
	}

	/**
	 * Declares an association between this object and a Role object.
	 *
	 * @param      Role $v
	 * @return     Role The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRoleRelatedByOppositeRoleId(Role $v = null)
	{
		if ($v === null) {
			$this->setOppositeRoleId(NULL);
		} else {
			$this->setOppositeRoleId($v->getId());
		}

		$this->aRoleRelatedByOppositeRoleId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Role object, it will not be re-added.
		if ($v !== null) {
			$v->addRoleRelatedByOppositeRoleId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Role object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Role The associated Role object.
	 * @throws     PropelException
	 */
	public function getRoleRelatedByOppositeRoleId(PropelPDO $con = null)
	{
		if ($this->aRoleRelatedByOppositeRoleId === null && ($this->opposite_role_id !== null)) {
			$c = new Criteria(RolePeer::DATABASE_NAME);
			$c->add(RolePeer::ID, $this->opposite_role_id);
			$this->aRoleRelatedByOppositeRoleId = RolePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aRoleRelatedByOppositeRoleId->addRolesRelatedByOppositeRoleId($this);
			 */
		}
		return $this->aRoleRelatedByOppositeRoleId;
	}

	/**
	 * Clears out the collRolesRelatedByParentId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRolesRelatedByParentId()
	 */
	public function clearRolesRelatedByParentId()
	{
		$this->collRolesRelatedByParentId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRolesRelatedByParentId collection (array).
	 *
	 * By default this just sets the collRolesRelatedByParentId collection to an empty array (like clearcollRolesRelatedByParentId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRolesRelatedByParentId()
	{
		$this->collRolesRelatedByParentId = array();
	}

	/**
	 * Gets an array of Role objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related RolesRelatedByParentId from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Role[]
	 * @throws     PropelException
	 */
	public function getRolesRelatedByParentId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRolesRelatedByParentId === null) {
			if ($this->isNew()) {
			   $this->collRolesRelatedByParentId = array();
			} else {

				$criteria->add(RolePeer::PARENT_ID, $this->id);

				RolePeer::addSelectColumns($criteria);
				$this->collRolesRelatedByParentId = RolePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RolePeer::PARENT_ID, $this->id);

				RolePeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleRelatedByParentIdCriteria) || !$this->lastRoleRelatedByParentIdCriteria->equals($criteria)) {
					$this->collRolesRelatedByParentId = RolePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleRelatedByParentIdCriteria = $criteria;
		return $this->collRolesRelatedByParentId;
	}

	/**
	 * Returns the number of related Role objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Role objects.
	 * @throws     PropelException
	 */
	public function countRolesRelatedByParentId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRolesRelatedByParentId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RolePeer::PARENT_ID, $this->id);

				$count = RolePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RolePeer::PARENT_ID, $this->id);

				if (!isset($this->lastRoleRelatedByParentIdCriteria) || !$this->lastRoleRelatedByParentIdCriteria->equals($criteria)) {
					$count = RolePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRolesRelatedByParentId);
				}
			} else {
				$count = count($this->collRolesRelatedByParentId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Role object to this object
	 * through the Role foreign key attribute.
	 *
	 * @param      Role $l Role
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoleRelatedByParentId(Role $l)
	{
		if ($this->collRolesRelatedByParentId === null) {
			$this->initRolesRelatedByParentId();
		}
		if (!in_array($l, $this->collRolesRelatedByParentId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRolesRelatedByParentId, $l);
			$l->setRoleRelatedByParentId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related RolesRelatedByParentId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRolesRelatedByParentIdJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRolesRelatedByParentId === null) {
			if ($this->isNew()) {
				$this->collRolesRelatedByParentId = array();
			} else {

				$criteria->add(RolePeer::PARENT_ID, $this->id);

				$this->collRolesRelatedByParentId = RolePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RolePeer::PARENT_ID, $this->id);

			if (!isset($this->lastRoleRelatedByParentIdCriteria) || !$this->lastRoleRelatedByParentIdCriteria->equals($criteria)) {
				$this->collRolesRelatedByParentId = RolePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleRelatedByParentIdCriteria = $criteria;

		return $this->collRolesRelatedByParentId;
	}

	/**
	 * Clears out the collRolesRelatedByOppositeRoleId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRolesRelatedByOppositeRoleId()
	 */
	public function clearRolesRelatedByOppositeRoleId()
	{
		$this->collRolesRelatedByOppositeRoleId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRolesRelatedByOppositeRoleId collection (array).
	 *
	 * By default this just sets the collRolesRelatedByOppositeRoleId collection to an empty array (like clearcollRolesRelatedByOppositeRoleId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRolesRelatedByOppositeRoleId()
	{
		$this->collRolesRelatedByOppositeRoleId = array();
	}

	/**
	 * Gets an array of Role objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related RolesRelatedByOppositeRoleId from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Role[]
	 * @throws     PropelException
	 */
	public function getRolesRelatedByOppositeRoleId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRolesRelatedByOppositeRoleId === null) {
			if ($this->isNew()) {
			   $this->collRolesRelatedByOppositeRoleId = array();
			} else {

				$criteria->add(RolePeer::OPPOSITE_ROLE_ID, $this->id);

				RolePeer::addSelectColumns($criteria);
				$this->collRolesRelatedByOppositeRoleId = RolePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RolePeer::OPPOSITE_ROLE_ID, $this->id);

				RolePeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleRelatedByOppositeRoleIdCriteria) || !$this->lastRoleRelatedByOppositeRoleIdCriteria->equals($criteria)) {
					$this->collRolesRelatedByOppositeRoleId = RolePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleRelatedByOppositeRoleIdCriteria = $criteria;
		return $this->collRolesRelatedByOppositeRoleId;
	}

	/**
	 * Returns the number of related Role objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Role objects.
	 * @throws     PropelException
	 */
	public function countRolesRelatedByOppositeRoleId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRolesRelatedByOppositeRoleId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RolePeer::OPPOSITE_ROLE_ID, $this->id);

				$count = RolePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RolePeer::OPPOSITE_ROLE_ID, $this->id);

				if (!isset($this->lastRoleRelatedByOppositeRoleIdCriteria) || !$this->lastRoleRelatedByOppositeRoleIdCriteria->equals($criteria)) {
					$count = RolePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRolesRelatedByOppositeRoleId);
				}
			} else {
				$count = count($this->collRolesRelatedByOppositeRoleId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Role object to this object
	 * through the Role foreign key attribute.
	 *
	 * @param      Role $l Role
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoleRelatedByOppositeRoleId(Role $l)
	{
		if ($this->collRolesRelatedByOppositeRoleId === null) {
			$this->initRolesRelatedByOppositeRoleId();
		}
		if (!in_array($l, $this->collRolesRelatedByOppositeRoleId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRolesRelatedByOppositeRoleId, $l);
			$l->setRoleRelatedByOppositeRoleId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related RolesRelatedByOppositeRoleId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRolesRelatedByOppositeRoleIdJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRolesRelatedByOppositeRoleId === null) {
			if ($this->isNew()) {
				$this->collRolesRelatedByOppositeRoleId = array();
			} else {

				$criteria->add(RolePeer::OPPOSITE_ROLE_ID, $this->id);

				$this->collRolesRelatedByOppositeRoleId = RolePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RolePeer::OPPOSITE_ROLE_ID, $this->id);

			if (!isset($this->lastRoleRelatedByOppositeRoleIdCriteria) || !$this->lastRoleRelatedByOppositeRoleIdCriteria->equals($criteria)) {
				$this->collRolesRelatedByOppositeRoleId = RolePeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleRelatedByOppositeRoleIdCriteria = $criteria;

		return $this->collRolesRelatedByOppositeRoleId;
	}

	/**
	 * Clears out the collRoleI18ns collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRoleI18ns()
	 */
	public function clearRoleI18ns()
	{
		$this->collRoleI18ns = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRoleI18ns collection (array).
	 *
	 * By default this just sets the collRoleI18ns collection to an empty array (like clearcollRoleI18ns());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRoleI18ns()
	{
		$this->collRoleI18ns = array();
	}

	/**
	 * Gets an array of RoleI18n objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related RoleI18ns from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RoleI18n[]
	 * @throws     PropelException
	 */
	public function getRoleI18ns($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleI18ns === null) {
			if ($this->isNew()) {
			   $this->collRoleI18ns = array();
			} else {

				$criteria->add(RoleI18nPeer::ID, $this->id);

				RoleI18nPeer::addSelectColumns($criteria);
				$this->collRoleI18ns = RoleI18nPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RoleI18nPeer::ID, $this->id);

				RoleI18nPeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleI18nCriteria) || !$this->lastRoleI18nCriteria->equals($criteria)) {
					$this->collRoleI18ns = RoleI18nPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleI18nCriteria = $criteria;
		return $this->collRoleI18ns;
	}

	/**
	 * Returns the number of related RoleI18n objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RoleI18n objects.
	 * @throws     PropelException
	 */
	public function countRoleI18ns(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRoleI18ns === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RoleI18nPeer::ID, $this->id);

				$count = RoleI18nPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RoleI18nPeer::ID, $this->id);

				if (!isset($this->lastRoleI18nCriteria) || !$this->lastRoleI18nCriteria->equals($criteria)) {
					$count = RoleI18nPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRoleI18ns);
				}
			} else {
				$count = count($this->collRoleI18ns);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RoleI18n object to this object
	 * through the RoleI18n foreign key attribute.
	 *
	 * @param      RoleI18n $l RoleI18n
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoleI18n(RoleI18n $l)
	{
		if ($this->collRoleI18ns === null) {
			$this->initRoleI18ns();
		}
		if (!in_array($l, $this->collRoleI18ns, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRoleI18ns, $l);
			$l->setRole($this);
		}
	}

	/**
	 * Clears out the collRoleMatrixs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRoleMatrixs()
	 */
	public function clearRoleMatrixs()
	{
		$this->collRoleMatrixs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRoleMatrixs collection (array).
	 *
	 * By default this just sets the collRoleMatrixs collection to an empty array (like clearcollRoleMatrixs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRoleMatrixs()
	{
		$this->collRoleMatrixs = array();
	}

	/**
	 * Gets an array of RoleMatrix objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related RoleMatrixs from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RoleMatrix[]
	 * @throws     PropelException
	 */
	public function getRoleMatrixs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleMatrixs === null) {
			if ($this->isNew()) {
			   $this->collRoleMatrixs = array();
			} else {

				$criteria->add(RoleMatrixPeer::ID, $this->id);

				RoleMatrixPeer::addSelectColumns($criteria);
				$this->collRoleMatrixs = RoleMatrixPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RoleMatrixPeer::ID, $this->id);

				RoleMatrixPeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleMatrixCriteria) || !$this->lastRoleMatrixCriteria->equals($criteria)) {
					$this->collRoleMatrixs = RoleMatrixPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleMatrixCriteria = $criteria;
		return $this->collRoleMatrixs;
	}

	/**
	 * Returns the number of related RoleMatrix objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RoleMatrix objects.
	 * @throws     PropelException
	 */
	public function countRoleMatrixs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRoleMatrixs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RoleMatrixPeer::ID, $this->id);

				$count = RoleMatrixPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RoleMatrixPeer::ID, $this->id);

				if (!isset($this->lastRoleMatrixCriteria) || !$this->lastRoleMatrixCriteria->equals($criteria)) {
					$count = RoleMatrixPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRoleMatrixs);
				}
			} else {
				$count = count($this->collRoleMatrixs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RoleMatrix object to this object
	 * through the RoleMatrix foreign key attribute.
	 *
	 * @param      RoleMatrix $l RoleMatrix
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoleMatrix(RoleMatrix $l)
	{
		if ($this->collRoleMatrixs === null) {
			$this->initRoleMatrixs();
		}
		if (!in_array($l, $this->collRoleMatrixs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRoleMatrixs, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related RoleMatrixs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRoleMatrixsJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleMatrixs === null) {
			if ($this->isNew()) {
				$this->collRoleMatrixs = array();
			} else {

				$criteria->add(RoleMatrixPeer::ID, $this->id);

				$this->collRoleMatrixs = RoleMatrixPeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RoleMatrixPeer::ID, $this->id);

			if (!isset($this->lastRoleMatrixCriteria) || !$this->lastRoleMatrixCriteria->equals($criteria)) {
				$this->collRoleMatrixs = RoleMatrixPeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleMatrixCriteria = $criteria;

		return $this->collRoleMatrixs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related RoleMatrixs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRoleMatrixsJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleMatrixs === null) {
			if ($this->isNew()) {
				$this->collRoleMatrixs = array();
			} else {

				$criteria->add(RoleMatrixPeer::ID, $this->id);

				$this->collRoleMatrixs = RoleMatrixPeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RoleMatrixPeer::ID, $this->id);

			if (!isset($this->lastRoleMatrixCriteria) || !$this->lastRoleMatrixCriteria->equals($criteria)) {
				$this->collRoleMatrixs = RoleMatrixPeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleMatrixCriteria = $criteria;

		return $this->collRoleMatrixs;
	}

	/**
	 * Clears out the collLogins collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLogins()
	 */
	public function clearLogins()
	{
		$this->collLogins = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLogins collection (array).
	 *
	 * By default this just sets the collLogins collection to an empty array (like clearcollLogins());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLogins()
	{
		$this->collLogins = array();
	}

	/**
	 * Gets an array of Login objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related Logins from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Login[]
	 * @throws     PropelException
	 */
	public function getLogins($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLogins === null) {
			if ($this->isNew()) {
			   $this->collLogins = array();
			} else {

				$criteria->add(LoginPeer::ROLE_ID, $this->id);

				LoginPeer::addSelectColumns($criteria);
				$this->collLogins = LoginPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LoginPeer::ROLE_ID, $this->id);

				LoginPeer::addSelectColumns($criteria);
				if (!isset($this->lastLoginCriteria) || !$this->lastLoginCriteria->equals($criteria)) {
					$this->collLogins = LoginPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLoginCriteria = $criteria;
		return $this->collLogins;
	}

	/**
	 * Returns the number of related Login objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Login objects.
	 * @throws     PropelException
	 */
	public function countLogins(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLogins === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LoginPeer::ROLE_ID, $this->id);

				$count = LoginPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LoginPeer::ROLE_ID, $this->id);

				if (!isset($this->lastLoginCriteria) || !$this->lastLoginCriteria->equals($criteria)) {
					$count = LoginPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collLogins);
				}
			} else {
				$count = count($this->collLogins);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Login object to this object
	 * through the Login foreign key attribute.
	 *
	 * @param      Login $l Login
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLogin(Login $l)
	{
		if ($this->collLogins === null) {
			$this->initLogins();
		}
		if (!in_array($l, $this->collLogins, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLogins, $l);
			$l->setRole($this);
		}
	}

	/**
	 * Clears out the collPrivacyPreferencesRelatedByRoleOnSubject collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPrivacyPreferencesRelatedByRoleOnSubject()
	 */
	public function clearPrivacyPreferencesRelatedByRoleOnSubject()
	{
		$this->collPrivacyPreferencesRelatedByRoleOnSubject = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPrivacyPreferencesRelatedByRoleOnSubject collection (array).
	 *
	 * By default this just sets the collPrivacyPreferencesRelatedByRoleOnSubject collection to an empty array (like clearcollPrivacyPreferencesRelatedByRoleOnSubject());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPrivacyPreferencesRelatedByRoleOnSubject()
	{
		$this->collPrivacyPreferencesRelatedByRoleOnSubject = array();
	}

	/**
	 * Gets an array of PrivacyPreference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related PrivacyPreferencesRelatedByRoleOnSubject from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PrivacyPreference[]
	 * @throws     PropelException
	 */
	public function getPrivacyPreferencesRelatedByRoleOnSubject($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByRoleOnSubject === null) {
			if ($this->isNew()) {
			   $this->collPrivacyPreferencesRelatedByRoleOnSubject = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				$this->collPrivacyPreferencesRelatedByRoleOnSubject = PrivacyPreferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria->equals($criteria)) {
					$this->collPrivacyPreferencesRelatedByRoleOnSubject = PrivacyPreferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria = $criteria;
		return $this->collPrivacyPreferencesRelatedByRoleOnSubject;
	}

	/**
	 * Returns the number of related PrivacyPreference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PrivacyPreference objects.
	 * @throws     PropelException
	 */
	public function countPrivacyPreferencesRelatedByRoleOnSubject(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPrivacyPreferencesRelatedByRoleOnSubject === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

				$count = PrivacyPreferencePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

				if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria->equals($criteria)) {
					$count = PrivacyPreferencePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPrivacyPreferencesRelatedByRoleOnSubject);
				}
			} else {
				$count = count($this->collPrivacyPreferencesRelatedByRoleOnSubject);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PrivacyPreference object to this object
	 * through the PrivacyPreference foreign key attribute.
	 *
	 * @param      PrivacyPreference $l PrivacyPreference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPrivacyPreferenceRelatedByRoleOnSubject(PrivacyPreference $l)
	{
		if ($this->collPrivacyPreferencesRelatedByRoleOnSubject === null) {
			$this->initPrivacyPreferencesRelatedByRoleOnSubject();
		}
		if (!in_array($l, $this->collPrivacyPreferencesRelatedByRoleOnSubject, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPrivacyPreferencesRelatedByRoleOnSubject, $l);
			$l->setRoleRelatedByRoleOnSubject($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByRoleOnSubject from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getPrivacyPreferencesRelatedByRoleOnSubjectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByRoleOnSubject === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByRoleOnSubject = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

				$this->collPrivacyPreferencesRelatedByRoleOnSubject = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByRoleOnSubject = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByRoleOnSubject;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByRoleOnSubject from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getPrivacyPreferencesRelatedByRoleOnSubjectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByRoleOnSubject === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByRoleOnSubject = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

				$this->collPrivacyPreferencesRelatedByRoleOnSubject = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByRoleOnSubject = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByRoleOnSubject;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByRoleOnSubject from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getPrivacyPreferencesRelatedByRoleOnSubjectJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByRoleOnSubject === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByRoleOnSubject = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

				$this->collPrivacyPreferencesRelatedByRoleOnSubject = PrivacyPreferencePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ROLE_ON_SUBJECT, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByRoleOnSubject = PrivacyPreferencePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByRoleOnSubjectCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByRoleOnSubject;
	}

	/**
	 * Clears out the collPrivacyPreferencesRelatedByRoleOnObject collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPrivacyPreferencesRelatedByRoleOnObject()
	 */
	public function clearPrivacyPreferencesRelatedByRoleOnObject()
	{
		$this->collPrivacyPreferencesRelatedByRoleOnObject = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPrivacyPreferencesRelatedByRoleOnObject collection (array).
	 *
	 * By default this just sets the collPrivacyPreferencesRelatedByRoleOnObject collection to an empty array (like clearcollPrivacyPreferencesRelatedByRoleOnObject());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPrivacyPreferencesRelatedByRoleOnObject()
	{
		$this->collPrivacyPreferencesRelatedByRoleOnObject = array();
	}

	/**
	 * Gets an array of PrivacyPreference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related PrivacyPreferencesRelatedByRoleOnObject from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PrivacyPreference[]
	 * @throws     PropelException
	 */
	public function getPrivacyPreferencesRelatedByRoleOnObject($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByRoleOnObject === null) {
			if ($this->isNew()) {
			   $this->collPrivacyPreferencesRelatedByRoleOnObject = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				$this->collPrivacyPreferencesRelatedByRoleOnObject = PrivacyPreferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

				PrivacyPreferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria->equals($criteria)) {
					$this->collPrivacyPreferencesRelatedByRoleOnObject = PrivacyPreferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria = $criteria;
		return $this->collPrivacyPreferencesRelatedByRoleOnObject;
	}

	/**
	 * Returns the number of related PrivacyPreference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PrivacyPreference objects.
	 * @throws     PropelException
	 */
	public function countPrivacyPreferencesRelatedByRoleOnObject(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPrivacyPreferencesRelatedByRoleOnObject === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

				$count = PrivacyPreferencePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

				if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria->equals($criteria)) {
					$count = PrivacyPreferencePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPrivacyPreferencesRelatedByRoleOnObject);
				}
			} else {
				$count = count($this->collPrivacyPreferencesRelatedByRoleOnObject);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PrivacyPreference object to this object
	 * through the PrivacyPreference foreign key attribute.
	 *
	 * @param      PrivacyPreference $l PrivacyPreference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPrivacyPreferenceRelatedByRoleOnObject(PrivacyPreference $l)
	{
		if ($this->collPrivacyPreferencesRelatedByRoleOnObject === null) {
			$this->initPrivacyPreferencesRelatedByRoleOnObject();
		}
		if (!in_array($l, $this->collPrivacyPreferencesRelatedByRoleOnObject, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPrivacyPreferencesRelatedByRoleOnObject, $l);
			$l->setRoleRelatedByRoleOnObject($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByRoleOnObject from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getPrivacyPreferencesRelatedByRoleOnObjectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByRoleOnObject === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByRoleOnObject = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

				$this->collPrivacyPreferencesRelatedByRoleOnObject = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByRoleOnObject = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByRoleOnObject;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByRoleOnObject from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getPrivacyPreferencesRelatedByRoleOnObjectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByRoleOnObject === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByRoleOnObject = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

				$this->collPrivacyPreferencesRelatedByRoleOnObject = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByRoleOnObject = PrivacyPreferencePeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByRoleOnObject;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related PrivacyPreferencesRelatedByRoleOnObject from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getPrivacyPreferencesRelatedByRoleOnObjectJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPrivacyPreferencesRelatedByRoleOnObject === null) {
			if ($this->isNew()) {
				$this->collPrivacyPreferencesRelatedByRoleOnObject = array();
			} else {

				$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

				$this->collPrivacyPreferencesRelatedByRoleOnObject = PrivacyPreferencePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PrivacyPreferencePeer::ROLE_ON_OBJECT, $this->id);

			if (!isset($this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria) || !$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria->equals($criteria)) {
				$this->collPrivacyPreferencesRelatedByRoleOnObject = PrivacyPreferencePeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastPrivacyPreferenceRelatedByRoleOnObjectCriteria = $criteria;

		return $this->collPrivacyPreferencesRelatedByRoleOnObject;
	}

	/**
	 * Clears out the collRoleAssignments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRoleAssignments()
	 */
	public function clearRoleAssignments()
	{
		$this->collRoleAssignments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRoleAssignments collection (array).
	 *
	 * By default this just sets the collRoleAssignments collection to an empty array (like clearcollRoleAssignments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRoleAssignments()
	{
		$this->collRoleAssignments = array();
	}

	/**
	 * Gets an array of RoleAssignment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related RoleAssignments from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RoleAssignment[]
	 * @throws     PropelException
	 */
	public function getRoleAssignments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleAssignments === null) {
			if ($this->isNew()) {
			   $this->collRoleAssignments = array();
			} else {

				$criteria->add(RoleAssignmentPeer::ROLE_ID, $this->id);

				RoleAssignmentPeer::addSelectColumns($criteria);
				$this->collRoleAssignments = RoleAssignmentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RoleAssignmentPeer::ROLE_ID, $this->id);

				RoleAssignmentPeer::addSelectColumns($criteria);
				if (!isset($this->lastRoleAssignmentCriteria) || !$this->lastRoleAssignmentCriteria->equals($criteria)) {
					$this->collRoleAssignments = RoleAssignmentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoleAssignmentCriteria = $criteria;
		return $this->collRoleAssignments;
	}

	/**
	 * Returns the number of related RoleAssignment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RoleAssignment objects.
	 * @throws     PropelException
	 */
	public function countRoleAssignments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRoleAssignments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RoleAssignmentPeer::ROLE_ID, $this->id);

				$count = RoleAssignmentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RoleAssignmentPeer::ROLE_ID, $this->id);

				if (!isset($this->lastRoleAssignmentCriteria) || !$this->lastRoleAssignmentCriteria->equals($criteria)) {
					$count = RoleAssignmentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRoleAssignments);
				}
			} else {
				$count = count($this->collRoleAssignments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RoleAssignment object to this object
	 * through the RoleAssignment foreign key attribute.
	 *
	 * @param      RoleAssignment $l RoleAssignment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoleAssignment(RoleAssignment $l)
	{
		if ($this->collRoleAssignments === null) {
			$this->initRoleAssignments();
		}
		if (!in_array($l, $this->collRoleAssignments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRoleAssignments, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related RoleAssignments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRoleAssignmentsJoinLogin($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRoleAssignments === null) {
			if ($this->isNew()) {
				$this->collRoleAssignments = array();
			} else {

				$criteria->add(RoleAssignmentPeer::ROLE_ID, $this->id);

				$this->collRoleAssignments = RoleAssignmentPeer::doSelectJoinLogin($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RoleAssignmentPeer::ROLE_ID, $this->id);

			if (!isset($this->lastRoleAssignmentCriteria) || !$this->lastRoleAssignmentCriteria->equals($criteria)) {
				$this->collRoleAssignments = RoleAssignmentPeer::doSelectJoinLogin($criteria, $con, $join_behavior);
			}
		}
		$this->lastRoleAssignmentCriteria = $criteria;

		return $this->collRoleAssignments;
	}

	/**
	 * Clears out the collCompanyLogins collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanyLogins()
	 */
	public function clearCompanyLogins()
	{
		$this->collCompanyLogins = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanyLogins collection (array).
	 *
	 * By default this just sets the collCompanyLogins collection to an empty array (like clearcollCompanyLogins());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanyLogins()
	{
		$this->collCompanyLogins = array();
	}

	/**
	 * Gets an array of CompanyLogin objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related CompanyLogins from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompanyLogin[]
	 * @throws     PropelException
	 */
	public function getCompanyLogins($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
			   $this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::ROLE_ID, $this->id);

				CompanyLoginPeer::addSelectColumns($criteria);
				$this->collCompanyLogins = CompanyLoginPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyLoginPeer::ROLE_ID, $this->id);

				CompanyLoginPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
					$this->collCompanyLogins = CompanyLoginPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;
		return $this->collCompanyLogins;
	}

	/**
	 * Returns the number of related CompanyLogin objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompanyLogin objects.
	 * @throws     PropelException
	 */
	public function countCompanyLogins(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyLoginPeer::ROLE_ID, $this->id);

				$count = CompanyLoginPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyLoginPeer::ROLE_ID, $this->id);

				if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
					$count = CompanyLoginPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanyLogins);
				}
			} else {
				$count = count($this->collCompanyLogins);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompanyLogin object to this object
	 * through the CompanyLogin foreign key attribute.
	 *
	 * @param      CompanyLogin $l CompanyLogin
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanyLogin(CompanyLogin $l)
	{
		if ($this->collCompanyLogins === null) {
			$this->initCompanyLogins();
		}
		if (!in_array($l, $this->collCompanyLogins, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanyLogins, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related CompanyLogins from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getCompanyLoginsJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::ROLE_ID, $this->id);

				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyLoginPeer::ROLE_ID, $this->id);

			if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;

		return $this->collCompanyLogins;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related CompanyLogins from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getCompanyLoginsJoinLogin($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::ROLE_ID, $this->id);

				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinLogin($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyLoginPeer::ROLE_ID, $this->id);

			if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinLogin($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;

		return $this->collCompanyLogins;
	}

	/**
	 * Clears out the collCompanyUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanyUsers()
	 */
	public function clearCompanyUsers()
	{
		$this->collCompanyUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanyUsers collection (array).
	 *
	 * By default this just sets the collCompanyUsers collection to an empty array (like clearcollCompanyUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanyUsers()
	{
		$this->collCompanyUsers = array();
	}

	/**
	 * Gets an array of CompanyUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related CompanyUsers from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompanyUser[]
	 * @throws     PropelException
	 */
	public function getCompanyUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
			   $this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::ROLE_ID, $this->id);

				CompanyUserPeer::addSelectColumns($criteria);
				$this->collCompanyUsers = CompanyUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyUserPeer::ROLE_ID, $this->id);

				CompanyUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
					$this->collCompanyUsers = CompanyUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyUserCriteria = $criteria;
		return $this->collCompanyUsers;
	}

	/**
	 * Returns the number of related CompanyUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompanyUser objects.
	 * @throws     PropelException
	 */
	public function countCompanyUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyUserPeer::ROLE_ID, $this->id);

				$count = CompanyUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyUserPeer::ROLE_ID, $this->id);

				if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
					$count = CompanyUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanyUsers);
				}
			} else {
				$count = count($this->collCompanyUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompanyUser object to this object
	 * through the CompanyUser foreign key attribute.
	 *
	 * @param      CompanyUser $l CompanyUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanyUser(CompanyUser $l)
	{
		if ($this->collCompanyUsers === null) {
			$this->initCompanyUsers();
		}
		if (!in_array($l, $this->collCompanyUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanyUsers, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related CompanyUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getCompanyUsersJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::ROLE_ID, $this->id);

				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyUserPeer::ROLE_ID, $this->id);

			if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyUserCriteria = $criteria;

		return $this->collCompanyUsers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related CompanyUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getCompanyUsersJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::ROLE_ID, $this->id);

				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyUserPeer::ROLE_ID, $this->id);

			if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyUserCriteria = $criteria;

		return $this->collCompanyUsers;
	}

	/**
	 * Clears out the collRelations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelations()
	 */
	public function clearRelations()
	{
		$this->collRelations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelations collection (array).
	 *
	 * By default this just sets the collRelations collection to an empty array (like clearcollRelations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelations()
	{
		$this->collRelations = array();
	}

	/**
	 * Gets an array of Relation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related Relations from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Relation[]
	 * @throws     PropelException
	 */
	public function getRelations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelations === null) {
			if ($this->isNew()) {
			   $this->collRelations = array();
			} else {

				$criteria->add(RelationPeer::ROLE_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				$this->collRelations = RelationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationPeer::ROLE_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationCriteria) || !$this->lastRelationCriteria->equals($criteria)) {
					$this->collRelations = RelationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationCriteria = $criteria;
		return $this->collRelations;
	}

	/**
	 * Returns the number of related Relation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Relation objects.
	 * @throws     PropelException
	 */
	public function countRelations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationPeer::ROLE_ID, $this->id);

				$count = RelationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationPeer::ROLE_ID, $this->id);

				if (!isset($this->lastRelationCriteria) || !$this->lastRelationCriteria->equals($criteria)) {
					$count = RelationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelations);
				}
			} else {
				$count = count($this->collRelations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Relation object to this object
	 * through the Relation foreign key attribute.
	 *
	 * @param      Relation $l Relation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelation(Relation $l)
	{
		if ($this->collRelations === null) {
			$this->initRelations();
		}
		if (!in_array($l, $this->collRelations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelations, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related Relations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRelationsJoinUserRelatedByUserId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelations === null) {
			if ($this->isNew()) {
				$this->collRelations = array();
			} else {

				$criteria->add(RelationPeer::ROLE_ID, $this->id);

				$this->collRelations = RelationPeer::doSelectJoinUserRelatedByUserId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::ROLE_ID, $this->id);

			if (!isset($this->lastRelationCriteria) || !$this->lastRelationCriteria->equals($criteria)) {
				$this->collRelations = RelationPeer::doSelectJoinUserRelatedByUserId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationCriteria = $criteria;

		return $this->collRelations;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related Relations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRelationsJoinCompanyRelatedByCompanyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelations === null) {
			if ($this->isNew()) {
				$this->collRelations = array();
			} else {

				$criteria->add(RelationPeer::ROLE_ID, $this->id);

				$this->collRelations = RelationPeer::doSelectJoinCompanyRelatedByCompanyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::ROLE_ID, $this->id);

			if (!isset($this->lastRelationCriteria) || !$this->lastRelationCriteria->equals($criteria)) {
				$this->collRelations = RelationPeer::doSelectJoinCompanyRelatedByCompanyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationCriteria = $criteria;

		return $this->collRelations;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related Relations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRelationsJoinUserRelatedByRelatedUserId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelations === null) {
			if ($this->isNew()) {
				$this->collRelations = array();
			} else {

				$criteria->add(RelationPeer::ROLE_ID, $this->id);

				$this->collRelations = RelationPeer::doSelectJoinUserRelatedByRelatedUserId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::ROLE_ID, $this->id);

			if (!isset($this->lastRelationCriteria) || !$this->lastRelationCriteria->equals($criteria)) {
				$this->collRelations = RelationPeer::doSelectJoinUserRelatedByRelatedUserId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationCriteria = $criteria;

		return $this->collRelations;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related Relations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRelationsJoinCompanyRelatedByRelatedCompanyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelations === null) {
			if ($this->isNew()) {
				$this->collRelations = array();
			} else {

				$criteria->add(RelationPeer::ROLE_ID, $this->id);

				$this->collRelations = RelationPeer::doSelectJoinCompanyRelatedByRelatedCompanyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::ROLE_ID, $this->id);

			if (!isset($this->lastRelationCriteria) || !$this->lastRelationCriteria->equals($criteria)) {
				$this->collRelations = RelationPeer::doSelectJoinCompanyRelatedByRelatedCompanyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationCriteria = $criteria;

		return $this->collRelations;
	}

	/**
	 * Clears out the collGroupMemberships collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGroupMemberships()
	 */
	public function clearGroupMemberships()
	{
		$this->collGroupMemberships = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGroupMemberships collection (array).
	 *
	 * By default this just sets the collGroupMemberships collection to an empty array (like clearcollGroupMemberships());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGroupMemberships()
	{
		$this->collGroupMemberships = array();
	}

	/**
	 * Gets an array of GroupMembership objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related GroupMemberships from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GroupMembership[]
	 * @throws     PropelException
	 */
	public function getGroupMemberships($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMemberships === null) {
			if ($this->isNew()) {
			   $this->collGroupMemberships = array();
			} else {

				$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

				GroupMembershipPeer::addSelectColumns($criteria);
				$this->collGroupMemberships = GroupMembershipPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

				GroupMembershipPeer::addSelectColumns($criteria);
				if (!isset($this->lastGroupMembershipCriteria) || !$this->lastGroupMembershipCriteria->equals($criteria)) {
					$this->collGroupMemberships = GroupMembershipPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGroupMembershipCriteria = $criteria;
		return $this->collGroupMemberships;
	}

	/**
	 * Returns the number of related GroupMembership objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GroupMembership objects.
	 * @throws     PropelException
	 */
	public function countGroupMemberships(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGroupMemberships === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

				$count = GroupMembershipPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

				if (!isset($this->lastGroupMembershipCriteria) || !$this->lastGroupMembershipCriteria->equals($criteria)) {
					$count = GroupMembershipPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collGroupMemberships);
				}
			} else {
				$count = count($this->collGroupMemberships);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GroupMembership object to this object
	 * through the GroupMembership foreign key attribute.
	 *
	 * @param      GroupMembership $l GroupMembership
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGroupMembership(GroupMembership $l)
	{
		if ($this->collGroupMemberships === null) {
			$this->initGroupMemberships();
		}
		if (!in_array($l, $this->collGroupMemberships, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGroupMemberships, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related GroupMemberships from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getGroupMembershipsJoinPrivacyNodeTypeRelatedByInviterTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMemberships === null) {
			if ($this->isNew()) {
				$this->collGroupMemberships = array();
			} else {

				$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

				$this->collGroupMemberships = GroupMembershipPeer::doSelectJoinPrivacyNodeTypeRelatedByInviterTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

			if (!isset($this->lastGroupMembershipCriteria) || !$this->lastGroupMembershipCriteria->equals($criteria)) {
				$this->collGroupMemberships = GroupMembershipPeer::doSelectJoinPrivacyNodeTypeRelatedByInviterTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupMembershipCriteria = $criteria;

		return $this->collGroupMemberships;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related GroupMemberships from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getGroupMembershipsJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMemberships === null) {
			if ($this->isNew()) {
				$this->collGroupMemberships = array();
			} else {

				$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

				$this->collGroupMemberships = GroupMembershipPeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

			if (!isset($this->lastGroupMembershipCriteria) || !$this->lastGroupMembershipCriteria->equals($criteria)) {
				$this->collGroupMemberships = GroupMembershipPeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupMembershipCriteria = $criteria;

		return $this->collGroupMemberships;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related GroupMemberships from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getGroupMembershipsJoinGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupMemberships === null) {
			if ($this->isNew()) {
				$this->collGroupMemberships = array();
			} else {

				$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

				$this->collGroupMemberships = GroupMembershipPeer::doSelectJoinGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupMembershipPeer::ROLE_ID, $this->id);

			if (!isset($this->lastGroupMembershipCriteria) || !$this->lastGroupMembershipCriteria->equals($criteria)) {
				$this->collGroupMemberships = GroupMembershipPeer::doSelectJoinGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupMembershipCriteria = $criteria;

		return $this->collGroupMemberships;
	}

	/**
	 * Clears out the collRelationUpdates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelationUpdates()
	 */
	public function clearRelationUpdates()
	{
		$this->collRelationUpdates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelationUpdates collection (array).
	 *
	 * By default this just sets the collRelationUpdates collection to an empty array (like clearcollRelationUpdates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelationUpdates()
	{
		$this->collRelationUpdates = array();
	}

	/**
	 * Gets an array of RelationUpdate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related RelationUpdates from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RelationUpdate[]
	 * @throws     PropelException
	 */
	public function getRelationUpdates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationUpdates === null) {
			if ($this->isNew()) {
			   $this->collRelationUpdates = array();
			} else {

				$criteria->add(RelationUpdatePeer::ROLE_ID, $this->id);

				RelationUpdatePeer::addSelectColumns($criteria);
				$this->collRelationUpdates = RelationUpdatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationUpdatePeer::ROLE_ID, $this->id);

				RelationUpdatePeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationUpdateCriteria) || !$this->lastRelationUpdateCriteria->equals($criteria)) {
					$this->collRelationUpdates = RelationUpdatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationUpdateCriteria = $criteria;
		return $this->collRelationUpdates;
	}

	/**
	 * Returns the number of related RelationUpdate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RelationUpdate objects.
	 * @throws     PropelException
	 */
	public function countRelationUpdates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelationUpdates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationUpdatePeer::ROLE_ID, $this->id);

				$count = RelationUpdatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationUpdatePeer::ROLE_ID, $this->id);

				if (!isset($this->lastRelationUpdateCriteria) || !$this->lastRelationUpdateCriteria->equals($criteria)) {
					$count = RelationUpdatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelationUpdates);
				}
			} else {
				$count = count($this->collRelationUpdates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RelationUpdate object to this object
	 * through the RelationUpdate foreign key attribute.
	 *
	 * @param      RelationUpdate $l RelationUpdate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelationUpdate(RelationUpdate $l)
	{
		if ($this->collRelationUpdates === null) {
			$this->initRelationUpdates();
		}
		if (!in_array($l, $this->collRelationUpdates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelationUpdates, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related RelationUpdates from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRelationUpdatesJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationUpdates === null) {
			if ($this->isNew()) {
				$this->collRelationUpdates = array();
			} else {

				$criteria->add(RelationUpdatePeer::ROLE_ID, $this->id);

				$this->collRelationUpdates = RelationUpdatePeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationUpdatePeer::ROLE_ID, $this->id);

			if (!isset($this->lastRelationUpdateCriteria) || !$this->lastRelationUpdateCriteria->equals($criteria)) {
				$this->collRelationUpdates = RelationUpdatePeer::doSelectJoinPrivacyNodeTypeRelatedBySubjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationUpdateCriteria = $criteria;

		return $this->collRelationUpdates;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related RelationUpdates from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getRelationUpdatesJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationUpdates === null) {
			if ($this->isNew()) {
				$this->collRelationUpdates = array();
			} else {

				$criteria->add(RelationUpdatePeer::ROLE_ID, $this->id);

				$this->collRelationUpdates = RelationUpdatePeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationUpdatePeer::ROLE_ID, $this->id);

			if (!isset($this->lastRelationUpdateCriteria) || !$this->lastRelationUpdateCriteria->equals($criteria)) {
				$this->collRelationUpdates = RelationUpdatePeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationUpdateCriteria = $criteria;

		return $this->collRelationUpdates;
	}

	/**
	 * Clears out the collWallPosts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addWallPosts()
	 */
	public function clearWallPosts()
	{
		$this->collWallPosts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collWallPosts collection (array).
	 *
	 * By default this just sets the collWallPosts collection to an empty array (like clearcollWallPosts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initWallPosts()
	{
		$this->collWallPosts = array();
	}

	/**
	 * Gets an array of WallPost objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related WallPosts from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array WallPost[]
	 * @throws     PropelException
	 */
	public function getWallPosts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPosts === null) {
			if ($this->isNew()) {
			   $this->collWallPosts = array();
			} else {

				$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

				WallPostPeer::addSelectColumns($criteria);
				$this->collWallPosts = WallPostPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

				WallPostPeer::addSelectColumns($criteria);
				if (!isset($this->lastWallPostCriteria) || !$this->lastWallPostCriteria->equals($criteria)) {
					$this->collWallPosts = WallPostPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastWallPostCriteria = $criteria;
		return $this->collWallPosts;
	}

	/**
	 * Returns the number of related WallPost objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related WallPost objects.
	 * @throws     PropelException
	 */
	public function countWallPosts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collWallPosts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

				$count = WallPostPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

				if (!isset($this->lastWallPostCriteria) || !$this->lastWallPostCriteria->equals($criteria)) {
					$count = WallPostPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collWallPosts);
				}
			} else {
				$count = count($this->collWallPosts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a WallPost object to this object
	 * through the WallPost foreign key attribute.
	 *
	 * @param      WallPost $l WallPost
	 * @return     void
	 * @throws     PropelException
	 */
	public function addWallPost(WallPost $l)
	{
		if ($this->collWallPosts === null) {
			$this->initWallPosts();
		}
		if (!in_array($l, $this->collWallPosts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collWallPosts, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related WallPosts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getWallPostsJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPosts === null) {
			if ($this->isNew()) {
				$this->collWallPosts = array();
			} else {

				$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

				$this->collWallPosts = WallPostPeer::doSelectJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

			if (!isset($this->lastWallPostCriteria) || !$this->lastWallPostCriteria->equals($criteria)) {
				$this->collWallPosts = WallPostPeer::doSelectJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallPostCriteria = $criteria;

		return $this->collWallPosts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related WallPosts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getWallPostsJoinPrivacyNodeTypeRelatedByPosterTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPosts === null) {
			if ($this->isNew()) {
				$this->collWallPosts = array();
			} else {

				$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

				$this->collWallPosts = WallPostPeer::doSelectJoinPrivacyNodeTypeRelatedByPosterTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

			if (!isset($this->lastWallPostCriteria) || !$this->lastWallPostCriteria->equals($criteria)) {
				$this->collWallPosts = WallPostPeer::doSelectJoinPrivacyNodeTypeRelatedByPosterTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallPostCriteria = $criteria;

		return $this->collWallPosts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related WallPosts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getWallPostsJoinPrivacyNodeTypeRelatedByItemTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallPosts === null) {
			if ($this->isNew()) {
				$this->collWallPosts = array();
			} else {

				$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

				$this->collWallPosts = WallPostPeer::doSelectJoinPrivacyNodeTypeRelatedByItemTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallPostPeer::TARGET_AUDIENCE, $this->id);

			if (!isset($this->lastWallPostCriteria) || !$this->lastWallPostCriteria->equals($criteria)) {
				$this->collWallPosts = WallPostPeer::doSelectJoinPrivacyNodeTypeRelatedByItemTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallPostCriteria = $criteria;

		return $this->collWallPosts;
	}

	/**
	 * Clears out the collMarketingPackagePrices collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMarketingPackagePrices()
	 */
	public function clearMarketingPackagePrices()
	{
		$this->collMarketingPackagePrices = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMarketingPackagePrices collection (array).
	 *
	 * By default this just sets the collMarketingPackagePrices collection to an empty array (like clearcollMarketingPackagePrices());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMarketingPackagePrices()
	{
		$this->collMarketingPackagePrices = array();
	}

	/**
	 * Gets an array of MarketingPackagePrice objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related MarketingPackagePrices from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MarketingPackagePrice[]
	 * @throws     PropelException
	 */
	public function getMarketingPackagePrices($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
			   $this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

				MarketingPackagePricePeer::addSelectColumns($criteria);
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

				MarketingPackagePricePeer::addSelectColumns($criteria);
				if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
					$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;
		return $this->collMarketingPackagePrices;
	}

	/**
	 * Returns the number of related MarketingPackagePrice objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MarketingPackagePrice objects.
	 * @throws     PropelException
	 */
	public function countMarketingPackagePrices(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

				$count = MarketingPackagePricePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

				if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
					$count = MarketingPackagePricePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMarketingPackagePrices);
				}
			} else {
				$count = count($this->collMarketingPackagePrices);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MarketingPackagePrice object to this object
	 * through the MarketingPackagePrice foreign key attribute.
	 *
	 * @param      MarketingPackagePrice $l MarketingPackagePrice
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMarketingPackagePrice(MarketingPackagePrice $l)
	{
		if ($this->collMarketingPackagePrices === null) {
			$this->initMarketingPackagePrices();
		}
		if (!in_array($l, $this->collMarketingPackagePrices, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMarketingPackagePrices, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related MarketingPackagePrices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getMarketingPackagePricesJoinMarketingPackage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinMarketingPackage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinMarketingPackage($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;

		return $this->collMarketingPackagePrices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related MarketingPackagePrices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getMarketingPackagePricesJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinPrivacyNodeTypeRelatedByTargetTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;

		return $this->collMarketingPackagePrices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related MarketingPackagePrices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getMarketingPackagePricesJoinPrivacyNodeTypeRelatedByReferenceTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinPrivacyNodeTypeRelatedByReferenceTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinPrivacyNodeTypeRelatedByReferenceTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;

		return $this->collMarketingPackagePrices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related MarketingPackagePrices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getMarketingPackagePricesJoinGeonameCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMarketingPackagePrices === null) {
			if ($this->isNew()) {
				$this->collMarketingPackagePrices = array();
			} else {

				$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MarketingPackagePricePeer::ROLE_ID, $this->id);

			if (!isset($this->lastMarketingPackagePriceCriteria) || !$this->lastMarketingPackagePriceCriteria->equals($criteria)) {
				$this->collMarketingPackagePrices = MarketingPackagePricePeer::doSelectJoinGeonameCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastMarketingPackagePriceCriteria = $criteria;

		return $this->collMarketingPackagePrices;
	}

	/**
	 * Clears out the collTasks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTasks()
	 */
	public function clearTasks()
	{
		$this->collTasks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTasks collection (array).
	 *
	 * By default this just sets the collTasks collection to an empty array (like clearcollTasks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTasks()
	{
		$this->collTasks = array();
	}

	/**
	 * Gets an array of Task objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Role has previously been saved, it will retrieve
	 * related Tasks from storage. If this Role is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Task[]
	 * @throws     PropelException
	 */
	public function getTasks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasks === null) {
			if ($this->isNew()) {
			   $this->collTasks = array();
			} else {

				$criteria->add(TaskPeer::ROLE_ID, $this->id);

				TaskPeer::addSelectColumns($criteria);
				$this->collTasks = TaskPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TaskPeer::ROLE_ID, $this->id);

				TaskPeer::addSelectColumns($criteria);
				if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
					$this->collTasks = TaskPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTaskCriteria = $criteria;
		return $this->collTasks;
	}

	/**
	 * Returns the number of related Task objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Task objects.
	 * @throws     PropelException
	 */
	public function countTasks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTasks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TaskPeer::ROLE_ID, $this->id);

				$count = TaskPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TaskPeer::ROLE_ID, $this->id);

				if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
					$count = TaskPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTasks);
				}
			} else {
				$count = count($this->collTasks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Task object to this object
	 * through the Task foreign key attribute.
	 *
	 * @param      Task $l Task
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTask(Task $l)
	{
		if ($this->collTasks === null) {
			$this->initTasks();
		}
		if (!in_array($l, $this->collTasks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTasks, $l);
			$l->setRole($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related Tasks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getTasksJoinPrivacyNodeTypeRelatedByStaffTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasks === null) {
			if ($this->isNew()) {
				$this->collTasks = array();
			} else {

				$criteria->add(TaskPeer::ROLE_ID, $this->id);

				$this->collTasks = TaskPeer::doSelectJoinPrivacyNodeTypeRelatedByStaffTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::ROLE_ID, $this->id);

			if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
				$this->collTasks = TaskPeer::doSelectJoinPrivacyNodeTypeRelatedByStaffTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskCriteria = $criteria;

		return $this->collTasks;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related Tasks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getTasksJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasks === null) {
			if ($this->isNew()) {
				$this->collTasks = array();
			} else {

				$criteria->add(TaskPeer::ROLE_ID, $this->id);

				$this->collTasks = TaskPeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::ROLE_ID, $this->id);

			if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
				$this->collTasks = TaskPeer::doSelectJoinPrivacyNodeTypeRelatedByObjectTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskCriteria = $criteria;

		return $this->collTasks;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Role is new, it will return
	 * an empty collection; or if this Role has previously
	 * been saved, it will retrieve related Tasks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Role.
	 */
	public function getTasksJoinAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RolePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasks === null) {
			if ($this->isNew()) {
				$this->collTasks = array();
			} else {

				$criteria->add(TaskPeer::ROLE_ID, $this->id);

				$this->collTasks = TaskPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TaskPeer::ROLE_ID, $this->id);

			if (!isset($this->lastTaskCriteria) || !$this->lastTaskCriteria->equals($criteria)) {
				$this->collTasks = TaskPeer::doSelectJoinAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastTaskCriteria = $criteria;

		return $this->collTasks;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collRolesRelatedByParentId) {
				foreach ((array) $this->collRolesRelatedByParentId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRolesRelatedByOppositeRoleId) {
				foreach ((array) $this->collRolesRelatedByOppositeRoleId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRoleI18ns) {
				foreach ((array) $this->collRoleI18ns as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRoleMatrixs) {
				foreach ((array) $this->collRoleMatrixs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLogins) {
				foreach ((array) $this->collLogins as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPrivacyPreferencesRelatedByRoleOnSubject) {
				foreach ((array) $this->collPrivacyPreferencesRelatedByRoleOnSubject as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPrivacyPreferencesRelatedByRoleOnObject) {
				foreach ((array) $this->collPrivacyPreferencesRelatedByRoleOnObject as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRoleAssignments) {
				foreach ((array) $this->collRoleAssignments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanyLogins) {
				foreach ((array) $this->collCompanyLogins as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanyUsers) {
				foreach ((array) $this->collCompanyUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRelations) {
				foreach ((array) $this->collRelations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGroupMemberships) {
				foreach ((array) $this->collGroupMemberships as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRelationUpdates) {
				foreach ((array) $this->collRelationUpdates as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collWallPosts) {
				foreach ((array) $this->collWallPosts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMarketingPackagePrices) {
				foreach ((array) $this->collMarketingPackagePrices as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTasks) {
				foreach ((array) $this->collTasks as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collRolesRelatedByParentId = null;
		$this->collRolesRelatedByOppositeRoleId = null;
		$this->collRoleI18ns = null;
		$this->collRoleMatrixs = null;
		$this->collLogins = null;
		$this->collPrivacyPreferencesRelatedByRoleOnSubject = null;
		$this->collPrivacyPreferencesRelatedByRoleOnObject = null;
		$this->collRoleAssignments = null;
		$this->collCompanyLogins = null;
		$this->collCompanyUsers = null;
		$this->collRelations = null;
		$this->collGroupMemberships = null;
		$this->collRelationUpdates = null;
		$this->collWallPosts = null;
		$this->collMarketingPackagePrices = null;
		$this->collTasks = null;
			$this->aRoleRelatedByParentId = null;
			$this->aPrivacyNodeType = null;
			$this->aRoleRelatedByOppositeRoleId = null;
	}


  /**
   * Returns the culture.
   *
   * @return string The culture
   */
  public function getCulture()
  {
    return $this->culture;
  }

  /**
   * Sets the culture.
   *
   * @param string $culture The culture to set
   *
   * @return void
   */
  public function setCulture($culture)
  {
    $this->culture = $culture;
  }

  public function getName($culture = null)
  {
    return $this->getCurrentRoleI18n($culture)->getName();
  }

  public function setName($value, $culture = null)
  {
    $this->getCurrentRoleI18n($culture)->setName($value);
  }

  public function getDescription($culture = null)
  {
    return $this->getCurrentRoleI18n($culture)->getDescription();
  }

  public function setDescription($value, $culture = null)
  {
    $this->getCurrentRoleI18n($culture)->setDescription($value);
  }

  protected $current_i18n = array();

  public function getCurrentRoleI18n($culture = null)
  {
    if (is_null($culture))
    {
      $culture = is_null($this->culture) ? sfPropel::getDefaultCulture() : $this->culture;
    }

    if (!isset($this->current_i18n[$culture]))
    {
      $obj = RoleI18nPeer::retrieveByPK($this->getId(), $culture);
      if ($obj)
      {
        $this->setRoleI18nForCulture($obj, $culture);
      }
      else
      {
        $this->setRoleI18nForCulture(new RoleI18n(), $culture);
        $this->current_i18n[$culture]->setCulture($culture);
      }
    }

    return $this->current_i18n[$culture];
  }

  public function setRoleI18nForCulture($object, $culture)
  {
    $this->current_i18n[$culture] = $object;
    $this->addRoleI18n($object);
  }


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRole:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRole::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRole
