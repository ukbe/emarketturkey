<?php

/**
 * Base class that represents a row from the 'EMT_COMPANY' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/10/12 16:10:15
 *
 * @package    lib.model.om
 */
abstract class BaseCompany extends BaseObject  implements Persistent {


  const PEER = 'CompanyPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CompanyPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the business_type_id field.
	 * @var        int
	 */
	protected $business_type_id;

	/**
	 * The value for the profile_id field.
	 * @var        int
	 */
	protected $profile_id;

	/**
	 * The value for the sector_id field.
	 * @var        int
	 */
	protected $sector_id;

	/**
	 * The value for the url field.
	 * @var        string
	 */
	protected $url;

	/**
	 * The value for the brands field.
	 * @var        string
	 */
	protected $brands;

	/**
	 * The value for the company_email field.
	 * @var        string
	 */
	protected $company_email;

	/**
	 * The value for the member_type field.
	 * @var        int
	 */
	protected $member_type;

	/**
	 * The value for the interested_in_b2b field.
	 * @var        boolean
	 */
	protected $interested_in_b2b;

	/**
	 * The value for the interested_in_hr field.
	 * @var        boolean
	 */
	protected $interested_in_hr;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the available field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $available;

	/**
	 * The value for the blocked field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $blocked;

	/**
	 * The value for the is_featured field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_featured;

	/**
	 * @var        BusinessType
	 */
	protected $aBusinessType;

	/**
	 * @var        CompanyProfile
	 */
	protected $aCompanyProfile;

	/**
	 * @var        BusinessSector
	 */
	protected $aBusinessSector;

	/**
	 * @var        array EmailTransaction[] Collection to store aggregation of EmailTransaction objects.
	 */
	protected $collEmailTransactions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmailTransactions.
	 */
	private $lastEmailTransactionCriteria = null;

	/**
	 * @var        array Blocklist[] Collection to store aggregation of Blocklist objects.
	 */
	protected $collBlocklists;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBlocklists.
	 */
	private $lastBlocklistCriteria = null;

	/**
	 * @var        array CompanyLogin[] Collection to store aggregation of CompanyLogin objects.
	 */
	protected $collCompanyLogins;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanyLogins.
	 */
	private $lastCompanyLoginCriteria = null;

	/**
	 * @var        array CompanyUser[] Collection to store aggregation of CompanyUser objects.
	 */
	protected $collCompanyUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanyUsers.
	 */
	private $lastCompanyUserCriteria = null;

	/**
	 * @var        array ResumeWork[] Collection to store aggregation of ResumeWork objects.
	 */
	protected $collResumeWorks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeWorks.
	 */
	private $lastResumeWorkCriteria = null;

	/**
	 * @var        array ResumeReference[] Collection to store aggregation of ResumeReference objects.
	 */
	protected $collResumeReferences;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeReferences.
	 */
	private $lastResumeReferenceCriteria = null;

	/**
	 * @var        array Relation[] Collection to store aggregation of Relation objects.
	 */
	protected $collRelationsRelatedByCompanyId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelationsRelatedByCompanyId.
	 */
	private $lastRelationRelatedByCompanyIdCriteria = null;

	/**
	 * @var        array Relation[] Collection to store aggregation of Relation objects.
	 */
	protected $collRelationsRelatedByRelatedCompanyId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelationsRelatedByRelatedCompanyId.
	 */
	private $lastRelationRelatedByRelatedCompanyIdCriteria = null;

	/**
	 * @var        array ProductGroup[] Collection to store aggregation of ProductGroup objects.
	 */
	protected $collProductGroups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProductGroups.
	 */
	private $lastProductGroupCriteria = null;

	/**
	 * @var        array Product[] Collection to store aggregation of Product objects.
	 */
	protected $collProducts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProducts.
	 */
	private $lastProductCriteria = null;

	/**
	 * @var        array CompanyBrand[] Collection to store aggregation of CompanyBrand objects.
	 */
	protected $collCompanyBrands;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanyBrands.
	 */
	private $lastCompanyBrandCriteria = null;

	/**
	 * @var        array PlatformAd[] Collection to store aggregation of PlatformAd objects.
	 */
	protected $collPlatformAds;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPlatformAds.
	 */
	private $lastPlatformAdCriteria = null;

	/**
	 * @var        array B2bLead[] Collection to store aggregation of B2bLead objects.
	 */
	protected $collB2bLeads;

	/**
	 * @var        Criteria The criteria used to select the current contents of collB2bLeads.
	 */
	private $lastB2bLeadCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCompany object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->available = true;
		$this->blocked = false;
		$this->is_featured = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [business_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getBusinessTypeId()
	{
		return $this->business_type_id;
	}

	/**
	 * Get the [profile_id] column value.
	 * 
	 * @return     int
	 */
	public function getProfileId()
	{
		return $this->profile_id;
	}

	/**
	 * Get the [sector_id] column value.
	 * 
	 * @return     int
	 */
	public function getSectorId()
	{
		return $this->sector_id;
	}

	/**
	 * Get the [url] column value.
	 * 
	 * @return     string
	 */
	public function getUrl()
	{
		return $this->url;
	}

	/**
	 * Get the [brands] column value.
	 * 
	 * @return     string
	 */
	public function getBrands()
	{
		return $this->brands;
	}

	/**
	 * Get the [company_email] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyEmail()
	{
		return $this->company_email;
	}

	/**
	 * Get the [member_type] column value.
	 * 
	 * @return     int
	 */
	public function getMemberType()
	{
		return $this->member_type;
	}

	/**
	 * Get the [interested_in_b2b] column value.
	 * 
	 * @return     boolean
	 */
	public function getInterestedInB2b()
	{
		return $this->interested_in_b2b;
	}

	/**
	 * Get the [interested_in_hr] column value.
	 * 
	 * @return     boolean
	 */
	public function getInterestedInHr()
	{
		return $this->interested_in_hr;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [available] column value.
	 * 
	 * @return     boolean
	 */
	public function getAvailable()
	{
		return $this->available;
	}

	/**
	 * Get the [blocked] column value.
	 * 
	 * @return     boolean
	 */
	public function getBlocked()
	{
		return $this->blocked;
	}

	/**
	 * Get the [is_featured] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsFeatured()
	{
		return $this->is_featured;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CompanyPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = CompanyPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [business_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setBusinessTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->business_type_id !== $v) {
			$this->business_type_id = $v;
			$this->modifiedColumns[] = CompanyPeer::BUSINESS_TYPE_ID;
		}

		if ($this->aBusinessType !== null && $this->aBusinessType->getId() !== $v) {
			$this->aBusinessType = null;
		}

		return $this;
	} // setBusinessTypeId()

	/**
	 * Set the value of [profile_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setProfileId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profile_id !== $v) {
			$this->profile_id = $v;
			$this->modifiedColumns[] = CompanyPeer::PROFILE_ID;
		}

		if ($this->aCompanyProfile !== null && $this->aCompanyProfile->getId() !== $v) {
			$this->aCompanyProfile = null;
		}

		return $this;
	} // setProfileId()

	/**
	 * Set the value of [sector_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setSectorId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sector_id !== $v) {
			$this->sector_id = $v;
			$this->modifiedColumns[] = CompanyPeer::SECTOR_ID;
		}

		if ($this->aBusinessSector !== null && $this->aBusinessSector->getId() !== $v) {
			$this->aBusinessSector = null;
		}

		return $this;
	} // setSectorId()

	/**
	 * Set the value of [url] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->url !== $v) {
			$this->url = $v;
			$this->modifiedColumns[] = CompanyPeer::URL;
		}

		return $this;
	} // setUrl()

	/**
	 * Set the value of [brands] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setBrands($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brands !== $v) {
			$this->brands = $v;
			$this->modifiedColumns[] = CompanyPeer::BRANDS;
		}

		return $this;
	} // setBrands()

	/**
	 * Set the value of [company_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCompanyEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_email !== $v) {
			$this->company_email = $v;
			$this->modifiedColumns[] = CompanyPeer::COMPANY_EMAIL;
		}

		return $this;
	} // setCompanyEmail()

	/**
	 * Set the value of [member_type] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setMemberType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->member_type !== $v) {
			$this->member_type = $v;
			$this->modifiedColumns[] = CompanyPeer::MEMBER_TYPE;
		}

		return $this;
	} // setMemberType()

	/**
	 * Set the value of [interested_in_b2b] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setInterestedInB2b($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->interested_in_b2b !== $v) {
			$this->interested_in_b2b = $v;
			$this->modifiedColumns[] = CompanyPeer::INTERESTED_IN_B2B;
		}

		return $this;
	} // setInterestedInB2b()

	/**
	 * Set the value of [interested_in_hr] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setInterestedInHr($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->interested_in_hr !== $v) {
			$this->interested_in_hr = $v;
			$this->modifiedColumns[] = CompanyPeer::INTERESTED_IN_HR;
		}

		return $this;
	} // setInterestedInHr()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CompanyPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Company The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CompanyPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->available !== $v || $v === true) {
			$this->available = $v;
			$this->modifiedColumns[] = CompanyPeer::AVAILABLE;
		}

		return $this;
	} // setAvailable()

	/**
	 * Set the value of [blocked] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setBlocked($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->blocked !== $v || $v === false) {
			$this->blocked = $v;
			$this->modifiedColumns[] = CompanyPeer::BLOCKED;
		}

		return $this;
	} // setBlocked()

	/**
	 * Set the value of [is_featured] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setIsFeatured($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_featured !== $v || $v === false) {
			$this->is_featured = $v;
			$this->modifiedColumns[] = CompanyPeer::IS_FEATURED;
		}

		return $this;
	} // setIsFeatured()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(CompanyPeer::AVAILABLE,CompanyPeer::BLOCKED,CompanyPeer::IS_FEATURED))) {
				return false;
			}

			if ($this->available !== true) {
				return false;
			}

			if ($this->blocked !== false) {
				return false;
			}

			if ($this->is_featured !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->business_type_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->profile_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->sector_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->url = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->brands = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->company_email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->member_type = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->interested_in_b2b = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->interested_in_hr = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->created_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->updated_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->available = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->blocked = ($row[$startcol + 14] !== null) ? (boolean) $row[$startcol + 14] : null;
			$this->is_featured = ($row[$startcol + 15] !== null) ? (boolean) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 16; // 16 = CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Company object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aBusinessType !== null && $this->business_type_id !== $this->aBusinessType->getId()) {
			$this->aBusinessType = null;
		}
		if ($this->aCompanyProfile !== null && $this->profile_id !== $this->aCompanyProfile->getId()) {
			$this->aCompanyProfile = null;
		}
		if ($this->aBusinessSector !== null && $this->sector_id !== $this->aBusinessSector->getId()) {
			$this->aBusinessSector = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CompanyPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CompanyPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aBusinessType = null;
			$this->aCompanyProfile = null;
			$this->aBusinessSector = null;
			$this->collEmailTransactions = null;
			$this->lastEmailTransactionCriteria = null;

			$this->collBlocklists = null;
			$this->lastBlocklistCriteria = null;

			$this->collCompanyLogins = null;
			$this->lastCompanyLoginCriteria = null;

			$this->collCompanyUsers = null;
			$this->lastCompanyUserCriteria = null;

			$this->collResumeWorks = null;
			$this->lastResumeWorkCriteria = null;

			$this->collResumeReferences = null;
			$this->lastResumeReferenceCriteria = null;

			$this->collRelationsRelatedByCompanyId = null;
			$this->lastRelationRelatedByCompanyIdCriteria = null;

			$this->collRelationsRelatedByRelatedCompanyId = null;
			$this->lastRelationRelatedByRelatedCompanyIdCriteria = null;

			$this->collProductGroups = null;
			$this->lastProductGroupCriteria = null;

			$this->collProducts = null;
			$this->lastProductCriteria = null;

			$this->collCompanyBrands = null;
			$this->lastCompanyBrandCriteria = null;

			$this->collPlatformAds = null;
			$this->lastPlatformAdCriteria = null;

			$this->collB2bLeads = null;
			$this->lastB2bLeadCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCompany:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CompanyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CompanyPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCompany:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCompany:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(CompanyPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(CompanyPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CompanyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCompany:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CompanyPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aBusinessType !== null) {
				if ($this->aBusinessType->isModified() || ($this->aBusinessType->getCulture() && $this->aBusinessType->getCurrentBusinessTypeI18n()->isModified()) || $this->aBusinessType->isNew()) {
					$affectedRows += $this->aBusinessType->save($con);
				}
				$this->setBusinessType($this->aBusinessType);
			}

			if ($this->aCompanyProfile !== null) {
				if ($this->aCompanyProfile->isModified() || ($this->aCompanyProfile->getCulture() && $this->aCompanyProfile->getCurrentCompanyProfileI18n()->isModified()) || $this->aCompanyProfile->isNew()) {
					$affectedRows += $this->aCompanyProfile->save($con);
				}
				$this->setCompanyProfile($this->aCompanyProfile);
			}

			if ($this->aBusinessSector !== null) {
				if ($this->aBusinessSector->isModified() || ($this->aBusinessSector->getCulture() && $this->aBusinessSector->getCurrentBusinessSectorI18n()->isModified()) || $this->aBusinessSector->isNew()) {
					$affectedRows += $this->aBusinessSector->save($con);
				}
				$this->setBusinessSector($this->aBusinessSector);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CompanyPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CompanyPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CompanyPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collEmailTransactions !== null) {
				foreach ($this->collEmailTransactions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBlocklists !== null) {
				foreach ($this->collBlocklists as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanyLogins !== null) {
				foreach ($this->collCompanyLogins as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanyUsers !== null) {
				foreach ($this->collCompanyUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeWorks !== null) {
				foreach ($this->collResumeWorks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeReferences !== null) {
				foreach ($this->collResumeReferences as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRelationsRelatedByCompanyId !== null) {
				foreach ($this->collRelationsRelatedByCompanyId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRelationsRelatedByRelatedCompanyId !== null) {
				foreach ($this->collRelationsRelatedByRelatedCompanyId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProductGroups !== null) {
				foreach ($this->collProductGroups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProducts !== null) {
				foreach ($this->collProducts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanyBrands !== null) {
				foreach ($this->collCompanyBrands as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPlatformAds !== null) {
				foreach ($this->collPlatformAds as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collB2bLeads !== null) {
				foreach ($this->collB2bLeads as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aBusinessType !== null) {
				if (!$this->aBusinessType->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aBusinessType->getValidationFailures());
				}
			}

			if ($this->aCompanyProfile !== null) {
				if (!$this->aCompanyProfile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCompanyProfile->getValidationFailures());
				}
			}

			if ($this->aBusinessSector !== null) {
				if (!$this->aBusinessSector->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aBusinessSector->getValidationFailures());
				}
			}


			if (($retval = CompanyPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collEmailTransactions !== null) {
					foreach ($this->collEmailTransactions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBlocklists !== null) {
					foreach ($this->collBlocklists as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanyLogins !== null) {
					foreach ($this->collCompanyLogins as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanyUsers !== null) {
					foreach ($this->collCompanyUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeWorks !== null) {
					foreach ($this->collResumeWorks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeReferences !== null) {
					foreach ($this->collResumeReferences as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRelationsRelatedByCompanyId !== null) {
					foreach ($this->collRelationsRelatedByCompanyId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRelationsRelatedByRelatedCompanyId !== null) {
					foreach ($this->collRelationsRelatedByRelatedCompanyId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProductGroups !== null) {
					foreach ($this->collProductGroups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProducts !== null) {
					foreach ($this->collProducts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanyBrands !== null) {
					foreach ($this->collCompanyBrands as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPlatformAds !== null) {
					foreach ($this->collPlatformAds as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collB2bLeads !== null) {
					foreach ($this->collB2bLeads as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CompanyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getBusinessTypeId();
				break;
			case 3:
				return $this->getProfileId();
				break;
			case 4:
				return $this->getSectorId();
				break;
			case 5:
				return $this->getUrl();
				break;
			case 6:
				return $this->getBrands();
				break;
			case 7:
				return $this->getCompanyEmail();
				break;
			case 8:
				return $this->getMemberType();
				break;
			case 9:
				return $this->getInterestedInB2b();
				break;
			case 10:
				return $this->getInterestedInHr();
				break;
			case 11:
				return $this->getCreatedAt();
				break;
			case 12:
				return $this->getUpdatedAt();
				break;
			case 13:
				return $this->getAvailable();
				break;
			case 14:
				return $this->getBlocked();
				break;
			case 15:
				return $this->getIsFeatured();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CompanyPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getBusinessTypeId(),
			$keys[3] => $this->getProfileId(),
			$keys[4] => $this->getSectorId(),
			$keys[5] => $this->getUrl(),
			$keys[6] => $this->getBrands(),
			$keys[7] => $this->getCompanyEmail(),
			$keys[8] => $this->getMemberType(),
			$keys[9] => $this->getInterestedInB2b(),
			$keys[10] => $this->getInterestedInHr(),
			$keys[11] => $this->getCreatedAt(),
			$keys[12] => $this->getUpdatedAt(),
			$keys[13] => $this->getAvailable(),
			$keys[14] => $this->getBlocked(),
			$keys[15] => $this->getIsFeatured(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CompanyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setBusinessTypeId($value);
				break;
			case 3:
				$this->setProfileId($value);
				break;
			case 4:
				$this->setSectorId($value);
				break;
			case 5:
				$this->setUrl($value);
				break;
			case 6:
				$this->setBrands($value);
				break;
			case 7:
				$this->setCompanyEmail($value);
				break;
			case 8:
				$this->setMemberType($value);
				break;
			case 9:
				$this->setInterestedInB2b($value);
				break;
			case 10:
				$this->setInterestedInHr($value);
				break;
			case 11:
				$this->setCreatedAt($value);
				break;
			case 12:
				$this->setUpdatedAt($value);
				break;
			case 13:
				$this->setAvailable($value);
				break;
			case 14:
				$this->setBlocked($value);
				break;
			case 15:
				$this->setIsFeatured($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CompanyPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setBusinessTypeId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setProfileId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSectorId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUrl($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setBrands($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCompanyEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMemberType($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setInterestedInB2b($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setInterestedInHr($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCreatedAt($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUpdatedAt($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setAvailable($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setBlocked($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setIsFeatured($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CompanyPeer::DATABASE_NAME);

		if ($this->isColumnModified(CompanyPeer::ID)) $criteria->add(CompanyPeer::ID, $this->id);
		if ($this->isColumnModified(CompanyPeer::NAME)) $criteria->add(CompanyPeer::NAME, $this->name);
		if ($this->isColumnModified(CompanyPeer::BUSINESS_TYPE_ID)) $criteria->add(CompanyPeer::BUSINESS_TYPE_ID, $this->business_type_id);
		if ($this->isColumnModified(CompanyPeer::PROFILE_ID)) $criteria->add(CompanyPeer::PROFILE_ID, $this->profile_id);
		if ($this->isColumnModified(CompanyPeer::SECTOR_ID)) $criteria->add(CompanyPeer::SECTOR_ID, $this->sector_id);
		if ($this->isColumnModified(CompanyPeer::URL)) $criteria->add(CompanyPeer::URL, $this->url);
		if ($this->isColumnModified(CompanyPeer::BRANDS)) $criteria->add(CompanyPeer::BRANDS, $this->brands);
		if ($this->isColumnModified(CompanyPeer::COMPANY_EMAIL)) $criteria->add(CompanyPeer::COMPANY_EMAIL, $this->company_email);
		if ($this->isColumnModified(CompanyPeer::MEMBER_TYPE)) $criteria->add(CompanyPeer::MEMBER_TYPE, $this->member_type);
		if ($this->isColumnModified(CompanyPeer::INTERESTED_IN_B2B)) $criteria->add(CompanyPeer::INTERESTED_IN_B2B, $this->interested_in_b2b);
		if ($this->isColumnModified(CompanyPeer::INTERESTED_IN_HR)) $criteria->add(CompanyPeer::INTERESTED_IN_HR, $this->interested_in_hr);
		if ($this->isColumnModified(CompanyPeer::CREATED_AT)) $criteria->add(CompanyPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CompanyPeer::UPDATED_AT)) $criteria->add(CompanyPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(CompanyPeer::AVAILABLE)) $criteria->add(CompanyPeer::AVAILABLE, $this->available);
		if ($this->isColumnModified(CompanyPeer::BLOCKED)) $criteria->add(CompanyPeer::BLOCKED, $this->blocked);
		if ($this->isColumnModified(CompanyPeer::IS_FEATURED)) $criteria->add(CompanyPeer::IS_FEATURED, $this->is_featured);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CompanyPeer::DATABASE_NAME);

		$criteria->add(CompanyPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Company (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setBusinessTypeId($this->business_type_id);

		$copyObj->setProfileId($this->profile_id);

		$copyObj->setSectorId($this->sector_id);

		$copyObj->setUrl($this->url);

		$copyObj->setBrands($this->brands);

		$copyObj->setCompanyEmail($this->company_email);

		$copyObj->setMemberType($this->member_type);

		$copyObj->setInterestedInB2b($this->interested_in_b2b);

		$copyObj->setInterestedInHr($this->interested_in_hr);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setAvailable($this->available);

		$copyObj->setBlocked($this->blocked);

		$copyObj->setIsFeatured($this->is_featured);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getEmailTransactions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmailTransaction($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBlocklists() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBlocklist($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanyLogins() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanyLogin($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanyUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanyUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeWorks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeWork($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeReferences() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeReference($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRelationsRelatedByCompanyId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelationRelatedByCompanyId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRelationsRelatedByRelatedCompanyId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelationRelatedByRelatedCompanyId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProductGroups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProductGroup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProducts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProduct($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanyBrands() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanyBrand($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPlatformAds() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPlatformAd($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getB2bLeads() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addB2bLead($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Company Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CompanyPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CompanyPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a BusinessType object.
	 *
	 * @param      BusinessType $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setBusinessType(BusinessType $v = null)
	{
		if ($v === null) {
			$this->setBusinessTypeId(NULL);
		} else {
			$this->setBusinessTypeId($v->getId());
		}

		$this->aBusinessType = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the BusinessType object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated BusinessType object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     BusinessType The associated BusinessType object.
	 * @throws     PropelException
	 */
	public function getBusinessType(PropelPDO $con = null)
	{
		if ($this->aBusinessType === null && ($this->business_type_id !== null)) {
			$c = new Criteria(BusinessTypePeer::DATABASE_NAME);
			$c->add(BusinessTypePeer::ID, $this->business_type_id);
			$this->aBusinessType = BusinessTypePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aBusinessType->addCompanys($this);
			 */
		}
		return $this->aBusinessType;
	}

	/**
	 * Declares an association between this object and a CompanyProfile object.
	 *
	 * @param      CompanyProfile $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCompanyProfile(CompanyProfile $v = null)
	{
		if ($v === null) {
			$this->setProfileId(NULL);
		} else {
			$this->setProfileId($v->getId());
		}

		$this->aCompanyProfile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CompanyProfile object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated CompanyProfile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CompanyProfile The associated CompanyProfile object.
	 * @throws     PropelException
	 */
	public function getCompanyProfile(PropelPDO $con = null)
	{
		if ($this->aCompanyProfile === null && ($this->profile_id !== null)) {
			$c = new Criteria(CompanyProfilePeer::DATABASE_NAME);
			$c->add(CompanyProfilePeer::ID, $this->profile_id);
			$this->aCompanyProfile = CompanyProfilePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCompanyProfile->addCompanys($this);
			 */
		}
		return $this->aCompanyProfile;
	}

	/**
	 * Declares an association between this object and a BusinessSector object.
	 *
	 * @param      BusinessSector $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setBusinessSector(BusinessSector $v = null)
	{
		if ($v === null) {
			$this->setSectorId(NULL);
		} else {
			$this->setSectorId($v->getId());
		}

		$this->aBusinessSector = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the BusinessSector object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated BusinessSector object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     BusinessSector The associated BusinessSector object.
	 * @throws     PropelException
	 */
	public function getBusinessSector(PropelPDO $con = null)
	{
		if ($this->aBusinessSector === null && ($this->sector_id !== null)) {
			$c = new Criteria(BusinessSectorPeer::DATABASE_NAME);
			$c->add(BusinessSectorPeer::ID, $this->sector_id);
			$this->aBusinessSector = BusinessSectorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aBusinessSector->addCompanys($this);
			 */
		}
		return $this->aBusinessSector;
	}

	/**
	 * Clears out the collEmailTransactions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmailTransactions()
	 */
	public function clearEmailTransactions()
	{
		$this->collEmailTransactions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmailTransactions collection (array).
	 *
	 * By default this just sets the collEmailTransactions collection to an empty array (like clearcollEmailTransactions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmailTransactions()
	{
		$this->collEmailTransactions = array();
	}

	/**
	 * Gets an array of EmailTransaction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related EmailTransactions from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmailTransaction[]
	 * @throws     PropelException
	 */
	public function getEmailTransactions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailTransactions === null) {
			if ($this->isNew()) {
			   $this->collEmailTransactions = array();
			} else {

				$criteria->add(EmailTransactionPeer::RCPNT_COMPANY_ID, $this->id);

				EmailTransactionPeer::addSelectColumns($criteria);
				$this->collEmailTransactions = EmailTransactionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmailTransactionPeer::RCPNT_COMPANY_ID, $this->id);

				EmailTransactionPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmailTransactionCriteria) || !$this->lastEmailTransactionCriteria->equals($criteria)) {
					$this->collEmailTransactions = EmailTransactionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmailTransactionCriteria = $criteria;
		return $this->collEmailTransactions;
	}

	/**
	 * Returns the number of related EmailTransaction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmailTransaction objects.
	 * @throws     PropelException
	 */
	public function countEmailTransactions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmailTransactions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmailTransactionPeer::RCPNT_COMPANY_ID, $this->id);

				$count = EmailTransactionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmailTransactionPeer::RCPNT_COMPANY_ID, $this->id);

				if (!isset($this->lastEmailTransactionCriteria) || !$this->lastEmailTransactionCriteria->equals($criteria)) {
					$count = EmailTransactionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmailTransactions);
				}
			} else {
				$count = count($this->collEmailTransactions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmailTransaction object to this object
	 * through the EmailTransaction foreign key attribute.
	 *
	 * @param      EmailTransaction $l EmailTransaction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmailTransaction(EmailTransaction $l)
	{
		if ($this->collEmailTransactions === null) {
			$this->initEmailTransactions();
		}
		if (!in_array($l, $this->collEmailTransactions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmailTransactions, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related EmailTransactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getEmailTransactionsJoinEmailTransactionNamespace($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailTransactions === null) {
			if ($this->isNew()) {
				$this->collEmailTransactions = array();
			} else {

				$criteria->add(EmailTransactionPeer::RCPNT_COMPANY_ID, $this->id);

				$this->collEmailTransactions = EmailTransactionPeer::doSelectJoinEmailTransactionNamespace($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmailTransactionPeer::RCPNT_COMPANY_ID, $this->id);

			if (!isset($this->lastEmailTransactionCriteria) || !$this->lastEmailTransactionCriteria->equals($criteria)) {
				$this->collEmailTransactions = EmailTransactionPeer::doSelectJoinEmailTransactionNamespace($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmailTransactionCriteria = $criteria;

		return $this->collEmailTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related EmailTransactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getEmailTransactionsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailTransactions === null) {
			if ($this->isNew()) {
				$this->collEmailTransactions = array();
			} else {

				$criteria->add(EmailTransactionPeer::RCPNT_COMPANY_ID, $this->id);

				$this->collEmailTransactions = EmailTransactionPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmailTransactionPeer::RCPNT_COMPANY_ID, $this->id);

			if (!isset($this->lastEmailTransactionCriteria) || !$this->lastEmailTransactionCriteria->equals($criteria)) {
				$this->collEmailTransactions = EmailTransactionPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmailTransactionCriteria = $criteria;

		return $this->collEmailTransactions;
	}

	/**
	 * Clears out the collBlocklists collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBlocklists()
	 */
	public function clearBlocklists()
	{
		$this->collBlocklists = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBlocklists collection (array).
	 *
	 * By default this just sets the collBlocklists collection to an empty array (like clearcollBlocklists());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBlocklists()
	{
		$this->collBlocklists = array();
	}

	/**
	 * Gets an array of Blocklist objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related Blocklists from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Blocklist[]
	 * @throws     PropelException
	 */
	public function getBlocklists($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBlocklists === null) {
			if ($this->isNew()) {
			   $this->collBlocklists = array();
			} else {

				$criteria->add(BlocklistPeer::COMPANY_ID, $this->id);

				BlocklistPeer::addSelectColumns($criteria);
				$this->collBlocklists = BlocklistPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BlocklistPeer::COMPANY_ID, $this->id);

				BlocklistPeer::addSelectColumns($criteria);
				if (!isset($this->lastBlocklistCriteria) || !$this->lastBlocklistCriteria->equals($criteria)) {
					$this->collBlocklists = BlocklistPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBlocklistCriteria = $criteria;
		return $this->collBlocklists;
	}

	/**
	 * Returns the number of related Blocklist objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Blocklist objects.
	 * @throws     PropelException
	 */
	public function countBlocklists(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBlocklists === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BlocklistPeer::COMPANY_ID, $this->id);

				$count = BlocklistPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BlocklistPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastBlocklistCriteria) || !$this->lastBlocklistCriteria->equals($criteria)) {
					$count = BlocklistPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collBlocklists);
				}
			} else {
				$count = count($this->collBlocklists);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Blocklist object to this object
	 * through the Blocklist foreign key attribute.
	 *
	 * @param      Blocklist $l Blocklist
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBlocklist(Blocklist $l)
	{
		if ($this->collBlocklists === null) {
			$this->initBlocklists();
		}
		if (!in_array($l, $this->collBlocklists, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBlocklists, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Blocklists from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getBlocklistsJoinLogin($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBlocklists === null) {
			if ($this->isNew()) {
				$this->collBlocklists = array();
			} else {

				$criteria->add(BlocklistPeer::COMPANY_ID, $this->id);

				$this->collBlocklists = BlocklistPeer::doSelectJoinLogin($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BlocklistPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastBlocklistCriteria) || !$this->lastBlocklistCriteria->equals($criteria)) {
				$this->collBlocklists = BlocklistPeer::doSelectJoinLogin($criteria, $con, $join_behavior);
			}
		}
		$this->lastBlocklistCriteria = $criteria;

		return $this->collBlocklists;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Blocklists from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getBlocklistsJoinBlockReason($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBlocklists === null) {
			if ($this->isNew()) {
				$this->collBlocklists = array();
			} else {

				$criteria->add(BlocklistPeer::COMPANY_ID, $this->id);

				$this->collBlocklists = BlocklistPeer::doSelectJoinBlockReason($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BlocklistPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastBlocklistCriteria) || !$this->lastBlocklistCriteria->equals($criteria)) {
				$this->collBlocklists = BlocklistPeer::doSelectJoinBlockReason($criteria, $con, $join_behavior);
			}
		}
		$this->lastBlocklistCriteria = $criteria;

		return $this->collBlocklists;
	}

	/**
	 * Clears out the collCompanyLogins collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanyLogins()
	 */
	public function clearCompanyLogins()
	{
		$this->collCompanyLogins = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanyLogins collection (array).
	 *
	 * By default this just sets the collCompanyLogins collection to an empty array (like clearcollCompanyLogins());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanyLogins()
	{
		$this->collCompanyLogins = array();
	}

	/**
	 * Gets an array of CompanyLogin objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related CompanyLogins from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompanyLogin[]
	 * @throws     PropelException
	 */
	public function getCompanyLogins($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
			   $this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::COMPANY_ID, $this->id);

				CompanyLoginPeer::addSelectColumns($criteria);
				$this->collCompanyLogins = CompanyLoginPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyLoginPeer::COMPANY_ID, $this->id);

				CompanyLoginPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
					$this->collCompanyLogins = CompanyLoginPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;
		return $this->collCompanyLogins;
	}

	/**
	 * Returns the number of related CompanyLogin objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompanyLogin objects.
	 * @throws     PropelException
	 */
	public function countCompanyLogins(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyLoginPeer::COMPANY_ID, $this->id);

				$count = CompanyLoginPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyLoginPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
					$count = CompanyLoginPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanyLogins);
				}
			} else {
				$count = count($this->collCompanyLogins);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompanyLogin object to this object
	 * through the CompanyLogin foreign key attribute.
	 *
	 * @param      CompanyLogin $l CompanyLogin
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanyLogin(CompanyLogin $l)
	{
		if ($this->collCompanyLogins === null) {
			$this->initCompanyLogins();
		}
		if (!in_array($l, $this->collCompanyLogins, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanyLogins, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related CompanyLogins from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getCompanyLoginsJoinLogin($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::COMPANY_ID, $this->id);

				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinLogin($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyLoginPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinLogin($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;

		return $this->collCompanyLogins;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related CompanyLogins from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getCompanyLoginsJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyLogins === null) {
			if ($this->isNew()) {
				$this->collCompanyLogins = array();
			} else {

				$criteria->add(CompanyLoginPeer::COMPANY_ID, $this->id);

				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyLoginPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyLoginCriteria) || !$this->lastCompanyLoginCriteria->equals($criteria)) {
				$this->collCompanyLogins = CompanyLoginPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyLoginCriteria = $criteria;

		return $this->collCompanyLogins;
	}

	/**
	 * Clears out the collCompanyUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanyUsers()
	 */
	public function clearCompanyUsers()
	{
		$this->collCompanyUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanyUsers collection (array).
	 *
	 * By default this just sets the collCompanyUsers collection to an empty array (like clearcollCompanyUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanyUsers()
	{
		$this->collCompanyUsers = array();
	}

	/**
	 * Gets an array of CompanyUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related CompanyUsers from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompanyUser[]
	 * @throws     PropelException
	 */
	public function getCompanyUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
			   $this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::COMPANY_ID, $this->id);

				CompanyUserPeer::addSelectColumns($criteria);
				$this->collCompanyUsers = CompanyUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyUserPeer::COMPANY_ID, $this->id);

				CompanyUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
					$this->collCompanyUsers = CompanyUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyUserCriteria = $criteria;
		return $this->collCompanyUsers;
	}

	/**
	 * Returns the number of related CompanyUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompanyUser objects.
	 * @throws     PropelException
	 */
	public function countCompanyUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyUserPeer::COMPANY_ID, $this->id);

				$count = CompanyUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyUserPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
					$count = CompanyUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanyUsers);
				}
			} else {
				$count = count($this->collCompanyUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompanyUser object to this object
	 * through the CompanyUser foreign key attribute.
	 *
	 * @param      CompanyUser $l CompanyUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanyUser(CompanyUser $l)
	{
		if ($this->collCompanyUsers === null) {
			$this->initCompanyUsers();
		}
		if (!in_array($l, $this->collCompanyUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanyUsers, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related CompanyUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getCompanyUsersJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::COMPANY_ID, $this->id);

				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyUserPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyUserCriteria = $criteria;

		return $this->collCompanyUsers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related CompanyUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getCompanyUsersJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyUsers === null) {
			if ($this->isNew()) {
				$this->collCompanyUsers = array();
			} else {

				$criteria->add(CompanyUserPeer::COMPANY_ID, $this->id);

				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyUserPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyUserCriteria) || !$this->lastCompanyUserCriteria->equals($criteria)) {
				$this->collCompanyUsers = CompanyUserPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyUserCriteria = $criteria;

		return $this->collCompanyUsers;
	}

	/**
	 * Clears out the collResumeWorks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeWorks()
	 */
	public function clearResumeWorks()
	{
		$this->collResumeWorks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeWorks collection (array).
	 *
	 * By default this just sets the collResumeWorks collection to an empty array (like clearcollResumeWorks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeWorks()
	{
		$this->collResumeWorks = array();
	}

	/**
	 * Gets an array of ResumeWork objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related ResumeWorks from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeWork[]
	 * @throws     PropelException
	 */
	public function getResumeWorks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeWorks === null) {
			if ($this->isNew()) {
			   $this->collResumeWorks = array();
			} else {

				$criteria->add(ResumeWorkPeer::COMPANY_ID, $this->id);

				ResumeWorkPeer::addSelectColumns($criteria);
				$this->collResumeWorks = ResumeWorkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeWorkPeer::COMPANY_ID, $this->id);

				ResumeWorkPeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeWorkCriteria) || !$this->lastResumeWorkCriteria->equals($criteria)) {
					$this->collResumeWorks = ResumeWorkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeWorkCriteria = $criteria;
		return $this->collResumeWorks;
	}

	/**
	 * Returns the number of related ResumeWork objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeWork objects.
	 * @throws     PropelException
	 */
	public function countResumeWorks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeWorks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeWorkPeer::COMPANY_ID, $this->id);

				$count = ResumeWorkPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeWorkPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastResumeWorkCriteria) || !$this->lastResumeWorkCriteria->equals($criteria)) {
					$count = ResumeWorkPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeWorks);
				}
			} else {
				$count = count($this->collResumeWorks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeWork object to this object
	 * through the ResumeWork foreign key attribute.
	 *
	 * @param      ResumeWork $l ResumeWork
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeWork(ResumeWork $l)
	{
		if ($this->collResumeWorks === null) {
			$this->initResumeWorks();
		}
		if (!in_array($l, $this->collResumeWorks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeWorks, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related ResumeWorks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getResumeWorksJoinResume($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeWorks === null) {
			if ($this->isNew()) {
				$this->collResumeWorks = array();
			} else {

				$criteria->add(ResumeWorkPeer::COMPANY_ID, $this->id);

				$this->collResumeWorks = ResumeWorkPeer::doSelectJoinResume($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeWorkPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastResumeWorkCriteria) || !$this->lastResumeWorkCriteria->equals($criteria)) {
				$this->collResumeWorks = ResumeWorkPeer::doSelectJoinResume($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeWorkCriteria = $criteria;

		return $this->collResumeWorks;
	}

	/**
	 * Clears out the collResumeReferences collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeReferences()
	 */
	public function clearResumeReferences()
	{
		$this->collResumeReferences = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeReferences collection (array).
	 *
	 * By default this just sets the collResumeReferences collection to an empty array (like clearcollResumeReferences());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeReferences()
	{
		$this->collResumeReferences = array();
	}

	/**
	 * Gets an array of ResumeReference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related ResumeReferences from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeReference[]
	 * @throws     PropelException
	 */
	public function getResumeReferences($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
			   $this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

				ResumeReferencePeer::addSelectColumns($criteria);
				$this->collResumeReferences = ResumeReferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

				ResumeReferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
					$this->collResumeReferences = ResumeReferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;
		return $this->collResumeReferences;
	}

	/**
	 * Returns the number of related ResumeReference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeReference objects.
	 * @throws     PropelException
	 */
	public function countResumeReferences(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

				$count = ResumeReferencePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

				if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
					$count = ResumeReferencePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeReferences);
				}
			} else {
				$count = count($this->collResumeReferences);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeReference object to this object
	 * through the ResumeReference foreign key attribute.
	 *
	 * @param      ResumeReference $l ResumeReference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeReference(ResumeReference $l)
	{
		if ($this->collResumeReferences === null) {
			$this->initResumeReferences();
		}
		if (!in_array($l, $this->collResumeReferences, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeReferences, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getResumeReferencesJoinResume($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinResume($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinResume($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getResumeReferencesJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getResumeReferencesJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::COMPANY_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}

	/**
	 * Clears out the collRelationsRelatedByCompanyId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelationsRelatedByCompanyId()
	 */
	public function clearRelationsRelatedByCompanyId()
	{
		$this->collRelationsRelatedByCompanyId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelationsRelatedByCompanyId collection (array).
	 *
	 * By default this just sets the collRelationsRelatedByCompanyId collection to an empty array (like clearcollRelationsRelatedByCompanyId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelationsRelatedByCompanyId()
	{
		$this->collRelationsRelatedByCompanyId = array();
	}

	/**
	 * Gets an array of Relation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related RelationsRelatedByCompanyId from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Relation[]
	 * @throws     PropelException
	 */
	public function getRelationsRelatedByCompanyId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByCompanyId === null) {
			if ($this->isNew()) {
			   $this->collRelationsRelatedByCompanyId = array();
			} else {

				$criteria->add(RelationPeer::COMPANY_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				$this->collRelationsRelatedByCompanyId = RelationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationPeer::COMPANY_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationRelatedByCompanyIdCriteria) || !$this->lastRelationRelatedByCompanyIdCriteria->equals($criteria)) {
					$this->collRelationsRelatedByCompanyId = RelationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationRelatedByCompanyIdCriteria = $criteria;
		return $this->collRelationsRelatedByCompanyId;
	}

	/**
	 * Returns the number of related Relation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Relation objects.
	 * @throws     PropelException
	 */
	public function countRelationsRelatedByCompanyId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelationsRelatedByCompanyId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationPeer::COMPANY_ID, $this->id);

				$count = RelationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastRelationRelatedByCompanyIdCriteria) || !$this->lastRelationRelatedByCompanyIdCriteria->equals($criteria)) {
					$count = RelationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelationsRelatedByCompanyId);
				}
			} else {
				$count = count($this->collRelationsRelatedByCompanyId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Relation object to this object
	 * through the Relation foreign key attribute.
	 *
	 * @param      Relation $l Relation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelationRelatedByCompanyId(Relation $l)
	{
		if ($this->collRelationsRelatedByCompanyId === null) {
			$this->initRelationsRelatedByCompanyId();
		}
		if (!in_array($l, $this->collRelationsRelatedByCompanyId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelationsRelatedByCompanyId, $l);
			$l->setCompanyRelatedByCompanyId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related RelationsRelatedByCompanyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getRelationsRelatedByCompanyIdJoinUserRelatedByUserId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByCompanyId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByCompanyId = array();
			} else {

				$criteria->add(RelationPeer::COMPANY_ID, $this->id);

				$this->collRelationsRelatedByCompanyId = RelationPeer::doSelectJoinUserRelatedByUserId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastRelationRelatedByCompanyIdCriteria) || !$this->lastRelationRelatedByCompanyIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByCompanyId = RelationPeer::doSelectJoinUserRelatedByUserId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByCompanyIdCriteria = $criteria;

		return $this->collRelationsRelatedByCompanyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related RelationsRelatedByCompanyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getRelationsRelatedByCompanyIdJoinUserRelatedByRelatedUserId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByCompanyId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByCompanyId = array();
			} else {

				$criteria->add(RelationPeer::COMPANY_ID, $this->id);

				$this->collRelationsRelatedByCompanyId = RelationPeer::doSelectJoinUserRelatedByRelatedUserId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastRelationRelatedByCompanyIdCriteria) || !$this->lastRelationRelatedByCompanyIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByCompanyId = RelationPeer::doSelectJoinUserRelatedByRelatedUserId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByCompanyIdCriteria = $criteria;

		return $this->collRelationsRelatedByCompanyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related RelationsRelatedByCompanyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getRelationsRelatedByCompanyIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByCompanyId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByCompanyId = array();
			} else {

				$criteria->add(RelationPeer::COMPANY_ID, $this->id);

				$this->collRelationsRelatedByCompanyId = RelationPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastRelationRelatedByCompanyIdCriteria) || !$this->lastRelationRelatedByCompanyIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByCompanyId = RelationPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByCompanyIdCriteria = $criteria;

		return $this->collRelationsRelatedByCompanyId;
	}

	/**
	 * Clears out the collRelationsRelatedByRelatedCompanyId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelationsRelatedByRelatedCompanyId()
	 */
	public function clearRelationsRelatedByRelatedCompanyId()
	{
		$this->collRelationsRelatedByRelatedCompanyId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelationsRelatedByRelatedCompanyId collection (array).
	 *
	 * By default this just sets the collRelationsRelatedByRelatedCompanyId collection to an empty array (like clearcollRelationsRelatedByRelatedCompanyId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelationsRelatedByRelatedCompanyId()
	{
		$this->collRelationsRelatedByRelatedCompanyId = array();
	}

	/**
	 * Gets an array of Relation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related RelationsRelatedByRelatedCompanyId from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Relation[]
	 * @throws     PropelException
	 */
	public function getRelationsRelatedByRelatedCompanyId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByRelatedCompanyId === null) {
			if ($this->isNew()) {
			   $this->collRelationsRelatedByRelatedCompanyId = array();
			} else {

				$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				$this->collRelationsRelatedByRelatedCompanyId = RelationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationRelatedByRelatedCompanyIdCriteria) || !$this->lastRelationRelatedByRelatedCompanyIdCriteria->equals($criteria)) {
					$this->collRelationsRelatedByRelatedCompanyId = RelationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationRelatedByRelatedCompanyIdCriteria = $criteria;
		return $this->collRelationsRelatedByRelatedCompanyId;
	}

	/**
	 * Returns the number of related Relation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Relation objects.
	 * @throws     PropelException
	 */
	public function countRelationsRelatedByRelatedCompanyId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelationsRelatedByRelatedCompanyId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

				$count = RelationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

				if (!isset($this->lastRelationRelatedByRelatedCompanyIdCriteria) || !$this->lastRelationRelatedByRelatedCompanyIdCriteria->equals($criteria)) {
					$count = RelationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelationsRelatedByRelatedCompanyId);
				}
			} else {
				$count = count($this->collRelationsRelatedByRelatedCompanyId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Relation object to this object
	 * through the Relation foreign key attribute.
	 *
	 * @param      Relation $l Relation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelationRelatedByRelatedCompanyId(Relation $l)
	{
		if ($this->collRelationsRelatedByRelatedCompanyId === null) {
			$this->initRelationsRelatedByRelatedCompanyId();
		}
		if (!in_array($l, $this->collRelationsRelatedByRelatedCompanyId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelationsRelatedByRelatedCompanyId, $l);
			$l->setCompanyRelatedByRelatedCompanyId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related RelationsRelatedByRelatedCompanyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getRelationsRelatedByRelatedCompanyIdJoinUserRelatedByUserId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByRelatedCompanyId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByRelatedCompanyId = array();
			} else {

				$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

				$this->collRelationsRelatedByRelatedCompanyId = RelationPeer::doSelectJoinUserRelatedByUserId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

			if (!isset($this->lastRelationRelatedByRelatedCompanyIdCriteria) || !$this->lastRelationRelatedByRelatedCompanyIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByRelatedCompanyId = RelationPeer::doSelectJoinUserRelatedByUserId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByRelatedCompanyIdCriteria = $criteria;

		return $this->collRelationsRelatedByRelatedCompanyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related RelationsRelatedByRelatedCompanyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getRelationsRelatedByRelatedCompanyIdJoinUserRelatedByRelatedUserId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByRelatedCompanyId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByRelatedCompanyId = array();
			} else {

				$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

				$this->collRelationsRelatedByRelatedCompanyId = RelationPeer::doSelectJoinUserRelatedByRelatedUserId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

			if (!isset($this->lastRelationRelatedByRelatedCompanyIdCriteria) || !$this->lastRelationRelatedByRelatedCompanyIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByRelatedCompanyId = RelationPeer::doSelectJoinUserRelatedByRelatedUserId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByRelatedCompanyIdCriteria = $criteria;

		return $this->collRelationsRelatedByRelatedCompanyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related RelationsRelatedByRelatedCompanyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getRelationsRelatedByRelatedCompanyIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByRelatedCompanyId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByRelatedCompanyId = array();
			} else {

				$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

				$this->collRelationsRelatedByRelatedCompanyId = RelationPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::RELATED_COMPANY_ID, $this->id);

			if (!isset($this->lastRelationRelatedByRelatedCompanyIdCriteria) || !$this->lastRelationRelatedByRelatedCompanyIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByRelatedCompanyId = RelationPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByRelatedCompanyIdCriteria = $criteria;

		return $this->collRelationsRelatedByRelatedCompanyId;
	}

	/**
	 * Clears out the collProductGroups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProductGroups()
	 */
	public function clearProductGroups()
	{
		$this->collProductGroups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProductGroups collection (array).
	 *
	 * By default this just sets the collProductGroups collection to an empty array (like clearcollProductGroups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProductGroups()
	{
		$this->collProductGroups = array();
	}

	/**
	 * Gets an array of ProductGroup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related ProductGroups from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProductGroup[]
	 * @throws     PropelException
	 */
	public function getProductGroups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductGroups === null) {
			if ($this->isNew()) {
			   $this->collProductGroups = array();
			} else {

				$criteria->add(ProductGroupPeer::COMPANY_ID, $this->id);

				ProductGroupPeer::addSelectColumns($criteria);
				$this->collProductGroups = ProductGroupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProductGroupPeer::COMPANY_ID, $this->id);

				ProductGroupPeer::addSelectColumns($criteria);
				if (!isset($this->lastProductGroupCriteria) || !$this->lastProductGroupCriteria->equals($criteria)) {
					$this->collProductGroups = ProductGroupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProductGroupCriteria = $criteria;
		return $this->collProductGroups;
	}

	/**
	 * Returns the number of related ProductGroup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProductGroup objects.
	 * @throws     PropelException
	 */
	public function countProductGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProductGroups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProductGroupPeer::COMPANY_ID, $this->id);

				$count = ProductGroupPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProductGroupPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastProductGroupCriteria) || !$this->lastProductGroupCriteria->equals($criteria)) {
					$count = ProductGroupPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProductGroups);
				}
			} else {
				$count = count($this->collProductGroups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProductGroup object to this object
	 * through the ProductGroup foreign key attribute.
	 *
	 * @param      ProductGroup $l ProductGroup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProductGroup(ProductGroup $l)
	{
		if ($this->collProductGroups === null) {
			$this->initProductGroups();
		}
		if (!in_array($l, $this->collProductGroups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProductGroups, $l);
			$l->setCompany($this);
		}
	}

	/**
	 * Clears out the collProducts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProducts()
	 */
	public function clearProducts()
	{
		$this->collProducts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProducts collection (array).
	 *
	 * By default this just sets the collProducts collection to an empty array (like clearcollProducts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProducts()
	{
		$this->collProducts = array();
	}

	/**
	 * Gets an array of Product objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related Products from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Product[]
	 * @throws     PropelException
	 */
	public function getProducts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProducts === null) {
			if ($this->isNew()) {
			   $this->collProducts = array();
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				ProductPeer::addSelectColumns($criteria);
				$this->collProducts = ProductPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				ProductPeer::addSelectColumns($criteria);
				if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
					$this->collProducts = ProductPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProductCriteria = $criteria;
		return $this->collProducts;
	}

	/**
	 * Returns the number of related Product objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Product objects.
	 * @throws     PropelException
	 */
	public function countProducts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProducts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				$count = ProductPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
					$count = ProductPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProducts);
				}
			} else {
				$count = count($this->collProducts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Product object to this object
	 * through the Product foreign key attribute.
	 *
	 * @param      Product $l Product
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProduct(Product $l)
	{
		if ($this->collProducts === null) {
			$this->initProducts();
		}
		if (!in_array($l, $this->collProducts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProducts, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Products from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getProductsJoinProductCategory($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProducts === null) {
			if ($this->isNew()) {
				$this->collProducts = array();
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				$this->collProducts = ProductPeer::doSelectJoinProductCategory($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
				$this->collProducts = ProductPeer::doSelectJoinProductCategory($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductCriteria = $criteria;

		return $this->collProducts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Products from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getProductsJoinProductGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProducts === null) {
			if ($this->isNew()) {
				$this->collProducts = array();
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				$this->collProducts = ProductPeer::doSelectJoinProductGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
				$this->collProducts = ProductPeer::doSelectJoinProductGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductCriteria = $criteria;

		return $this->collProducts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Products from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getProductsJoinProductQuantityUnitRelatedByQuantityUnit($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProducts === null) {
			if ($this->isNew()) {
				$this->collProducts = array();
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				$this->collProducts = ProductPeer::doSelectJoinProductQuantityUnitRelatedByQuantityUnit($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
				$this->collProducts = ProductPeer::doSelectJoinProductQuantityUnitRelatedByQuantityUnit($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductCriteria = $criteria;

		return $this->collProducts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Products from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getProductsJoinProductQuantityUnitRelatedByPriceUnit($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProducts === null) {
			if ($this->isNew()) {
				$this->collProducts = array();
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				$this->collProducts = ProductPeer::doSelectJoinProductQuantityUnitRelatedByPriceUnit($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
				$this->collProducts = ProductPeer::doSelectJoinProductQuantityUnitRelatedByPriceUnit($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductCriteria = $criteria;

		return $this->collProducts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Products from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getProductsJoinProductQuantityUnitRelatedByCapacityUnit($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProducts === null) {
			if ($this->isNew()) {
				$this->collProducts = array();
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				$this->collProducts = ProductPeer::doSelectJoinProductQuantityUnitRelatedByCapacityUnit($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
				$this->collProducts = ProductPeer::doSelectJoinProductQuantityUnitRelatedByCapacityUnit($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductCriteria = $criteria;

		return $this->collProducts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Products from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getProductsJoinTimePeriod($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProducts === null) {
			if ($this->isNew()) {
				$this->collProducts = array();
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				$this->collProducts = ProductPeer::doSelectJoinTimePeriod($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
				$this->collProducts = ProductPeer::doSelectJoinTimePeriod($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductCriteria = $criteria;

		return $this->collProducts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Products from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getProductsJoinCompanyBrand($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProducts === null) {
			if ($this->isNew()) {
				$this->collProducts = array();
			} else {

				$criteria->add(ProductPeer::COMPANY_ID, $this->id);

				$this->collProducts = ProductPeer::doSelectJoinCompanyBrand($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastProductCriteria) || !$this->lastProductCriteria->equals($criteria)) {
				$this->collProducts = ProductPeer::doSelectJoinCompanyBrand($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductCriteria = $criteria;

		return $this->collProducts;
	}

	/**
	 * Clears out the collCompanyBrands collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanyBrands()
	 */
	public function clearCompanyBrands()
	{
		$this->collCompanyBrands = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanyBrands collection (array).
	 *
	 * By default this just sets the collCompanyBrands collection to an empty array (like clearcollCompanyBrands());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanyBrands()
	{
		$this->collCompanyBrands = array();
	}

	/**
	 * Gets an array of CompanyBrand objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related CompanyBrands from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompanyBrand[]
	 * @throws     PropelException
	 */
	public function getCompanyBrands($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyBrands === null) {
			if ($this->isNew()) {
			   $this->collCompanyBrands = array();
			} else {

				$criteria->add(CompanyBrandPeer::COMPANY_ID, $this->id);

				CompanyBrandPeer::addSelectColumns($criteria);
				$this->collCompanyBrands = CompanyBrandPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyBrandPeer::COMPANY_ID, $this->id);

				CompanyBrandPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyBrandCriteria) || !$this->lastCompanyBrandCriteria->equals($criteria)) {
					$this->collCompanyBrands = CompanyBrandPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyBrandCriteria = $criteria;
		return $this->collCompanyBrands;
	}

	/**
	 * Returns the number of related CompanyBrand objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompanyBrand objects.
	 * @throws     PropelException
	 */
	public function countCompanyBrands(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanyBrands === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyBrandPeer::COMPANY_ID, $this->id);

				$count = CompanyBrandPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyBrandPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastCompanyBrandCriteria) || !$this->lastCompanyBrandCriteria->equals($criteria)) {
					$count = CompanyBrandPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanyBrands);
				}
			} else {
				$count = count($this->collCompanyBrands);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompanyBrand object to this object
	 * through the CompanyBrand foreign key attribute.
	 *
	 * @param      CompanyBrand $l CompanyBrand
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanyBrand(CompanyBrand $l)
	{
		if ($this->collCompanyBrands === null) {
			$this->initCompanyBrands();
		}
		if (!in_array($l, $this->collCompanyBrands, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanyBrands, $l);
			$l->setCompany($this);
		}
	}

	/**
	 * Clears out the collPlatformAds collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPlatformAds()
	 */
	public function clearPlatformAds()
	{
		$this->collPlatformAds = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPlatformAds collection (array).
	 *
	 * By default this just sets the collPlatformAds collection to an empty array (like clearcollPlatformAds());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPlatformAds()
	{
		$this->collPlatformAds = array();
	}

	/**
	 * Gets an array of PlatformAd objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related PlatformAds from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PlatformAd[]
	 * @throws     PropelException
	 */
	public function getPlatformAds($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlatformAds === null) {
			if ($this->isNew()) {
			   $this->collPlatformAds = array();
			} else {

				$criteria->add(PlatformAdPeer::RELATED_COMPANY_ID, $this->id);

				PlatformAdPeer::addSelectColumns($criteria);
				$this->collPlatformAds = PlatformAdPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PlatformAdPeer::RELATED_COMPANY_ID, $this->id);

				PlatformAdPeer::addSelectColumns($criteria);
				if (!isset($this->lastPlatformAdCriteria) || !$this->lastPlatformAdCriteria->equals($criteria)) {
					$this->collPlatformAds = PlatformAdPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPlatformAdCriteria = $criteria;
		return $this->collPlatformAds;
	}

	/**
	 * Returns the number of related PlatformAd objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PlatformAd objects.
	 * @throws     PropelException
	 */
	public function countPlatformAds(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPlatformAds === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PlatformAdPeer::RELATED_COMPANY_ID, $this->id);

				$count = PlatformAdPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PlatformAdPeer::RELATED_COMPANY_ID, $this->id);

				if (!isset($this->lastPlatformAdCriteria) || !$this->lastPlatformAdCriteria->equals($criteria)) {
					$count = PlatformAdPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPlatformAds);
				}
			} else {
				$count = count($this->collPlatformAds);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PlatformAd object to this object
	 * through the PlatformAd foreign key attribute.
	 *
	 * @param      PlatformAd $l PlatformAd
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPlatformAd(PlatformAd $l)
	{
		if ($this->collPlatformAds === null) {
			$this->initPlatformAds();
		}
		if (!in_array($l, $this->collPlatformAds, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPlatformAds, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related PlatformAds from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getPlatformAdsJoinPlatformAdNamespace($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlatformAds === null) {
			if ($this->isNew()) {
				$this->collPlatformAds = array();
			} else {

				$criteria->add(PlatformAdPeer::RELATED_COMPANY_ID, $this->id);

				$this->collPlatformAds = PlatformAdPeer::doSelectJoinPlatformAdNamespace($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PlatformAdPeer::RELATED_COMPANY_ID, $this->id);

			if (!isset($this->lastPlatformAdCriteria) || !$this->lastPlatformAdCriteria->equals($criteria)) {
				$this->collPlatformAds = PlatformAdPeer::doSelectJoinPlatformAdNamespace($criteria, $con, $join_behavior);
			}
		}
		$this->lastPlatformAdCriteria = $criteria;

		return $this->collPlatformAds;
	}

	/**
	 * Clears out the collB2bLeads collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addB2bLeads()
	 */
	public function clearB2bLeads()
	{
		$this->collB2bLeads = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collB2bLeads collection (array).
	 *
	 * By default this just sets the collB2bLeads collection to an empty array (like clearcollB2bLeads());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initB2bLeads()
	{
		$this->collB2bLeads = array();
	}

	/**
	 * Gets an array of B2bLead objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related B2bLeads from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array B2bLead[]
	 * @throws     PropelException
	 */
	public function getB2bLeads($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collB2bLeads === null) {
			if ($this->isNew()) {
			   $this->collB2bLeads = array();
			} else {

				$criteria->add(B2bLeadPeer::COMPANY_ID, $this->id);

				B2bLeadPeer::addSelectColumns($criteria);
				$this->collB2bLeads = B2bLeadPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(B2bLeadPeer::COMPANY_ID, $this->id);

				B2bLeadPeer::addSelectColumns($criteria);
				if (!isset($this->lastB2bLeadCriteria) || !$this->lastB2bLeadCriteria->equals($criteria)) {
					$this->collB2bLeads = B2bLeadPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastB2bLeadCriteria = $criteria;
		return $this->collB2bLeads;
	}

	/**
	 * Returns the number of related B2bLead objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related B2bLead objects.
	 * @throws     PropelException
	 */
	public function countB2bLeads(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collB2bLeads === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(B2bLeadPeer::COMPANY_ID, $this->id);

				$count = B2bLeadPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(B2bLeadPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastB2bLeadCriteria) || !$this->lastB2bLeadCriteria->equals($criteria)) {
					$count = B2bLeadPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collB2bLeads);
				}
			} else {
				$count = count($this->collB2bLeads);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a B2bLead object to this object
	 * through the B2bLead foreign key attribute.
	 *
	 * @param      B2bLead $l B2bLead
	 * @return     void
	 * @throws     PropelException
	 */
	public function addB2bLead(B2bLead $l)
	{
		if ($this->collB2bLeads === null) {
			$this->initB2bLeads();
		}
		if (!in_array($l, $this->collB2bLeads, true)) { // only add it if the **same** object is not already associated
			array_push($this->collB2bLeads, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related B2bLeads from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getB2bLeadsJoinProductCategory($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collB2bLeads === null) {
			if ($this->isNew()) {
				$this->collB2bLeads = array();
			} else {

				$criteria->add(B2bLeadPeer::COMPANY_ID, $this->id);

				$this->collB2bLeads = B2bLeadPeer::doSelectJoinProductCategory($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(B2bLeadPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastB2bLeadCriteria) || !$this->lastB2bLeadCriteria->equals($criteria)) {
				$this->collB2bLeads = B2bLeadPeer::doSelectJoinProductCategory($criteria, $con, $join_behavior);
			}
		}
		$this->lastB2bLeadCriteria = $criteria;

		return $this->collB2bLeads;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collEmailTransactions) {
				foreach ((array) $this->collEmailTransactions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBlocklists) {
				foreach ((array) $this->collBlocklists as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanyLogins) {
				foreach ((array) $this->collCompanyLogins as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanyUsers) {
				foreach ((array) $this->collCompanyUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeWorks) {
				foreach ((array) $this->collResumeWorks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeReferences) {
				foreach ((array) $this->collResumeReferences as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRelationsRelatedByCompanyId) {
				foreach ((array) $this->collRelationsRelatedByCompanyId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRelationsRelatedByRelatedCompanyId) {
				foreach ((array) $this->collRelationsRelatedByRelatedCompanyId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProductGroups) {
				foreach ((array) $this->collProductGroups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProducts) {
				foreach ((array) $this->collProducts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanyBrands) {
				foreach ((array) $this->collCompanyBrands as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPlatformAds) {
				foreach ((array) $this->collPlatformAds as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collB2bLeads) {
				foreach ((array) $this->collB2bLeads as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collEmailTransactions = null;
		$this->collBlocklists = null;
		$this->collCompanyLogins = null;
		$this->collCompanyUsers = null;
		$this->collResumeWorks = null;
		$this->collResumeReferences = null;
		$this->collRelationsRelatedByCompanyId = null;
		$this->collRelationsRelatedByRelatedCompanyId = null;
		$this->collProductGroups = null;
		$this->collProducts = null;
		$this->collCompanyBrands = null;
		$this->collPlatformAds = null;
		$this->collB2bLeads = null;
			$this->aBusinessType = null;
			$this->aCompanyProfile = null;
			$this->aBusinessSector = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCompany:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCompany::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCompany
