<?php

/**
 * Base class that represents a row from the 'EMT_USER' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/10/12 16:10:10
 *
 * @package    lib.model.om
 */
abstract class BaseUser extends BaseObject  implements Persistent {


  const PEER = 'UserPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the lastname field.
	 * @var        string
	 */
	protected $lastname;

	/**
	 * The value for the login_id field.
	 * @var        int
	 */
	protected $login_id;

	/**
	 * The value for the profile_id field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $profile_id;

	/**
	 * The value for the gender field.
	 * @var        int
	 */
	protected $gender;

	/**
	 * The value for the birthdate field.
	 * @var        string
	 */
	protected $birthdate;

	/**
	 * The value for the alternative_email field.
	 * @var        string
	 */
	protected $alternative_email;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the registration_ip field.
	 * @var        int
	 */
	protected $registration_ip;

	/**
	 * The value for the display_name field.
	 * @var        string
	 */
	protected $display_name;

	/**
	 * The value for the display_lastname field.
	 * @var        string
	 */
	protected $display_lastname;

	/**
	 * @var        Login
	 */
	protected $aLogin;

	/**
	 * @var        UserProfile
	 */
	protected $aUserProfile;

	/**
	 * @var        array EmailTransaction[] Collection to store aggregation of EmailTransaction objects.
	 */
	protected $collEmailTransactions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmailTransactions.
	 */
	private $lastEmailTransactionCriteria = null;

	/**
	 * @var        array Resume[] Collection to store aggregation of Resume objects.
	 */
	protected $collResumes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumes.
	 */
	private $lastResumeCriteria = null;

	/**
	 * @var        array ResumeReference[] Collection to store aggregation of ResumeReference objects.
	 */
	protected $collResumeReferences;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResumeReferences.
	 */
	private $lastResumeReferenceCriteria = null;

	/**
	 * @var        array Relation[] Collection to store aggregation of Relation objects.
	 */
	protected $collRelationsRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelationsRelatedByUserId.
	 */
	private $lastRelationRelatedByUserIdCriteria = null;

	/**
	 * @var        array Relation[] Collection to store aggregation of Relation objects.
	 */
	protected $collRelationsRelatedByRelatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelationsRelatedByRelatedUserId.
	 */
	private $lastRelationRelatedByRelatedUserIdCriteria = null;

	/**
	 * @var        array CustomerMessage[] Collection to store aggregation of CustomerMessage objects.
	 */
	protected $collCustomerMessages;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCustomerMessages.
	 */
	private $lastCustomerMessageCriteria = null;

	/**
	 * @var        array Author[] Collection to store aggregation of Author objects.
	 */
	protected $collAuthors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAuthors.
	 */
	private $lastAuthorCriteria = null;

	/**
	 * @var        array ActionLog[] Collection to store aggregation of ActionLog objects.
	 */
	protected $collActionLogs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActionLogs.
	 */
	private $lastActionLogCriteria = null;

	/**
	 * @var        array ConsentLogin[] Collection to store aggregation of ConsentLogin objects.
	 */
	protected $collConsentLogins;

	/**
	 * @var        Criteria The criteria used to select the current contents of collConsentLogins.
	 */
	private $lastConsentLoginCriteria = null;

	/**
	 * @var        array SelectedHRSector[] Collection to store aggregation of SelectedHRSector objects.
	 */
	protected $collSelectedHRSectors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSelectedHRSectors.
	 */
	private $lastSelectedHRSectorCriteria = null;

	/**
	 * @var        array UserJob[] Collection to store aggregation of UserJob objects.
	 */
	protected $collUserJobs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserJobs.
	 */
	private $lastUserJobCriteria = null;

	/**
	 * @var        array UserBookmark[] Collection to store aggregation of UserBookmark objects.
	 */
	protected $collUserBookmarks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserBookmarks.
	 */
	private $lastUserBookmarkCriteria = null;

	/**
	 * @var        array JobMessage[] Collection to store aggregation of JobMessage objects.
	 */
	protected $collJobMessages;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJobMessages.
	 */
	private $lastJobMessageCriteria = null;

	/**
	 * @var        array ClientUser[] Collection to store aggregation of ClientUser objects.
	 */
	protected $collClientUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collClientUsers.
	 */
	private $lastClientUserCriteria = null;

	/**
	 * @var        array IgnoreAdvise[] Collection to store aggregation of IgnoreAdvise objects.
	 */
	protected $collIgnoreAdvisesRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIgnoreAdvisesRelatedByUserId.
	 */
	private $lastIgnoreAdviseRelatedByUserIdCriteria = null;

	/**
	 * @var        array IgnoreAdvise[] Collection to store aggregation of IgnoreAdvise objects.
	 */
	protected $collIgnoreAdvisesRelatedByRelatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIgnoreAdvisesRelatedByRelatedUserId.
	 */
	private $lastIgnoreAdviseRelatedByRelatedUserIdCriteria = null;

	/**
	 * @var        array WallIgnore[] Collection to store aggregation of WallIgnore objects.
	 */
	protected $collWallIgnores;

	/**
	 * @var        Criteria The criteria used to select the current contents of collWallIgnores.
	 */
	private $lastWallIgnoreCriteria = null;

	/**
	 * @var        array PlatformAdEvent[] Collection to store aggregation of PlatformAdEvent objects.
	 */
	protected $collPlatformAdEvents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPlatformAdEvents.
	 */
	private $lastPlatformAdEventCriteria = null;

	/**
	 * @var        array TransferOwnershipRequest[] Collection to store aggregation of TransferOwnershipRequest objects.
	 */
	protected $collTransferOwnershipRequestsRelatedByProcessInitById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransferOwnershipRequestsRelatedByProcessInitById.
	 */
	private $lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria = null;

	/**
	 * @var        array TransferOwnershipRequest[] Collection to store aggregation of TransferOwnershipRequest objects.
	 */
	protected $collTransferOwnershipRequestsRelatedByCurrentOwnerId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransferOwnershipRequestsRelatedByCurrentOwnerId.
	 */
	private $lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria = null;

	/**
	 * @var        array TransferOwnershipRequest[] Collection to store aggregation of TransferOwnershipRequest objects.
	 */
	protected $collTransferOwnershipRequestsRelatedByNewOwnerId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransferOwnershipRequestsRelatedByNewOwnerId.
	 */
	private $lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseUser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->profile_id = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [lastname] column value.
	 * 
	 * @return     string
	 */
	public function getLastname()
	{
		return $this->lastname;
	}

	/**
	 * Get the [login_id] column value.
	 * 
	 * @return     int
	 */
	public function getLoginId()
	{
		return $this->login_id;
	}

	/**
	 * Get the [profile_id] column value.
	 * 
	 * @return     int
	 */
	public function getProfileId()
	{
		return $this->profile_id;
	}

	/**
	 * Get the [gender] column value.
	 * 
	 * @return     int
	 */
	public function getGender()
	{
		return $this->gender;
	}

	/**
	 * Get the [optionally formatted] temporal [birthdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBirthdate($format = 'Y-m-d')
	{
		if ($this->birthdate === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->birthdate);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->birthdate, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [alternative_email] column value.
	 * 
	 * @return     string
	 */
	public function getAlternativeEmail()
	{
		return $this->alternative_email;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-M-D H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [registration_ip] column value.
	 * 
	 * @return     int
	 */
	public function getRegistrationIp()
	{
		return $this->registration_ip;
	}

	/**
	 * Get the [display_name] column value.
	 * 
	 * @return     string
	 */
	public function getDisplayName()
	{
		return $this->display_name;
	}

	/**
	 * Get the [display_lastname] column value.
	 * 
	 * @return     string
	 */
	public function getDisplayLastname()
	{
		return $this->display_lastname;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = UserPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [lastname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setLastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastname !== $v) {
			$this->lastname = $v;
			$this->modifiedColumns[] = UserPeer::LASTNAME;
		}

		return $this;
	} // setLastname()

	/**
	 * Set the value of [login_id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setLoginId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->login_id !== $v) {
			$this->login_id = $v;
			$this->modifiedColumns[] = UserPeer::LOGIN_ID;
		}

		if ($this->aLogin !== null && $this->aLogin->getId() !== $v) {
			$this->aLogin = null;
		}

		return $this;
	} // setLoginId()

	/**
	 * Set the value of [profile_id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setProfileId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profile_id !== $v || $v === 0) {
			$this->profile_id = $v;
			$this->modifiedColumns[] = UserPeer::PROFILE_ID;
		}

		if ($this->aUserProfile !== null && $this->aUserProfile->getId() !== $v) {
			$this->aUserProfile = null;
		}

		return $this;
	} // setProfileId()

	/**
	 * Set the value of [gender] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setGender($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->gender !== $v) {
			$this->gender = $v;
			$this->modifiedColumns[] = UserPeer::GENDER;
		}

		return $this;
	} // setGender()

	/**
	 * Sets the value of [birthdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setBirthdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->birthdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->birthdate !== null && $tmpDt = new DateTime($this->birthdate)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->birthdate = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = UserPeer::BIRTHDATE;
			}
		} // if either are not null

		return $this;
	} // setBirthdate()

	/**
	 * Set the value of [alternative_email] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setAlternativeEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alternative_email !== $v) {
			$this->alternative_email = $v;
			$this->modifiedColumns[] = UserPeer::ALTERNATIVE_EMAIL;
		}

		return $this;
	} // setAlternativeEmail()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [registration_ip] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setRegistrationIp($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->registration_ip !== $v) {
			$this->registration_ip = $v;
			$this->modifiedColumns[] = UserPeer::REGISTRATION_IP;
		}

		return $this;
	} // setRegistrationIp()

	/**
	 * Set the value of [display_name] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setDisplayName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->display_name !== $v) {
			$this->display_name = $v;
			$this->modifiedColumns[] = UserPeer::DISPLAY_NAME;
		}

		return $this;
	} // setDisplayName()

	/**
	 * Set the value of [display_lastname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setDisplayLastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->display_lastname !== $v) {
			$this->display_lastname = $v;
			$this->modifiedColumns[] = UserPeer::DISPLAY_LASTNAME;
		}

		return $this;
	} // setDisplayLastname()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(UserPeer::PROFILE_ID))) {
				return false;
			}

			if ($this->profile_id !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->lastname = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->login_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->profile_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->gender = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->birthdate = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->alternative_email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->created_at = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->updated_at = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->registration_ip = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->display_name = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->display_lastname = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 13; // 13 = UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating User object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aLogin !== null && $this->login_id !== $this->aLogin->getId()) {
			$this->aLogin = null;
		}
		if ($this->aUserProfile !== null && $this->profile_id !== $this->aUserProfile->getId()) {
			$this->aUserProfile = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aLogin = null;
			$this->aUserProfile = null;
			$this->collEmailTransactions = null;
			$this->lastEmailTransactionCriteria = null;

			$this->collResumes = null;
			$this->lastResumeCriteria = null;

			$this->collResumeReferences = null;
			$this->lastResumeReferenceCriteria = null;

			$this->collRelationsRelatedByUserId = null;
			$this->lastRelationRelatedByUserIdCriteria = null;

			$this->collRelationsRelatedByRelatedUserId = null;
			$this->lastRelationRelatedByRelatedUserIdCriteria = null;

			$this->collCustomerMessages = null;
			$this->lastCustomerMessageCriteria = null;

			$this->collAuthors = null;
			$this->lastAuthorCriteria = null;

			$this->collActionLogs = null;
			$this->lastActionLogCriteria = null;

			$this->collConsentLogins = null;
			$this->lastConsentLoginCriteria = null;

			$this->collSelectedHRSectors = null;
			$this->lastSelectedHRSectorCriteria = null;

			$this->collUserJobs = null;
			$this->lastUserJobCriteria = null;

			$this->collUserBookmarks = null;
			$this->lastUserBookmarkCriteria = null;

			$this->collJobMessages = null;
			$this->lastJobMessageCriteria = null;

			$this->collClientUsers = null;
			$this->lastClientUserCriteria = null;

			$this->collIgnoreAdvisesRelatedByUserId = null;
			$this->lastIgnoreAdviseRelatedByUserIdCriteria = null;

			$this->collIgnoreAdvisesRelatedByRelatedUserId = null;
			$this->lastIgnoreAdviseRelatedByRelatedUserIdCriteria = null;

			$this->collWallIgnores = null;
			$this->lastWallIgnoreCriteria = null;

			$this->collPlatformAdEvents = null;
			$this->lastPlatformAdEventCriteria = null;

			$this->collTransferOwnershipRequestsRelatedByProcessInitById = null;
			$this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria = null;

			$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = null;
			$this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria = null;

			$this->collTransferOwnershipRequestsRelatedByNewOwnerId = null;
			$this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUser:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			UserPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseUser:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUser:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(UserPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(UserPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseUser:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			UserPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aLogin !== null) {
				if ($this->aLogin->isModified() || $this->aLogin->isNew()) {
					$affectedRows += $this->aLogin->save($con);
				}
				$this->setLogin($this->aLogin);
			}

			if ($this->aUserProfile !== null) {
				if ($this->aUserProfile->isModified() || $this->aUserProfile->isNew()) {
					$affectedRows += $this->aUserProfile->save($con);
				}
				$this->setUserProfile($this->aUserProfile);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collEmailTransactions !== null) {
				foreach ($this->collEmailTransactions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumes !== null) {
				foreach ($this->collResumes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResumeReferences !== null) {
				foreach ($this->collResumeReferences as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRelationsRelatedByUserId !== null) {
				foreach ($this->collRelationsRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRelationsRelatedByRelatedUserId !== null) {
				foreach ($this->collRelationsRelatedByRelatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCustomerMessages !== null) {
				foreach ($this->collCustomerMessages as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAuthors !== null) {
				foreach ($this->collAuthors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collActionLogs !== null) {
				foreach ($this->collActionLogs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collConsentLogins !== null) {
				foreach ($this->collConsentLogins as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSelectedHRSectors !== null) {
				foreach ($this->collSelectedHRSectors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserJobs !== null) {
				foreach ($this->collUserJobs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserBookmarks !== null) {
				foreach ($this->collUserBookmarks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJobMessages !== null) {
				foreach ($this->collJobMessages as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collClientUsers !== null) {
				foreach ($this->collClientUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIgnoreAdvisesRelatedByUserId !== null) {
				foreach ($this->collIgnoreAdvisesRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIgnoreAdvisesRelatedByRelatedUserId !== null) {
				foreach ($this->collIgnoreAdvisesRelatedByRelatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collWallIgnores !== null) {
				foreach ($this->collWallIgnores as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPlatformAdEvents !== null) {
				foreach ($this->collPlatformAdEvents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransferOwnershipRequestsRelatedByProcessInitById !== null) {
				foreach ($this->collTransferOwnershipRequestsRelatedByProcessInitById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId !== null) {
				foreach ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransferOwnershipRequestsRelatedByNewOwnerId !== null) {
				foreach ($this->collTransferOwnershipRequestsRelatedByNewOwnerId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aLogin !== null) {
				if (!$this->aLogin->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLogin->getValidationFailures());
				}
			}

			if ($this->aUserProfile !== null) {
				if (!$this->aUserProfile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUserProfile->getValidationFailures());
				}
			}


			if (($retval = UserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collEmailTransactions !== null) {
					foreach ($this->collEmailTransactions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumes !== null) {
					foreach ($this->collResumes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResumeReferences !== null) {
					foreach ($this->collResumeReferences as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRelationsRelatedByUserId !== null) {
					foreach ($this->collRelationsRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRelationsRelatedByRelatedUserId !== null) {
					foreach ($this->collRelationsRelatedByRelatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCustomerMessages !== null) {
					foreach ($this->collCustomerMessages as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAuthors !== null) {
					foreach ($this->collAuthors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collActionLogs !== null) {
					foreach ($this->collActionLogs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collConsentLogins !== null) {
					foreach ($this->collConsentLogins as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSelectedHRSectors !== null) {
					foreach ($this->collSelectedHRSectors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserJobs !== null) {
					foreach ($this->collUserJobs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserBookmarks !== null) {
					foreach ($this->collUserBookmarks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJobMessages !== null) {
					foreach ($this->collJobMessages as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collClientUsers !== null) {
					foreach ($this->collClientUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIgnoreAdvisesRelatedByUserId !== null) {
					foreach ($this->collIgnoreAdvisesRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIgnoreAdvisesRelatedByRelatedUserId !== null) {
					foreach ($this->collIgnoreAdvisesRelatedByRelatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collWallIgnores !== null) {
					foreach ($this->collWallIgnores as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPlatformAdEvents !== null) {
					foreach ($this->collPlatformAdEvents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransferOwnershipRequestsRelatedByProcessInitById !== null) {
					foreach ($this->collTransferOwnershipRequestsRelatedByProcessInitById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId !== null) {
					foreach ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransferOwnershipRequestsRelatedByNewOwnerId !== null) {
					foreach ($this->collTransferOwnershipRequestsRelatedByNewOwnerId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getLastname();
				break;
			case 3:
				return $this->getLoginId();
				break;
			case 4:
				return $this->getProfileId();
				break;
			case 5:
				return $this->getGender();
				break;
			case 6:
				return $this->getBirthdate();
				break;
			case 7:
				return $this->getAlternativeEmail();
				break;
			case 8:
				return $this->getCreatedAt();
				break;
			case 9:
				return $this->getUpdatedAt();
				break;
			case 10:
				return $this->getRegistrationIp();
				break;
			case 11:
				return $this->getDisplayName();
				break;
			case 12:
				return $this->getDisplayLastname();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getLastname(),
			$keys[3] => $this->getLoginId(),
			$keys[4] => $this->getProfileId(),
			$keys[5] => $this->getGender(),
			$keys[6] => $this->getBirthdate(),
			$keys[7] => $this->getAlternativeEmail(),
			$keys[8] => $this->getCreatedAt(),
			$keys[9] => $this->getUpdatedAt(),
			$keys[10] => $this->getRegistrationIp(),
			$keys[11] => $this->getDisplayName(),
			$keys[12] => $this->getDisplayLastname(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setLastname($value);
				break;
			case 3:
				$this->setLoginId($value);
				break;
			case 4:
				$this->setProfileId($value);
				break;
			case 5:
				$this->setGender($value);
				break;
			case 6:
				$this->setBirthdate($value);
				break;
			case 7:
				$this->setAlternativeEmail($value);
				break;
			case 8:
				$this->setCreatedAt($value);
				break;
			case 9:
				$this->setUpdatedAt($value);
				break;
			case 10:
				$this->setRegistrationIp($value);
				break;
			case 11:
				$this->setDisplayName($value);
				break;
			case 12:
				$this->setDisplayLastname($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLastname($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setLoginId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setProfileId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setGender($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setBirthdate($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAlternativeEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCreatedAt($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setUpdatedAt($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setRegistrationIp($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDisplayName($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDisplayLastname($arr[$keys[12]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		if ($this->isColumnModified(UserPeer::ID)) $criteria->add(UserPeer::ID, $this->id);
		if ($this->isColumnModified(UserPeer::NAME)) $criteria->add(UserPeer::NAME, $this->name);
		if ($this->isColumnModified(UserPeer::LASTNAME)) $criteria->add(UserPeer::LASTNAME, $this->lastname);
		if ($this->isColumnModified(UserPeer::LOGIN_ID)) $criteria->add(UserPeer::LOGIN_ID, $this->login_id);
		if ($this->isColumnModified(UserPeer::PROFILE_ID)) $criteria->add(UserPeer::PROFILE_ID, $this->profile_id);
		if ($this->isColumnModified(UserPeer::GENDER)) $criteria->add(UserPeer::GENDER, $this->gender);
		if ($this->isColumnModified(UserPeer::BIRTHDATE)) $criteria->add(UserPeer::BIRTHDATE, $this->birthdate);
		if ($this->isColumnModified(UserPeer::ALTERNATIVE_EMAIL)) $criteria->add(UserPeer::ALTERNATIVE_EMAIL, $this->alternative_email);
		if ($this->isColumnModified(UserPeer::CREATED_AT)) $criteria->add(UserPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(UserPeer::UPDATED_AT)) $criteria->add(UserPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(UserPeer::REGISTRATION_IP)) $criteria->add(UserPeer::REGISTRATION_IP, $this->registration_ip);
		if ($this->isColumnModified(UserPeer::DISPLAY_NAME)) $criteria->add(UserPeer::DISPLAY_NAME, $this->display_name);
		if ($this->isColumnModified(UserPeer::DISPLAY_LASTNAME)) $criteria->add(UserPeer::DISPLAY_LASTNAME, $this->display_lastname);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		$criteria->add(UserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of User (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setLastname($this->lastname);

		$copyObj->setLoginId($this->login_id);

		$copyObj->setProfileId($this->profile_id);

		$copyObj->setGender($this->gender);

		$copyObj->setBirthdate($this->birthdate);

		$copyObj->setAlternativeEmail($this->alternative_email);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setRegistrationIp($this->registration_ip);

		$copyObj->setDisplayName($this->display_name);

		$copyObj->setDisplayLastname($this->display_lastname);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getEmailTransactions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmailTransaction($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResume($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResumeReferences() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResumeReference($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRelationsRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelationRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRelationsRelatedByRelatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelationRelatedByRelatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCustomerMessages() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCustomerMessage($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAuthors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAuthor($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getActionLogs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActionLog($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getConsentLogins() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addConsentLogin($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSelectedHRSectors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSelectedHRSector($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserJobs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserJob($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserBookmarks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserBookmark($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJobMessages() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJobMessage($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getClientUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addClientUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIgnoreAdvisesRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIgnoreAdviseRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIgnoreAdvisesRelatedByRelatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIgnoreAdviseRelatedByRelatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getWallIgnores() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addWallIgnore($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPlatformAdEvents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPlatformAdEvent($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransferOwnershipRequestsRelatedByProcessInitById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransferOwnershipRequestRelatedByProcessInitById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransferOwnershipRequestsRelatedByCurrentOwnerId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransferOwnershipRequestRelatedByCurrentOwnerId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransferOwnershipRequestsRelatedByNewOwnerId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransferOwnershipRequestRelatedByNewOwnerId($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     User Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UserPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Login object.
	 *
	 * @param      Login $v
	 * @return     User The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLogin(Login $v = null)
	{
		if ($v === null) {
			$this->setLoginId(NULL);
		} else {
			$this->setLoginId($v->getId());
		}

		$this->aLogin = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Login object, it will not be re-added.
		if ($v !== null) {
			$v->addUser($this);
		}

		return $this;
	}


	/**
	 * Get the associated Login object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Login The associated Login object.
	 * @throws     PropelException
	 */
	public function getLogin(PropelPDO $con = null)
	{
		if ($this->aLogin === null && ($this->login_id !== null)) {
			$c = new Criteria(LoginPeer::DATABASE_NAME);
			$c->add(LoginPeer::ID, $this->login_id);
			$this->aLogin = LoginPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aLogin->addUsers($this);
			 */
		}
		return $this->aLogin;
	}

	/**
	 * Declares an association between this object and a UserProfile object.
	 *
	 * @param      UserProfile $v
	 * @return     User The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUserProfile(UserProfile $v = null)
	{
		if ($v === null) {
			$this->setProfileId(0);
		} else {
			$this->setProfileId($v->getId());
		}

		$this->aUserProfile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UserProfile object, it will not be re-added.
		if ($v !== null) {
			$v->addUser($this);
		}

		return $this;
	}


	/**
	 * Get the associated UserProfile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UserProfile The associated UserProfile object.
	 * @throws     PropelException
	 */
	public function getUserProfile(PropelPDO $con = null)
	{
		if ($this->aUserProfile === null && ($this->profile_id !== null)) {
			$c = new Criteria(UserProfilePeer::DATABASE_NAME);
			$c->add(UserProfilePeer::ID, $this->profile_id);
			$this->aUserProfile = UserProfilePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUserProfile->addUsers($this);
			 */
		}
		return $this->aUserProfile;
	}

	/**
	 * Clears out the collEmailTransactions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmailTransactions()
	 */
	public function clearEmailTransactions()
	{
		$this->collEmailTransactions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmailTransactions collection (array).
	 *
	 * By default this just sets the collEmailTransactions collection to an empty array (like clearcollEmailTransactions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmailTransactions()
	{
		$this->collEmailTransactions = array();
	}

	/**
	 * Gets an array of EmailTransaction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related EmailTransactions from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmailTransaction[]
	 * @throws     PropelException
	 */
	public function getEmailTransactions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailTransactions === null) {
			if ($this->isNew()) {
			   $this->collEmailTransactions = array();
			} else {

				$criteria->add(EmailTransactionPeer::RCPNT_USER_ID, $this->id);

				EmailTransactionPeer::addSelectColumns($criteria);
				$this->collEmailTransactions = EmailTransactionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmailTransactionPeer::RCPNT_USER_ID, $this->id);

				EmailTransactionPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmailTransactionCriteria) || !$this->lastEmailTransactionCriteria->equals($criteria)) {
					$this->collEmailTransactions = EmailTransactionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmailTransactionCriteria = $criteria;
		return $this->collEmailTransactions;
	}

	/**
	 * Returns the number of related EmailTransaction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmailTransaction objects.
	 * @throws     PropelException
	 */
	public function countEmailTransactions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmailTransactions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmailTransactionPeer::RCPNT_USER_ID, $this->id);

				$count = EmailTransactionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmailTransactionPeer::RCPNT_USER_ID, $this->id);

				if (!isset($this->lastEmailTransactionCriteria) || !$this->lastEmailTransactionCriteria->equals($criteria)) {
					$count = EmailTransactionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmailTransactions);
				}
			} else {
				$count = count($this->collEmailTransactions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmailTransaction object to this object
	 * through the EmailTransaction foreign key attribute.
	 *
	 * @param      EmailTransaction $l EmailTransaction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmailTransaction(EmailTransaction $l)
	{
		if ($this->collEmailTransactions === null) {
			$this->initEmailTransactions();
		}
		if (!in_array($l, $this->collEmailTransactions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmailTransactions, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related EmailTransactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getEmailTransactionsJoinEmailTransactionNamespace($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailTransactions === null) {
			if ($this->isNew()) {
				$this->collEmailTransactions = array();
			} else {

				$criteria->add(EmailTransactionPeer::RCPNT_USER_ID, $this->id);

				$this->collEmailTransactions = EmailTransactionPeer::doSelectJoinEmailTransactionNamespace($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmailTransactionPeer::RCPNT_USER_ID, $this->id);

			if (!isset($this->lastEmailTransactionCriteria) || !$this->lastEmailTransactionCriteria->equals($criteria)) {
				$this->collEmailTransactions = EmailTransactionPeer::doSelectJoinEmailTransactionNamespace($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmailTransactionCriteria = $criteria;

		return $this->collEmailTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related EmailTransactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getEmailTransactionsJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailTransactions === null) {
			if ($this->isNew()) {
				$this->collEmailTransactions = array();
			} else {

				$criteria->add(EmailTransactionPeer::RCPNT_USER_ID, $this->id);

				$this->collEmailTransactions = EmailTransactionPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmailTransactionPeer::RCPNT_USER_ID, $this->id);

			if (!isset($this->lastEmailTransactionCriteria) || !$this->lastEmailTransactionCriteria->equals($criteria)) {
				$this->collEmailTransactions = EmailTransactionPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmailTransactionCriteria = $criteria;

		return $this->collEmailTransactions;
	}

	/**
	 * Clears out the collResumes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumes()
	 */
	public function clearResumes()
	{
		$this->collResumes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumes collection (array).
	 *
	 * By default this just sets the collResumes collection to an empty array (like clearcollResumes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumes()
	{
		$this->collResumes = array();
	}

	/**
	 * Gets an array of Resume objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Resumes from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Resume[]
	 * @throws     PropelException
	 */
	public function getResumes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumes === null) {
			if ($this->isNew()) {
			   $this->collResumes = array();
			} else {

				$criteria->add(ResumePeer::USER_ID, $this->id);

				ResumePeer::addSelectColumns($criteria);
				$this->collResumes = ResumePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumePeer::USER_ID, $this->id);

				ResumePeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeCriteria) || !$this->lastResumeCriteria->equals($criteria)) {
					$this->collResumes = ResumePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeCriteria = $criteria;
		return $this->collResumes;
	}

	/**
	 * Returns the number of related Resume objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Resume objects.
	 * @throws     PropelException
	 */
	public function countResumes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumePeer::USER_ID, $this->id);

				$count = ResumePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumePeer::USER_ID, $this->id);

				if (!isset($this->lastResumeCriteria) || !$this->lastResumeCriteria->equals($criteria)) {
					$count = ResumePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumes);
				}
			} else {
				$count = count($this->collResumes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Resume object to this object
	 * through the Resume foreign key attribute.
	 *
	 * @param      Resume $l Resume
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResume(Resume $l)
	{
		if ($this->collResumes === null) {
			$this->initResumes();
		}
		if (!in_array($l, $this->collResumes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumes, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Resumes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getResumesJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumes === null) {
			if ($this->isNew()) {
				$this->collResumes = array();
			} else {

				$criteria->add(ResumePeer::USER_ID, $this->id);

				$this->collResumes = ResumePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumePeer::USER_ID, $this->id);

			if (!isset($this->lastResumeCriteria) || !$this->lastResumeCriteria->equals($criteria)) {
				$this->collResumes = ResumePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeCriteria = $criteria;

		return $this->collResumes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Resumes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getResumesJoinJobPosition($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumes === null) {
			if ($this->isNew()) {
				$this->collResumes = array();
			} else {

				$criteria->add(ResumePeer::USER_ID, $this->id);

				$this->collResumes = ResumePeer::doSelectJoinJobPosition($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumePeer::USER_ID, $this->id);

			if (!isset($this->lastResumeCriteria) || !$this->lastResumeCriteria->equals($criteria)) {
				$this->collResumes = ResumePeer::doSelectJoinJobPosition($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeCriteria = $criteria;

		return $this->collResumes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Resumes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getResumesJoinJobGrade($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumes === null) {
			if ($this->isNew()) {
				$this->collResumes = array();
			} else {

				$criteria->add(ResumePeer::USER_ID, $this->id);

				$this->collResumes = ResumePeer::doSelectJoinJobGrade($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumePeer::USER_ID, $this->id);

			if (!isset($this->lastResumeCriteria) || !$this->lastResumeCriteria->equals($criteria)) {
				$this->collResumes = ResumePeer::doSelectJoinJobGrade($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeCriteria = $criteria;

		return $this->collResumes;
	}

	/**
	 * Clears out the collResumeReferences collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResumeReferences()
	 */
	public function clearResumeReferences()
	{
		$this->collResumeReferences = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResumeReferences collection (array).
	 *
	 * By default this just sets the collResumeReferences collection to an empty array (like clearcollResumeReferences());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResumeReferences()
	{
		$this->collResumeReferences = array();
	}

	/**
	 * Gets an array of ResumeReference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ResumeReferences from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResumeReference[]
	 * @throws     PropelException
	 */
	public function getResumeReferences($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
			   $this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

				ResumeReferencePeer::addSelectColumns($criteria);
				$this->collResumeReferences = ResumeReferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

				ResumeReferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
					$this->collResumeReferences = ResumeReferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;
		return $this->collResumeReferences;
	}

	/**
	 * Returns the number of related ResumeReference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResumeReference objects.
	 * @throws     PropelException
	 */
	public function countResumeReferences(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

				$count = ResumeReferencePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

				if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
					$count = ResumeReferencePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResumeReferences);
				}
			} else {
				$count = count($this->collResumeReferences);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResumeReference object to this object
	 * through the ResumeReference foreign key attribute.
	 *
	 * @param      ResumeReference $l ResumeReference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResumeReference(ResumeReference $l)
	{
		if ($this->collResumeReferences === null) {
			$this->initResumeReferences();
		}
		if (!in_array($l, $this->collResumeReferences, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResumeReferences, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getResumeReferencesJoinResume($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinResume($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinResume($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getResumeReferencesJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ResumeReferences from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getResumeReferencesJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResumeReferences === null) {
			if ($this->isNew()) {
				$this->collResumeReferences = array();
			} else {

				$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ResumeReferencePeer::USER_ID, $this->id);

			if (!isset($this->lastResumeReferenceCriteria) || !$this->lastResumeReferenceCriteria->equals($criteria)) {
				$this->collResumeReferences = ResumeReferencePeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastResumeReferenceCriteria = $criteria;

		return $this->collResumeReferences;
	}

	/**
	 * Clears out the collRelationsRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelationsRelatedByUserId()
	 */
	public function clearRelationsRelatedByUserId()
	{
		$this->collRelationsRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelationsRelatedByUserId collection (array).
	 *
	 * By default this just sets the collRelationsRelatedByUserId collection to an empty array (like clearcollRelationsRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelationsRelatedByUserId()
	{
		$this->collRelationsRelatedByUserId = array();
	}

	/**
	 * Gets an array of Relation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related RelationsRelatedByUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Relation[]
	 * @throws     PropelException
	 */
	public function getRelationsRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collRelationsRelatedByUserId = array();
			} else {

				$criteria->add(RelationPeer::USER_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				$this->collRelationsRelatedByUserId = RelationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationPeer::USER_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationRelatedByUserIdCriteria) || !$this->lastRelationRelatedByUserIdCriteria->equals($criteria)) {
					$this->collRelationsRelatedByUserId = RelationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationRelatedByUserIdCriteria = $criteria;
		return $this->collRelationsRelatedByUserId;
	}

	/**
	 * Returns the number of related Relation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Relation objects.
	 * @throws     PropelException
	 */
	public function countRelationsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelationsRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationPeer::USER_ID, $this->id);

				$count = RelationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationPeer::USER_ID, $this->id);

				if (!isset($this->lastRelationRelatedByUserIdCriteria) || !$this->lastRelationRelatedByUserIdCriteria->equals($criteria)) {
					$count = RelationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelationsRelatedByUserId);
				}
			} else {
				$count = count($this->collRelationsRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Relation object to this object
	 * through the Relation foreign key attribute.
	 *
	 * @param      Relation $l Relation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelationRelatedByUserId(Relation $l)
	{
		if ($this->collRelationsRelatedByUserId === null) {
			$this->initRelationsRelatedByUserId();
		}
		if (!in_array($l, $this->collRelationsRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelationsRelatedByUserId, $l);
			$l->setUserRelatedByUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related RelationsRelatedByUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getRelationsRelatedByUserIdJoinCompanyRelatedByCompanyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByUserId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByUserId = array();
			} else {

				$criteria->add(RelationPeer::USER_ID, $this->id);

				$this->collRelationsRelatedByUserId = RelationPeer::doSelectJoinCompanyRelatedByCompanyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::USER_ID, $this->id);

			if (!isset($this->lastRelationRelatedByUserIdCriteria) || !$this->lastRelationRelatedByUserIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByUserId = RelationPeer::doSelectJoinCompanyRelatedByCompanyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByUserIdCriteria = $criteria;

		return $this->collRelationsRelatedByUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related RelationsRelatedByUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getRelationsRelatedByUserIdJoinCompanyRelatedByRelatedCompanyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByUserId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByUserId = array();
			} else {

				$criteria->add(RelationPeer::USER_ID, $this->id);

				$this->collRelationsRelatedByUserId = RelationPeer::doSelectJoinCompanyRelatedByRelatedCompanyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::USER_ID, $this->id);

			if (!isset($this->lastRelationRelatedByUserIdCriteria) || !$this->lastRelationRelatedByUserIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByUserId = RelationPeer::doSelectJoinCompanyRelatedByRelatedCompanyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByUserIdCriteria = $criteria;

		return $this->collRelationsRelatedByUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related RelationsRelatedByUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getRelationsRelatedByUserIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByUserId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByUserId = array();
			} else {

				$criteria->add(RelationPeer::USER_ID, $this->id);

				$this->collRelationsRelatedByUserId = RelationPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::USER_ID, $this->id);

			if (!isset($this->lastRelationRelatedByUserIdCriteria) || !$this->lastRelationRelatedByUserIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByUserId = RelationPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByUserIdCriteria = $criteria;

		return $this->collRelationsRelatedByUserId;
	}

	/**
	 * Clears out the collRelationsRelatedByRelatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelationsRelatedByRelatedUserId()
	 */
	public function clearRelationsRelatedByRelatedUserId()
	{
		$this->collRelationsRelatedByRelatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelationsRelatedByRelatedUserId collection (array).
	 *
	 * By default this just sets the collRelationsRelatedByRelatedUserId collection to an empty array (like clearcollRelationsRelatedByRelatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelationsRelatedByRelatedUserId()
	{
		$this->collRelationsRelatedByRelatedUserId = array();
	}

	/**
	 * Gets an array of Relation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related RelationsRelatedByRelatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Relation[]
	 * @throws     PropelException
	 */
	public function getRelationsRelatedByRelatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByRelatedUserId === null) {
			if ($this->isNew()) {
			   $this->collRelationsRelatedByRelatedUserId = array();
			} else {

				$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				$this->collRelationsRelatedByRelatedUserId = RelationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

				RelationPeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationRelatedByRelatedUserIdCriteria) || !$this->lastRelationRelatedByRelatedUserIdCriteria->equals($criteria)) {
					$this->collRelationsRelatedByRelatedUserId = RelationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationRelatedByRelatedUserIdCriteria = $criteria;
		return $this->collRelationsRelatedByRelatedUserId;
	}

	/**
	 * Returns the number of related Relation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Relation objects.
	 * @throws     PropelException
	 */
	public function countRelationsRelatedByRelatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelationsRelatedByRelatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

				$count = RelationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

				if (!isset($this->lastRelationRelatedByRelatedUserIdCriteria) || !$this->lastRelationRelatedByRelatedUserIdCriteria->equals($criteria)) {
					$count = RelationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelationsRelatedByRelatedUserId);
				}
			} else {
				$count = count($this->collRelationsRelatedByRelatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Relation object to this object
	 * through the Relation foreign key attribute.
	 *
	 * @param      Relation $l Relation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelationRelatedByRelatedUserId(Relation $l)
	{
		if ($this->collRelationsRelatedByRelatedUserId === null) {
			$this->initRelationsRelatedByRelatedUserId();
		}
		if (!in_array($l, $this->collRelationsRelatedByRelatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelationsRelatedByRelatedUserId, $l);
			$l->setUserRelatedByRelatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related RelationsRelatedByRelatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getRelationsRelatedByRelatedUserIdJoinCompanyRelatedByCompanyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByRelatedUserId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByRelatedUserId = array();
			} else {

				$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

				$this->collRelationsRelatedByRelatedUserId = RelationPeer::doSelectJoinCompanyRelatedByCompanyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

			if (!isset($this->lastRelationRelatedByRelatedUserIdCriteria) || !$this->lastRelationRelatedByRelatedUserIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByRelatedUserId = RelationPeer::doSelectJoinCompanyRelatedByCompanyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByRelatedUserIdCriteria = $criteria;

		return $this->collRelationsRelatedByRelatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related RelationsRelatedByRelatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getRelationsRelatedByRelatedUserIdJoinCompanyRelatedByRelatedCompanyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByRelatedUserId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByRelatedUserId = array();
			} else {

				$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

				$this->collRelationsRelatedByRelatedUserId = RelationPeer::doSelectJoinCompanyRelatedByRelatedCompanyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

			if (!isset($this->lastRelationRelatedByRelatedUserIdCriteria) || !$this->lastRelationRelatedByRelatedUserIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByRelatedUserId = RelationPeer::doSelectJoinCompanyRelatedByRelatedCompanyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByRelatedUserIdCriteria = $criteria;

		return $this->collRelationsRelatedByRelatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related RelationsRelatedByRelatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getRelationsRelatedByRelatedUserIdJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationsRelatedByRelatedUserId === null) {
			if ($this->isNew()) {
				$this->collRelationsRelatedByRelatedUserId = array();
			} else {

				$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

				$this->collRelationsRelatedByRelatedUserId = RelationPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelationPeer::RELATED_USER_ID, $this->id);

			if (!isset($this->lastRelationRelatedByRelatedUserIdCriteria) || !$this->lastRelationRelatedByRelatedUserIdCriteria->equals($criteria)) {
				$this->collRelationsRelatedByRelatedUserId = RelationPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelationRelatedByRelatedUserIdCriteria = $criteria;

		return $this->collRelationsRelatedByRelatedUserId;
	}

	/**
	 * Clears out the collCustomerMessages collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCustomerMessages()
	 */
	public function clearCustomerMessages()
	{
		$this->collCustomerMessages = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCustomerMessages collection (array).
	 *
	 * By default this just sets the collCustomerMessages collection to an empty array (like clearcollCustomerMessages());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCustomerMessages()
	{
		$this->collCustomerMessages = array();
	}

	/**
	 * Gets an array of CustomerMessage objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related CustomerMessages from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CustomerMessage[]
	 * @throws     PropelException
	 */
	public function getCustomerMessages($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerMessages === null) {
			if ($this->isNew()) {
			   $this->collCustomerMessages = array();
			} else {

				$criteria->add(CustomerMessagePeer::USER_ID, $this->id);

				CustomerMessagePeer::addSelectColumns($criteria);
				$this->collCustomerMessages = CustomerMessagePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CustomerMessagePeer::USER_ID, $this->id);

				CustomerMessagePeer::addSelectColumns($criteria);
				if (!isset($this->lastCustomerMessageCriteria) || !$this->lastCustomerMessageCriteria->equals($criteria)) {
					$this->collCustomerMessages = CustomerMessagePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCustomerMessageCriteria = $criteria;
		return $this->collCustomerMessages;
	}

	/**
	 * Returns the number of related CustomerMessage objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CustomerMessage objects.
	 * @throws     PropelException
	 */
	public function countCustomerMessages(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCustomerMessages === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CustomerMessagePeer::USER_ID, $this->id);

				$count = CustomerMessagePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CustomerMessagePeer::USER_ID, $this->id);

				if (!isset($this->lastCustomerMessageCriteria) || !$this->lastCustomerMessageCriteria->equals($criteria)) {
					$count = CustomerMessagePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCustomerMessages);
				}
			} else {
				$count = count($this->collCustomerMessages);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CustomerMessage object to this object
	 * through the CustomerMessage foreign key attribute.
	 *
	 * @param      CustomerMessage $l CustomerMessage
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCustomerMessage(CustomerMessage $l)
	{
		if ($this->collCustomerMessages === null) {
			$this->initCustomerMessages();
		}
		if (!in_array($l, $this->collCustomerMessages, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCustomerMessages, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collAuthors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAuthors()
	 */
	public function clearAuthors()
	{
		$this->collAuthors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAuthors collection (array).
	 *
	 * By default this just sets the collAuthors collection to an empty array (like clearcollAuthors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAuthors()
	{
		$this->collAuthors = array();
	}

	/**
	 * Gets an array of Author objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Authors from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Author[]
	 * @throws     PropelException
	 */
	public function getAuthors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAuthors === null) {
			if ($this->isNew()) {
			   $this->collAuthors = array();
			} else {

				$criteria->add(AuthorPeer::USER_ID, $this->id);

				AuthorPeer::addSelectColumns($criteria);
				$this->collAuthors = AuthorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AuthorPeer::USER_ID, $this->id);

				AuthorPeer::addSelectColumns($criteria);
				if (!isset($this->lastAuthorCriteria) || !$this->lastAuthorCriteria->equals($criteria)) {
					$this->collAuthors = AuthorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAuthorCriteria = $criteria;
		return $this->collAuthors;
	}

	/**
	 * Returns the number of related Author objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Author objects.
	 * @throws     PropelException
	 */
	public function countAuthors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAuthors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AuthorPeer::USER_ID, $this->id);

				$count = AuthorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AuthorPeer::USER_ID, $this->id);

				if (!isset($this->lastAuthorCriteria) || !$this->lastAuthorCriteria->equals($criteria)) {
					$count = AuthorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAuthors);
				}
			} else {
				$count = count($this->collAuthors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Author object to this object
	 * through the Author foreign key attribute.
	 *
	 * @param      Author $l Author
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAuthor(Author $l)
	{
		if ($this->collAuthors === null) {
			$this->initAuthors();
		}
		if (!in_array($l, $this->collAuthors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAuthors, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collActionLogs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActionLogs()
	 */
	public function clearActionLogs()
	{
		$this->collActionLogs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActionLogs collection (array).
	 *
	 * By default this just sets the collActionLogs collection to an empty array (like clearcollActionLogs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActionLogs()
	{
		$this->collActionLogs = array();
	}

	/**
	 * Gets an array of ActionLog objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ActionLogs from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ActionLog[]
	 * @throws     PropelException
	 */
	public function getActionLogs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionLogs === null) {
			if ($this->isNew()) {
			   $this->collActionLogs = array();
			} else {

				$criteria->add(ActionLogPeer::USER_ID, $this->id);

				ActionLogPeer::addSelectColumns($criteria);
				$this->collActionLogs = ActionLogPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActionLogPeer::USER_ID, $this->id);

				ActionLogPeer::addSelectColumns($criteria);
				if (!isset($this->lastActionLogCriteria) || !$this->lastActionLogCriteria->equals($criteria)) {
					$this->collActionLogs = ActionLogPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActionLogCriteria = $criteria;
		return $this->collActionLogs;
	}

	/**
	 * Returns the number of related ActionLog objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ActionLog objects.
	 * @throws     PropelException
	 */
	public function countActionLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActionLogs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActionLogPeer::USER_ID, $this->id);

				$count = ActionLogPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActionLogPeer::USER_ID, $this->id);

				if (!isset($this->lastActionLogCriteria) || !$this->lastActionLogCriteria->equals($criteria)) {
					$count = ActionLogPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collActionLogs);
				}
			} else {
				$count = count($this->collActionLogs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ActionLog object to this object
	 * through the ActionLog foreign key attribute.
	 *
	 * @param      ActionLog $l ActionLog
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActionLog(ActionLog $l)
	{
		if ($this->collActionLogs === null) {
			$this->initActionLogs();
		}
		if (!in_array($l, $this->collActionLogs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActionLogs, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ActionLogs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getActionLogsJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionLogs === null) {
			if ($this->isNew()) {
				$this->collActionLogs = array();
			} else {

				$criteria->add(ActionLogPeer::USER_ID, $this->id);

				$this->collActionLogs = ActionLogPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActionLogPeer::USER_ID, $this->id);

			if (!isset($this->lastActionLogCriteria) || !$this->lastActionLogCriteria->equals($criteria)) {
				$this->collActionLogs = ActionLogPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastActionLogCriteria = $criteria;

		return $this->collActionLogs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ActionLogs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getActionLogsJoinActionCase($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActionLogs === null) {
			if ($this->isNew()) {
				$this->collActionLogs = array();
			} else {

				$criteria->add(ActionLogPeer::USER_ID, $this->id);

				$this->collActionLogs = ActionLogPeer::doSelectJoinActionCase($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActionLogPeer::USER_ID, $this->id);

			if (!isset($this->lastActionLogCriteria) || !$this->lastActionLogCriteria->equals($criteria)) {
				$this->collActionLogs = ActionLogPeer::doSelectJoinActionCase($criteria, $con, $join_behavior);
			}
		}
		$this->lastActionLogCriteria = $criteria;

		return $this->collActionLogs;
	}

	/**
	 * Clears out the collConsentLogins collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addConsentLogins()
	 */
	public function clearConsentLogins()
	{
		$this->collConsentLogins = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collConsentLogins collection (array).
	 *
	 * By default this just sets the collConsentLogins collection to an empty array (like clearcollConsentLogins());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initConsentLogins()
	{
		$this->collConsentLogins = array();
	}

	/**
	 * Gets an array of ConsentLogin objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ConsentLogins from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ConsentLogin[]
	 * @throws     PropelException
	 */
	public function getConsentLogins($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConsentLogins === null) {
			if ($this->isNew()) {
			   $this->collConsentLogins = array();
			} else {

				$criteria->add(ConsentLoginPeer::USER_ID, $this->id);

				ConsentLoginPeer::addSelectColumns($criteria);
				$this->collConsentLogins = ConsentLoginPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ConsentLoginPeer::USER_ID, $this->id);

				ConsentLoginPeer::addSelectColumns($criteria);
				if (!isset($this->lastConsentLoginCriteria) || !$this->lastConsentLoginCriteria->equals($criteria)) {
					$this->collConsentLogins = ConsentLoginPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastConsentLoginCriteria = $criteria;
		return $this->collConsentLogins;
	}

	/**
	 * Returns the number of related ConsentLogin objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ConsentLogin objects.
	 * @throws     PropelException
	 */
	public function countConsentLogins(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collConsentLogins === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ConsentLoginPeer::USER_ID, $this->id);

				$count = ConsentLoginPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ConsentLoginPeer::USER_ID, $this->id);

				if (!isset($this->lastConsentLoginCriteria) || !$this->lastConsentLoginCriteria->equals($criteria)) {
					$count = ConsentLoginPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collConsentLogins);
				}
			} else {
				$count = count($this->collConsentLogins);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ConsentLogin object to this object
	 * through the ConsentLogin foreign key attribute.
	 *
	 * @param      ConsentLogin $l ConsentLogin
	 * @return     void
	 * @throws     PropelException
	 */
	public function addConsentLogin(ConsentLogin $l)
	{
		if ($this->collConsentLogins === null) {
			$this->initConsentLogins();
		}
		if (!in_array($l, $this->collConsentLogins, true)) { // only add it if the **same** object is not already associated
			array_push($this->collConsentLogins, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collSelectedHRSectors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSelectedHRSectors()
	 */
	public function clearSelectedHRSectors()
	{
		$this->collSelectedHRSectors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSelectedHRSectors collection (array).
	 *
	 * By default this just sets the collSelectedHRSectors collection to an empty array (like clearcollSelectedHRSectors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSelectedHRSectors()
	{
		$this->collSelectedHRSectors = array();
	}

	/**
	 * Gets an array of SelectedHRSector objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SelectedHRSectors from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SelectedHRSector[]
	 * @throws     PropelException
	 */
	public function getSelectedHRSectors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSelectedHRSectors === null) {
			if ($this->isNew()) {
			   $this->collSelectedHRSectors = array();
			} else {

				$criteria->add(SelectedHRSectorPeer::USER_ID, $this->id);

				SelectedHRSectorPeer::addSelectColumns($criteria);
				$this->collSelectedHRSectors = SelectedHRSectorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SelectedHRSectorPeer::USER_ID, $this->id);

				SelectedHRSectorPeer::addSelectColumns($criteria);
				if (!isset($this->lastSelectedHRSectorCriteria) || !$this->lastSelectedHRSectorCriteria->equals($criteria)) {
					$this->collSelectedHRSectors = SelectedHRSectorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSelectedHRSectorCriteria = $criteria;
		return $this->collSelectedHRSectors;
	}

	/**
	 * Returns the number of related SelectedHRSector objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SelectedHRSector objects.
	 * @throws     PropelException
	 */
	public function countSelectedHRSectors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSelectedHRSectors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SelectedHRSectorPeer::USER_ID, $this->id);

				$count = SelectedHRSectorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SelectedHRSectorPeer::USER_ID, $this->id);

				if (!isset($this->lastSelectedHRSectorCriteria) || !$this->lastSelectedHRSectorCriteria->equals($criteria)) {
					$count = SelectedHRSectorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSelectedHRSectors);
				}
			} else {
				$count = count($this->collSelectedHRSectors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SelectedHRSector object to this object
	 * through the SelectedHRSector foreign key attribute.
	 *
	 * @param      SelectedHRSector $l SelectedHRSector
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSelectedHRSector(SelectedHRSector $l)
	{
		if ($this->collSelectedHRSectors === null) {
			$this->initSelectedHRSectors();
		}
		if (!in_array($l, $this->collSelectedHRSectors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSelectedHRSectors, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SelectedHRSectors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSelectedHRSectorsJoinBusinessSector($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSelectedHRSectors === null) {
			if ($this->isNew()) {
				$this->collSelectedHRSectors = array();
			} else {

				$criteria->add(SelectedHRSectorPeer::USER_ID, $this->id);

				$this->collSelectedHRSectors = SelectedHRSectorPeer::doSelectJoinBusinessSector($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SelectedHRSectorPeer::USER_ID, $this->id);

			if (!isset($this->lastSelectedHRSectorCriteria) || !$this->lastSelectedHRSectorCriteria->equals($criteria)) {
				$this->collSelectedHRSectors = SelectedHRSectorPeer::doSelectJoinBusinessSector($criteria, $con, $join_behavior);
			}
		}
		$this->lastSelectedHRSectorCriteria = $criteria;

		return $this->collSelectedHRSectors;
	}

	/**
	 * Clears out the collUserJobs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserJobs()
	 */
	public function clearUserJobs()
	{
		$this->collUserJobs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserJobs collection (array).
	 *
	 * By default this just sets the collUserJobs collection to an empty array (like clearcollUserJobs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserJobs()
	{
		$this->collUserJobs = array();
	}

	/**
	 * Gets an array of UserJob objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related UserJobs from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserJob[]
	 * @throws     PropelException
	 */
	public function getUserJobs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserJobs === null) {
			if ($this->isNew()) {
			   $this->collUserJobs = array();
			} else {

				$criteria->add(UserJobPeer::USER_ID, $this->id);

				UserJobPeer::addSelectColumns($criteria);
				$this->collUserJobs = UserJobPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserJobPeer::USER_ID, $this->id);

				UserJobPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserJobCriteria) || !$this->lastUserJobCriteria->equals($criteria)) {
					$this->collUserJobs = UserJobPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserJobCriteria = $criteria;
		return $this->collUserJobs;
	}

	/**
	 * Returns the number of related UserJob objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserJob objects.
	 * @throws     PropelException
	 */
	public function countUserJobs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserJobs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserJobPeer::USER_ID, $this->id);

				$count = UserJobPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserJobPeer::USER_ID, $this->id);

				if (!isset($this->lastUserJobCriteria) || !$this->lastUserJobCriteria->equals($criteria)) {
					$count = UserJobPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUserJobs);
				}
			} else {
				$count = count($this->collUserJobs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserJob object to this object
	 * through the UserJob foreign key attribute.
	 *
	 * @param      UserJob $l UserJob
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserJob(UserJob $l)
	{
		if ($this->collUserJobs === null) {
			$this->initUserJobs();
		}
		if (!in_array($l, $this->collUserJobs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserJobs, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related UserJobs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getUserJobsJoinJob($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserJobs === null) {
			if ($this->isNew()) {
				$this->collUserJobs = array();
			} else {

				$criteria->add(UserJobPeer::USER_ID, $this->id);

				$this->collUserJobs = UserJobPeer::doSelectJoinJob($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserJobPeer::USER_ID, $this->id);

			if (!isset($this->lastUserJobCriteria) || !$this->lastUserJobCriteria->equals($criteria)) {
				$this->collUserJobs = UserJobPeer::doSelectJoinJob($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserJobCriteria = $criteria;

		return $this->collUserJobs;
	}

	/**
	 * Clears out the collUserBookmarks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserBookmarks()
	 */
	public function clearUserBookmarks()
	{
		$this->collUserBookmarks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserBookmarks collection (array).
	 *
	 * By default this just sets the collUserBookmarks collection to an empty array (like clearcollUserBookmarks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserBookmarks()
	{
		$this->collUserBookmarks = array();
	}

	/**
	 * Gets an array of UserBookmark objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related UserBookmarks from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserBookmark[]
	 * @throws     PropelException
	 */
	public function getUserBookmarks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserBookmarks === null) {
			if ($this->isNew()) {
			   $this->collUserBookmarks = array();
			} else {

				$criteria->add(UserBookmarkPeer::USER_ID, $this->id);

				UserBookmarkPeer::addSelectColumns($criteria);
				$this->collUserBookmarks = UserBookmarkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserBookmarkPeer::USER_ID, $this->id);

				UserBookmarkPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserBookmarkCriteria) || !$this->lastUserBookmarkCriteria->equals($criteria)) {
					$this->collUserBookmarks = UserBookmarkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserBookmarkCriteria = $criteria;
		return $this->collUserBookmarks;
	}

	/**
	 * Returns the number of related UserBookmark objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserBookmark objects.
	 * @throws     PropelException
	 */
	public function countUserBookmarks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserBookmarks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserBookmarkPeer::USER_ID, $this->id);

				$count = UserBookmarkPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserBookmarkPeer::USER_ID, $this->id);

				if (!isset($this->lastUserBookmarkCriteria) || !$this->lastUserBookmarkCriteria->equals($criteria)) {
					$count = UserBookmarkPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUserBookmarks);
				}
			} else {
				$count = count($this->collUserBookmarks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserBookmark object to this object
	 * through the UserBookmark foreign key attribute.
	 *
	 * @param      UserBookmark $l UserBookmark
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserBookmark(UserBookmark $l)
	{
		if ($this->collUserBookmarks === null) {
			$this->initUserBookmarks();
		}
		if (!in_array($l, $this->collUserBookmarks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserBookmarks, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related UserBookmarks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getUserBookmarksJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserBookmarks === null) {
			if ($this->isNew()) {
				$this->collUserBookmarks = array();
			} else {

				$criteria->add(UserBookmarkPeer::USER_ID, $this->id);

				$this->collUserBookmarks = UserBookmarkPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserBookmarkPeer::USER_ID, $this->id);

			if (!isset($this->lastUserBookmarkCriteria) || !$this->lastUserBookmarkCriteria->equals($criteria)) {
				$this->collUserBookmarks = UserBookmarkPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserBookmarkCriteria = $criteria;

		return $this->collUserBookmarks;
	}

	/**
	 * Clears out the collJobMessages collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJobMessages()
	 */
	public function clearJobMessages()
	{
		$this->collJobMessages = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJobMessages collection (array).
	 *
	 * By default this just sets the collJobMessages collection to an empty array (like clearcollJobMessages());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJobMessages()
	{
		$this->collJobMessages = array();
	}

	/**
	 * Gets an array of JobMessage objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related JobMessages from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array JobMessage[]
	 * @throws     PropelException
	 */
	public function getJobMessages($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobMessages === null) {
			if ($this->isNew()) {
			   $this->collJobMessages = array();
			} else {

				$criteria->add(JobMessagePeer::USER_ID, $this->id);

				JobMessagePeer::addSelectColumns($criteria);
				$this->collJobMessages = JobMessagePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JobMessagePeer::USER_ID, $this->id);

				JobMessagePeer::addSelectColumns($criteria);
				if (!isset($this->lastJobMessageCriteria) || !$this->lastJobMessageCriteria->equals($criteria)) {
					$this->collJobMessages = JobMessagePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJobMessageCriteria = $criteria;
		return $this->collJobMessages;
	}

	/**
	 * Returns the number of related JobMessage objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related JobMessage objects.
	 * @throws     PropelException
	 */
	public function countJobMessages(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJobMessages === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JobMessagePeer::USER_ID, $this->id);

				$count = JobMessagePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JobMessagePeer::USER_ID, $this->id);

				if (!isset($this->lastJobMessageCriteria) || !$this->lastJobMessageCriteria->equals($criteria)) {
					$count = JobMessagePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJobMessages);
				}
			} else {
				$count = count($this->collJobMessages);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a JobMessage object to this object
	 * through the JobMessage foreign key attribute.
	 *
	 * @param      JobMessage $l JobMessage
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJobMessage(JobMessage $l)
	{
		if ($this->collJobMessages === null) {
			$this->initJobMessages();
		}
		if (!in_array($l, $this->collJobMessages, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJobMessages, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related JobMessages from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getJobMessagesJoinHRProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobMessages === null) {
			if ($this->isNew()) {
				$this->collJobMessages = array();
			} else {

				$criteria->add(JobMessagePeer::USER_ID, $this->id);

				$this->collJobMessages = JobMessagePeer::doSelectJoinHRProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobMessagePeer::USER_ID, $this->id);

			if (!isset($this->lastJobMessageCriteria) || !$this->lastJobMessageCriteria->equals($criteria)) {
				$this->collJobMessages = JobMessagePeer::doSelectJoinHRProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobMessageCriteria = $criteria;

		return $this->collJobMessages;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related JobMessages from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getJobMessagesJoinJob($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobMessages === null) {
			if ($this->isNew()) {
				$this->collJobMessages = array();
			} else {

				$criteria->add(JobMessagePeer::USER_ID, $this->id);

				$this->collJobMessages = JobMessagePeer::doSelectJoinJob($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobMessagePeer::USER_ID, $this->id);

			if (!isset($this->lastJobMessageCriteria) || !$this->lastJobMessageCriteria->equals($criteria)) {
				$this->collJobMessages = JobMessagePeer::doSelectJoinJob($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobMessageCriteria = $criteria;

		return $this->collJobMessages;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related JobMessages from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getJobMessagesJoinJobMessageTemplate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobMessages === null) {
			if ($this->isNew()) {
				$this->collJobMessages = array();
			} else {

				$criteria->add(JobMessagePeer::USER_ID, $this->id);

				$this->collJobMessages = JobMessagePeer::doSelectJoinJobMessageTemplate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobMessagePeer::USER_ID, $this->id);

			if (!isset($this->lastJobMessageCriteria) || !$this->lastJobMessageCriteria->equals($criteria)) {
				$this->collJobMessages = JobMessagePeer::doSelectJoinJobMessageTemplate($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobMessageCriteria = $criteria;

		return $this->collJobMessages;
	}

	/**
	 * Clears out the collClientUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addClientUsers()
	 */
	public function clearClientUsers()
	{
		$this->collClientUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collClientUsers collection (array).
	 *
	 * By default this just sets the collClientUsers collection to an empty array (like clearcollClientUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initClientUsers()
	{
		$this->collClientUsers = array();
	}

	/**
	 * Gets an array of ClientUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ClientUsers from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ClientUser[]
	 * @throws     PropelException
	 */
	public function getClientUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientUsers === null) {
			if ($this->isNew()) {
			   $this->collClientUsers = array();
			} else {

				$criteria->add(ClientUserPeer::USER_ID, $this->id);

				ClientUserPeer::addSelectColumns($criteria);
				$this->collClientUsers = ClientUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ClientUserPeer::USER_ID, $this->id);

				ClientUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastClientUserCriteria) || !$this->lastClientUserCriteria->equals($criteria)) {
					$this->collClientUsers = ClientUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastClientUserCriteria = $criteria;
		return $this->collClientUsers;
	}

	/**
	 * Returns the number of related ClientUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ClientUser objects.
	 * @throws     PropelException
	 */
	public function countClientUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collClientUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ClientUserPeer::USER_ID, $this->id);

				$count = ClientUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ClientUserPeer::USER_ID, $this->id);

				if (!isset($this->lastClientUserCriteria) || !$this->lastClientUserCriteria->equals($criteria)) {
					$count = ClientUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collClientUsers);
				}
			} else {
				$count = count($this->collClientUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ClientUser object to this object
	 * through the ClientUser foreign key attribute.
	 *
	 * @param      ClientUser $l ClientUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addClientUser(ClientUser $l)
	{
		if ($this->collClientUsers === null) {
			$this->initClientUsers();
		}
		if (!in_array($l, $this->collClientUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collClientUsers, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ClientUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getClientUsersJoinClientDevice($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientUsers === null) {
			if ($this->isNew()) {
				$this->collClientUsers = array();
			} else {

				$criteria->add(ClientUserPeer::USER_ID, $this->id);

				$this->collClientUsers = ClientUserPeer::doSelectJoinClientDevice($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientUserPeer::USER_ID, $this->id);

			if (!isset($this->lastClientUserCriteria) || !$this->lastClientUserCriteria->equals($criteria)) {
				$this->collClientUsers = ClientUserPeer::doSelectJoinClientDevice($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientUserCriteria = $criteria;

		return $this->collClientUsers;
	}

	/**
	 * Clears out the collIgnoreAdvisesRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIgnoreAdvisesRelatedByUserId()
	 */
	public function clearIgnoreAdvisesRelatedByUserId()
	{
		$this->collIgnoreAdvisesRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIgnoreAdvisesRelatedByUserId collection (array).
	 *
	 * By default this just sets the collIgnoreAdvisesRelatedByUserId collection to an empty array (like clearcollIgnoreAdvisesRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIgnoreAdvisesRelatedByUserId()
	{
		$this->collIgnoreAdvisesRelatedByUserId = array();
	}

	/**
	 * Gets an array of IgnoreAdvise objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related IgnoreAdvisesRelatedByUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array IgnoreAdvise[]
	 * @throws     PropelException
	 */
	public function getIgnoreAdvisesRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIgnoreAdvisesRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collIgnoreAdvisesRelatedByUserId = array();
			} else {

				$criteria->add(IgnoreAdvisePeer::USER_ID, $this->id);

				IgnoreAdvisePeer::addSelectColumns($criteria);
				$this->collIgnoreAdvisesRelatedByUserId = IgnoreAdvisePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IgnoreAdvisePeer::USER_ID, $this->id);

				IgnoreAdvisePeer::addSelectColumns($criteria);
				if (!isset($this->lastIgnoreAdviseRelatedByUserIdCriteria) || !$this->lastIgnoreAdviseRelatedByUserIdCriteria->equals($criteria)) {
					$this->collIgnoreAdvisesRelatedByUserId = IgnoreAdvisePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIgnoreAdviseRelatedByUserIdCriteria = $criteria;
		return $this->collIgnoreAdvisesRelatedByUserId;
	}

	/**
	 * Returns the number of related IgnoreAdvise objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related IgnoreAdvise objects.
	 * @throws     PropelException
	 */
	public function countIgnoreAdvisesRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIgnoreAdvisesRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IgnoreAdvisePeer::USER_ID, $this->id);

				$count = IgnoreAdvisePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IgnoreAdvisePeer::USER_ID, $this->id);

				if (!isset($this->lastIgnoreAdviseRelatedByUserIdCriteria) || !$this->lastIgnoreAdviseRelatedByUserIdCriteria->equals($criteria)) {
					$count = IgnoreAdvisePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collIgnoreAdvisesRelatedByUserId);
				}
			} else {
				$count = count($this->collIgnoreAdvisesRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a IgnoreAdvise object to this object
	 * through the IgnoreAdvise foreign key attribute.
	 *
	 * @param      IgnoreAdvise $l IgnoreAdvise
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIgnoreAdviseRelatedByUserId(IgnoreAdvise $l)
	{
		if ($this->collIgnoreAdvisesRelatedByUserId === null) {
			$this->initIgnoreAdvisesRelatedByUserId();
		}
		if (!in_array($l, $this->collIgnoreAdvisesRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIgnoreAdvisesRelatedByUserId, $l);
			$l->setUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collIgnoreAdvisesRelatedByRelatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIgnoreAdvisesRelatedByRelatedUserId()
	 */
	public function clearIgnoreAdvisesRelatedByRelatedUserId()
	{
		$this->collIgnoreAdvisesRelatedByRelatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIgnoreAdvisesRelatedByRelatedUserId collection (array).
	 *
	 * By default this just sets the collIgnoreAdvisesRelatedByRelatedUserId collection to an empty array (like clearcollIgnoreAdvisesRelatedByRelatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIgnoreAdvisesRelatedByRelatedUserId()
	{
		$this->collIgnoreAdvisesRelatedByRelatedUserId = array();
	}

	/**
	 * Gets an array of IgnoreAdvise objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related IgnoreAdvisesRelatedByRelatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array IgnoreAdvise[]
	 * @throws     PropelException
	 */
	public function getIgnoreAdvisesRelatedByRelatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIgnoreAdvisesRelatedByRelatedUserId === null) {
			if ($this->isNew()) {
			   $this->collIgnoreAdvisesRelatedByRelatedUserId = array();
			} else {

				$criteria->add(IgnoreAdvisePeer::RELATED_USER_ID, $this->id);

				IgnoreAdvisePeer::addSelectColumns($criteria);
				$this->collIgnoreAdvisesRelatedByRelatedUserId = IgnoreAdvisePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IgnoreAdvisePeer::RELATED_USER_ID, $this->id);

				IgnoreAdvisePeer::addSelectColumns($criteria);
				if (!isset($this->lastIgnoreAdviseRelatedByRelatedUserIdCriteria) || !$this->lastIgnoreAdviseRelatedByRelatedUserIdCriteria->equals($criteria)) {
					$this->collIgnoreAdvisesRelatedByRelatedUserId = IgnoreAdvisePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIgnoreAdviseRelatedByRelatedUserIdCriteria = $criteria;
		return $this->collIgnoreAdvisesRelatedByRelatedUserId;
	}

	/**
	 * Returns the number of related IgnoreAdvise objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related IgnoreAdvise objects.
	 * @throws     PropelException
	 */
	public function countIgnoreAdvisesRelatedByRelatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIgnoreAdvisesRelatedByRelatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IgnoreAdvisePeer::RELATED_USER_ID, $this->id);

				$count = IgnoreAdvisePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IgnoreAdvisePeer::RELATED_USER_ID, $this->id);

				if (!isset($this->lastIgnoreAdviseRelatedByRelatedUserIdCriteria) || !$this->lastIgnoreAdviseRelatedByRelatedUserIdCriteria->equals($criteria)) {
					$count = IgnoreAdvisePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collIgnoreAdvisesRelatedByRelatedUserId);
				}
			} else {
				$count = count($this->collIgnoreAdvisesRelatedByRelatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a IgnoreAdvise object to this object
	 * through the IgnoreAdvise foreign key attribute.
	 *
	 * @param      IgnoreAdvise $l IgnoreAdvise
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIgnoreAdviseRelatedByRelatedUserId(IgnoreAdvise $l)
	{
		if ($this->collIgnoreAdvisesRelatedByRelatedUserId === null) {
			$this->initIgnoreAdvisesRelatedByRelatedUserId();
		}
		if (!in_array($l, $this->collIgnoreAdvisesRelatedByRelatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIgnoreAdvisesRelatedByRelatedUserId, $l);
			$l->setUserRelatedByRelatedUserId($this);
		}
	}

	/**
	 * Clears out the collWallIgnores collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addWallIgnores()
	 */
	public function clearWallIgnores()
	{
		$this->collWallIgnores = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collWallIgnores collection (array).
	 *
	 * By default this just sets the collWallIgnores collection to an empty array (like clearcollWallIgnores());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initWallIgnores()
	{
		$this->collWallIgnores = array();
	}

	/**
	 * Gets an array of WallIgnore objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related WallIgnores from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array WallIgnore[]
	 * @throws     PropelException
	 */
	public function getWallIgnores($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallIgnores === null) {
			if ($this->isNew()) {
			   $this->collWallIgnores = array();
			} else {

				$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

				WallIgnorePeer::addSelectColumns($criteria);
				$this->collWallIgnores = WallIgnorePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

				WallIgnorePeer::addSelectColumns($criteria);
				if (!isset($this->lastWallIgnoreCriteria) || !$this->lastWallIgnoreCriteria->equals($criteria)) {
					$this->collWallIgnores = WallIgnorePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastWallIgnoreCriteria = $criteria;
		return $this->collWallIgnores;
	}

	/**
	 * Returns the number of related WallIgnore objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related WallIgnore objects.
	 * @throws     PropelException
	 */
	public function countWallIgnores(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collWallIgnores === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

				$count = WallIgnorePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

				if (!isset($this->lastWallIgnoreCriteria) || !$this->lastWallIgnoreCriteria->equals($criteria)) {
					$count = WallIgnorePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collWallIgnores);
				}
			} else {
				$count = count($this->collWallIgnores);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a WallIgnore object to this object
	 * through the WallIgnore foreign key attribute.
	 *
	 * @param      WallIgnore $l WallIgnore
	 * @return     void
	 * @throws     PropelException
	 */
	public function addWallIgnore(WallIgnore $l)
	{
		if ($this->collWallIgnores === null) {
			$this->initWallIgnores();
		}
		if (!in_array($l, $this->collWallIgnores, true)) { // only add it if the **same** object is not already associated
			array_push($this->collWallIgnores, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related WallIgnores from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getWallIgnoresJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallIgnores === null) {
			if ($this->isNew()) {
				$this->collWallIgnores = array();
			} else {

				$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

				$this->collWallIgnores = WallIgnorePeer::doSelectJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

			if (!isset($this->lastWallIgnoreCriteria) || !$this->lastWallIgnoreCriteria->equals($criteria)) {
				$this->collWallIgnores = WallIgnorePeer::doSelectJoinPrivacyNodeTypeRelatedByOwnerTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallIgnoreCriteria = $criteria;

		return $this->collWallIgnores;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related WallIgnores from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getWallIgnoresJoinPrivacyNodeTypeRelatedByPosterTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallIgnores === null) {
			if ($this->isNew()) {
				$this->collWallIgnores = array();
			} else {

				$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

				$this->collWallIgnores = WallIgnorePeer::doSelectJoinPrivacyNodeTypeRelatedByPosterTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

			if (!isset($this->lastWallIgnoreCriteria) || !$this->lastWallIgnoreCriteria->equals($criteria)) {
				$this->collWallIgnores = WallIgnorePeer::doSelectJoinPrivacyNodeTypeRelatedByPosterTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallIgnoreCriteria = $criteria;

		return $this->collWallIgnores;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related WallIgnores from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getWallIgnoresJoinPrivacyNodeTypeRelatedByItemTypeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWallIgnores === null) {
			if ($this->isNew()) {
				$this->collWallIgnores = array();
			} else {

				$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

				$this->collWallIgnores = WallIgnorePeer::doSelectJoinPrivacyNodeTypeRelatedByItemTypeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WallIgnorePeer::IGNORE_USER_ID, $this->id);

			if (!isset($this->lastWallIgnoreCriteria) || !$this->lastWallIgnoreCriteria->equals($criteria)) {
				$this->collWallIgnores = WallIgnorePeer::doSelectJoinPrivacyNodeTypeRelatedByItemTypeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastWallIgnoreCriteria = $criteria;

		return $this->collWallIgnores;
	}

	/**
	 * Clears out the collPlatformAdEvents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPlatformAdEvents()
	 */
	public function clearPlatformAdEvents()
	{
		$this->collPlatformAdEvents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPlatformAdEvents collection (array).
	 *
	 * By default this just sets the collPlatformAdEvents collection to an empty array (like clearcollPlatformAdEvents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPlatformAdEvents()
	{
		$this->collPlatformAdEvents = array();
	}

	/**
	 * Gets an array of PlatformAdEvent objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related PlatformAdEvents from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PlatformAdEvent[]
	 * @throws     PropelException
	 */
	public function getPlatformAdEvents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlatformAdEvents === null) {
			if ($this->isNew()) {
			   $this->collPlatformAdEvents = array();
			} else {

				$criteria->add(PlatformAdEventPeer::USER_ID, $this->id);

				PlatformAdEventPeer::addSelectColumns($criteria);
				$this->collPlatformAdEvents = PlatformAdEventPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PlatformAdEventPeer::USER_ID, $this->id);

				PlatformAdEventPeer::addSelectColumns($criteria);
				if (!isset($this->lastPlatformAdEventCriteria) || !$this->lastPlatformAdEventCriteria->equals($criteria)) {
					$this->collPlatformAdEvents = PlatformAdEventPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPlatformAdEventCriteria = $criteria;
		return $this->collPlatformAdEvents;
	}

	/**
	 * Returns the number of related PlatformAdEvent objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PlatformAdEvent objects.
	 * @throws     PropelException
	 */
	public function countPlatformAdEvents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPlatformAdEvents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PlatformAdEventPeer::USER_ID, $this->id);

				$count = PlatformAdEventPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PlatformAdEventPeer::USER_ID, $this->id);

				if (!isset($this->lastPlatformAdEventCriteria) || !$this->lastPlatformAdEventCriteria->equals($criteria)) {
					$count = PlatformAdEventPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPlatformAdEvents);
				}
			} else {
				$count = count($this->collPlatformAdEvents);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PlatformAdEvent object to this object
	 * through the PlatformAdEvent foreign key attribute.
	 *
	 * @param      PlatformAdEvent $l PlatformAdEvent
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPlatformAdEvent(PlatformAdEvent $l)
	{
		if ($this->collPlatformAdEvents === null) {
			$this->initPlatformAdEvents();
		}
		if (!in_array($l, $this->collPlatformAdEvents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPlatformAdEvents, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related PlatformAdEvents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getPlatformAdEventsJoinPlatformAd($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlatformAdEvents === null) {
			if ($this->isNew()) {
				$this->collPlatformAdEvents = array();
			} else {

				$criteria->add(PlatformAdEventPeer::USER_ID, $this->id);

				$this->collPlatformAdEvents = PlatformAdEventPeer::doSelectJoinPlatformAd($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PlatformAdEventPeer::USER_ID, $this->id);

			if (!isset($this->lastPlatformAdEventCriteria) || !$this->lastPlatformAdEventCriteria->equals($criteria)) {
				$this->collPlatformAdEvents = PlatformAdEventPeer::doSelectJoinPlatformAd($criteria, $con, $join_behavior);
			}
		}
		$this->lastPlatformAdEventCriteria = $criteria;

		return $this->collPlatformAdEvents;
	}

	/**
	 * Clears out the collTransferOwnershipRequestsRelatedByProcessInitById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransferOwnershipRequestsRelatedByProcessInitById()
	 */
	public function clearTransferOwnershipRequestsRelatedByProcessInitById()
	{
		$this->collTransferOwnershipRequestsRelatedByProcessInitById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransferOwnershipRequestsRelatedByProcessInitById collection (array).
	 *
	 * By default this just sets the collTransferOwnershipRequestsRelatedByProcessInitById collection to an empty array (like clearcollTransferOwnershipRequestsRelatedByProcessInitById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransferOwnershipRequestsRelatedByProcessInitById()
	{
		$this->collTransferOwnershipRequestsRelatedByProcessInitById = array();
	}

	/**
	 * Gets an array of TransferOwnershipRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related TransferOwnershipRequestsRelatedByProcessInitById from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TransferOwnershipRequest[]
	 * @throws     PropelException
	 */
	public function getTransferOwnershipRequestsRelatedByProcessInitById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequestsRelatedByProcessInitById === null) {
			if ($this->isNew()) {
			   $this->collTransferOwnershipRequestsRelatedByProcessInitById = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::PROCESS_INIT_BY_ID, $this->id);

				TransferOwnershipRequestPeer::addSelectColumns($criteria);
				$this->collTransferOwnershipRequestsRelatedByProcessInitById = TransferOwnershipRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransferOwnershipRequestPeer::PROCESS_INIT_BY_ID, $this->id);

				TransferOwnershipRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria->equals($criteria)) {
					$this->collTransferOwnershipRequestsRelatedByProcessInitById = TransferOwnershipRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria = $criteria;
		return $this->collTransferOwnershipRequestsRelatedByProcessInitById;
	}

	/**
	 * Returns the number of related TransferOwnershipRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TransferOwnershipRequest objects.
	 * @throws     PropelException
	 */
	public function countTransferOwnershipRequestsRelatedByProcessInitById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransferOwnershipRequestsRelatedByProcessInitById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransferOwnershipRequestPeer::PROCESS_INIT_BY_ID, $this->id);

				$count = TransferOwnershipRequestPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransferOwnershipRequestPeer::PROCESS_INIT_BY_ID, $this->id);

				if (!isset($this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria->equals($criteria)) {
					$count = TransferOwnershipRequestPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTransferOwnershipRequestsRelatedByProcessInitById);
				}
			} else {
				$count = count($this->collTransferOwnershipRequestsRelatedByProcessInitById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TransferOwnershipRequest object to this object
	 * through the TransferOwnershipRequest foreign key attribute.
	 *
	 * @param      TransferOwnershipRequest $l TransferOwnershipRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransferOwnershipRequestRelatedByProcessInitById(TransferOwnershipRequest $l)
	{
		if ($this->collTransferOwnershipRequestsRelatedByProcessInitById === null) {
			$this->initTransferOwnershipRequestsRelatedByProcessInitById();
		}
		if (!in_array($l, $this->collTransferOwnershipRequestsRelatedByProcessInitById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransferOwnershipRequestsRelatedByProcessInitById, $l);
			$l->setUserRelatedByProcessInitById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related TransferOwnershipRequestsRelatedByProcessInitById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getTransferOwnershipRequestsRelatedByProcessInitByIdJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequestsRelatedByProcessInitById === null) {
			if ($this->isNew()) {
				$this->collTransferOwnershipRequestsRelatedByProcessInitById = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::PROCESS_INIT_BY_ID, $this->id);

				$this->collTransferOwnershipRequestsRelatedByProcessInitById = TransferOwnershipRequestPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransferOwnershipRequestPeer::PROCESS_INIT_BY_ID, $this->id);

			if (!isset($this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria->equals($criteria)) {
				$this->collTransferOwnershipRequestsRelatedByProcessInitById = TransferOwnershipRequestPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransferOwnershipRequestRelatedByProcessInitByIdCriteria = $criteria;

		return $this->collTransferOwnershipRequestsRelatedByProcessInitById;
	}

	/**
	 * Clears out the collTransferOwnershipRequestsRelatedByCurrentOwnerId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransferOwnershipRequestsRelatedByCurrentOwnerId()
	 */
	public function clearTransferOwnershipRequestsRelatedByCurrentOwnerId()
	{
		$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransferOwnershipRequestsRelatedByCurrentOwnerId collection (array).
	 *
	 * By default this just sets the collTransferOwnershipRequestsRelatedByCurrentOwnerId collection to an empty array (like clearcollTransferOwnershipRequestsRelatedByCurrentOwnerId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransferOwnershipRequestsRelatedByCurrentOwnerId()
	{
		$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = array();
	}

	/**
	 * Gets an array of TransferOwnershipRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related TransferOwnershipRequestsRelatedByCurrentOwnerId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TransferOwnershipRequest[]
	 * @throws     PropelException
	 */
	public function getTransferOwnershipRequestsRelatedByCurrentOwnerId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId === null) {
			if ($this->isNew()) {
			   $this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::CURRENT_OWNER_ID, $this->id);

				TransferOwnershipRequestPeer::addSelectColumns($criteria);
				$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = TransferOwnershipRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransferOwnershipRequestPeer::CURRENT_OWNER_ID, $this->id);

				TransferOwnershipRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria->equals($criteria)) {
					$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = TransferOwnershipRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria = $criteria;
		return $this->collTransferOwnershipRequestsRelatedByCurrentOwnerId;
	}

	/**
	 * Returns the number of related TransferOwnershipRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TransferOwnershipRequest objects.
	 * @throws     PropelException
	 */
	public function countTransferOwnershipRequestsRelatedByCurrentOwnerId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransferOwnershipRequestPeer::CURRENT_OWNER_ID, $this->id);

				$count = TransferOwnershipRequestPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransferOwnershipRequestPeer::CURRENT_OWNER_ID, $this->id);

				if (!isset($this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria->equals($criteria)) {
					$count = TransferOwnershipRequestPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId);
				}
			} else {
				$count = count($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TransferOwnershipRequest object to this object
	 * through the TransferOwnershipRequest foreign key attribute.
	 *
	 * @param      TransferOwnershipRequest $l TransferOwnershipRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransferOwnershipRequestRelatedByCurrentOwnerId(TransferOwnershipRequest $l)
	{
		if ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId === null) {
			$this->initTransferOwnershipRequestsRelatedByCurrentOwnerId();
		}
		if (!in_array($l, $this->collTransferOwnershipRequestsRelatedByCurrentOwnerId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId, $l);
			$l->setUserRelatedByCurrentOwnerId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related TransferOwnershipRequestsRelatedByCurrentOwnerId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getTransferOwnershipRequestsRelatedByCurrentOwnerIdJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId === null) {
			if ($this->isNew()) {
				$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::CURRENT_OWNER_ID, $this->id);

				$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = TransferOwnershipRequestPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransferOwnershipRequestPeer::CURRENT_OWNER_ID, $this->id);

			if (!isset($this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria->equals($criteria)) {
				$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = TransferOwnershipRequestPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransferOwnershipRequestRelatedByCurrentOwnerIdCriteria = $criteria;

		return $this->collTransferOwnershipRequestsRelatedByCurrentOwnerId;
	}

	/**
	 * Clears out the collTransferOwnershipRequestsRelatedByNewOwnerId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransferOwnershipRequestsRelatedByNewOwnerId()
	 */
	public function clearTransferOwnershipRequestsRelatedByNewOwnerId()
	{
		$this->collTransferOwnershipRequestsRelatedByNewOwnerId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransferOwnershipRequestsRelatedByNewOwnerId collection (array).
	 *
	 * By default this just sets the collTransferOwnershipRequestsRelatedByNewOwnerId collection to an empty array (like clearcollTransferOwnershipRequestsRelatedByNewOwnerId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransferOwnershipRequestsRelatedByNewOwnerId()
	{
		$this->collTransferOwnershipRequestsRelatedByNewOwnerId = array();
	}

	/**
	 * Gets an array of TransferOwnershipRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related TransferOwnershipRequestsRelatedByNewOwnerId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TransferOwnershipRequest[]
	 * @throws     PropelException
	 */
	public function getTransferOwnershipRequestsRelatedByNewOwnerId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequestsRelatedByNewOwnerId === null) {
			if ($this->isNew()) {
			   $this->collTransferOwnershipRequestsRelatedByNewOwnerId = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::NEW_OWNER_ID, $this->id);

				TransferOwnershipRequestPeer::addSelectColumns($criteria);
				$this->collTransferOwnershipRequestsRelatedByNewOwnerId = TransferOwnershipRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransferOwnershipRequestPeer::NEW_OWNER_ID, $this->id);

				TransferOwnershipRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria->equals($criteria)) {
					$this->collTransferOwnershipRequestsRelatedByNewOwnerId = TransferOwnershipRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria = $criteria;
		return $this->collTransferOwnershipRequestsRelatedByNewOwnerId;
	}

	/**
	 * Returns the number of related TransferOwnershipRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TransferOwnershipRequest objects.
	 * @throws     PropelException
	 */
	public function countTransferOwnershipRequestsRelatedByNewOwnerId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransferOwnershipRequestsRelatedByNewOwnerId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransferOwnershipRequestPeer::NEW_OWNER_ID, $this->id);

				$count = TransferOwnershipRequestPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransferOwnershipRequestPeer::NEW_OWNER_ID, $this->id);

				if (!isset($this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria->equals($criteria)) {
					$count = TransferOwnershipRequestPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTransferOwnershipRequestsRelatedByNewOwnerId);
				}
			} else {
				$count = count($this->collTransferOwnershipRequestsRelatedByNewOwnerId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TransferOwnershipRequest object to this object
	 * through the TransferOwnershipRequest foreign key attribute.
	 *
	 * @param      TransferOwnershipRequest $l TransferOwnershipRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransferOwnershipRequestRelatedByNewOwnerId(TransferOwnershipRequest $l)
	{
		if ($this->collTransferOwnershipRequestsRelatedByNewOwnerId === null) {
			$this->initTransferOwnershipRequestsRelatedByNewOwnerId();
		}
		if (!in_array($l, $this->collTransferOwnershipRequestsRelatedByNewOwnerId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransferOwnershipRequestsRelatedByNewOwnerId, $l);
			$l->setUserRelatedByNewOwnerId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related TransferOwnershipRequestsRelatedByNewOwnerId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getTransferOwnershipRequestsRelatedByNewOwnerIdJoinPrivacyNodeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransferOwnershipRequestsRelatedByNewOwnerId === null) {
			if ($this->isNew()) {
				$this->collTransferOwnershipRequestsRelatedByNewOwnerId = array();
			} else {

				$criteria->add(TransferOwnershipRequestPeer::NEW_OWNER_ID, $this->id);

				$this->collTransferOwnershipRequestsRelatedByNewOwnerId = TransferOwnershipRequestPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransferOwnershipRequestPeer::NEW_OWNER_ID, $this->id);

			if (!isset($this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria) || !$this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria->equals($criteria)) {
				$this->collTransferOwnershipRequestsRelatedByNewOwnerId = TransferOwnershipRequestPeer::doSelectJoinPrivacyNodeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransferOwnershipRequestRelatedByNewOwnerIdCriteria = $criteria;

		return $this->collTransferOwnershipRequestsRelatedByNewOwnerId;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collEmailTransactions) {
				foreach ((array) $this->collEmailTransactions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumes) {
				foreach ((array) $this->collResumes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResumeReferences) {
				foreach ((array) $this->collResumeReferences as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRelationsRelatedByUserId) {
				foreach ((array) $this->collRelationsRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRelationsRelatedByRelatedUserId) {
				foreach ((array) $this->collRelationsRelatedByRelatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCustomerMessages) {
				foreach ((array) $this->collCustomerMessages as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAuthors) {
				foreach ((array) $this->collAuthors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collActionLogs) {
				foreach ((array) $this->collActionLogs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collConsentLogins) {
				foreach ((array) $this->collConsentLogins as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSelectedHRSectors) {
				foreach ((array) $this->collSelectedHRSectors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserJobs) {
				foreach ((array) $this->collUserJobs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserBookmarks) {
				foreach ((array) $this->collUserBookmarks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJobMessages) {
				foreach ((array) $this->collJobMessages as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collClientUsers) {
				foreach ((array) $this->collClientUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIgnoreAdvisesRelatedByUserId) {
				foreach ((array) $this->collIgnoreAdvisesRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIgnoreAdvisesRelatedByRelatedUserId) {
				foreach ((array) $this->collIgnoreAdvisesRelatedByRelatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collWallIgnores) {
				foreach ((array) $this->collWallIgnores as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPlatformAdEvents) {
				foreach ((array) $this->collPlatformAdEvents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransferOwnershipRequestsRelatedByProcessInitById) {
				foreach ((array) $this->collTransferOwnershipRequestsRelatedByProcessInitById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransferOwnershipRequestsRelatedByCurrentOwnerId) {
				foreach ((array) $this->collTransferOwnershipRequestsRelatedByCurrentOwnerId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransferOwnershipRequestsRelatedByNewOwnerId) {
				foreach ((array) $this->collTransferOwnershipRequestsRelatedByNewOwnerId as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collEmailTransactions = null;
		$this->collResumes = null;
		$this->collResumeReferences = null;
		$this->collRelationsRelatedByUserId = null;
		$this->collRelationsRelatedByRelatedUserId = null;
		$this->collCustomerMessages = null;
		$this->collAuthors = null;
		$this->collActionLogs = null;
		$this->collConsentLogins = null;
		$this->collSelectedHRSectors = null;
		$this->collUserJobs = null;
		$this->collUserBookmarks = null;
		$this->collJobMessages = null;
		$this->collClientUsers = null;
		$this->collIgnoreAdvisesRelatedByUserId = null;
		$this->collIgnoreAdvisesRelatedByRelatedUserId = null;
		$this->collWallIgnores = null;
		$this->collPlatformAdEvents = null;
		$this->collTransferOwnershipRequestsRelatedByProcessInitById = null;
		$this->collTransferOwnershipRequestsRelatedByCurrentOwnerId = null;
		$this->collTransferOwnershipRequestsRelatedByNewOwnerId = null;
			$this->aLogin = null;
			$this->aUserProfile = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseUser:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseUser::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseUser
